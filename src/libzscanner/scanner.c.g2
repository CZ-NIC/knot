
/*  Copyright (C) CZ.NIC, z.s.p.o. and contributors
 *  SPDX-License-Identifier: GPL-2.0-or-later
 *  For more information, see <https://www.knot-dns.cz/>
 */

#include <arpa/inet.h>
#include <errno.h>
#include <fcntl.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <libgen.h>
#include <math.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <unistd.h>

#include "libzscanner/scanner.h"
#include "libzscanner/functions.h"
#include "libknot/attribute.h"
#include "libknot/descriptor.h"

/*! \brief Maximal length of rdata item. */
#define MAX_ITEM_LENGTH		255
#define MAX_ITEM_LENGTH2	65535

/*! \brief Latitude value for equator (2^31). */
#define LOC_LAT_ZERO	(uint32_t)2147483648
/*! \brief Longitude value for meridian (2^31). */
#define LOC_LONG_ZERO	(uint32_t)2147483648
/*! \brief Zero level altitude value. */
#define LOC_ALT_ZERO	(uint32_t)10000000

/*! \brief Shorthand for setting warning data. */
#define WARN(err_code) { s->error.code = err_code; }
/*! \brief Shorthand for setting error data. */
#define ERR(err_code) { WARN(err_code); s->error.fatal = true; }
/*! \brief Shorthand for error reset. */
#define NOERR { WARN(ZS_OK); s->error.fatal = false; }

/*!
 * \brief Writes record type number to r_data.
 *
 * \param type		Type number.
 * \param rdata_tail	Position where to write type number to.
 */
static inline void type_num(const uint16_t type, uint8_t **rdata_tail)
{
	*((uint16_t *)*rdata_tail) = htons(type);
	*rdata_tail += 2;
}

/*!
 * \brief Sets bit to bitmap window.
 *
 * \param type		Type number.
 * \param s		Scanner context.
 */
static inline void window_add_bit(const uint16_t type, zs_scanner_t *s) {
	uint8_t win      = type / 256;
	uint8_t bit_pos  = type % 256;
	uint8_t byte_pos = bit_pos / 8;

	((s->windows[win]).bitmap)[byte_pos] |= 128 >> (bit_pos % 8);

	if ((s->windows[win]).length < byte_pos + 1) {
		(s->windows[win]).length = byte_pos + 1;
	}

	if (s->last_window < win) {
		s->last_window = win;
	}
}

// Include scanner file (in Ragel).






_public_
int zs_init(
	zs_scanner_t *s,
	const char *origin,
	const uint16_t rclass,
	const uint32_t ttl)
{
	if (s == NULL) {
		return -1;
	}

	memset(s, 0, sizeof(*s));

	// Nonzero initial scanner state.
	s->cs = 1641;

	// Reset the file descriptor.
	s->file.descriptor = -1;

	// Use the root zone as origin if not specified.
	if (origin == NULL || strlen(origin) == 0) {
		origin = ".";
	}
	size_t origin_len = strlen(origin);

	// Prepare a zone settings header.
	const char *format;
	if (origin[origin_len - 1] != '.') {
		format = "$ORIGIN %s.\n";
	} else {
		format = "$ORIGIN %s\n";
	}

	char settings[1024];
	int ret = snprintf(settings, sizeof(settings), format, origin);
	if (ret <= 0 || ret >= sizeof(settings)) {
		ERR(ZS_ENOMEM);
		return -1;
	}

	// Parse the settings to set up the scanner origin.
	if (zs_set_input_string(s, settings, ret) != 0 ||
	    zs_parse_all(s) != 0) {
		return -1;
	}

	// Set scanner defaults.
	s->path = strdup(".");
	if (s->path == NULL) {
		ERR(ZS_ENOMEM);
		return -1;
	}
	s->default_class = rclass;
	s->default_ttl = ttl;
	s->line_counter = 1;

	s->state = ZS_STATE_NONE;
	s->process.automatic = false;

	return 0;
}

static void input_deinit(
	zs_scanner_t *s,
	bool keep_filename)
{
	// Deinit the file input.
	if (s->file.descriptor != -1) {
		// Unmap the file content.
		if (s->input.start != NULL) {
			if (s->input.mmaped) {
				munmap((void *)s->input.start,
				       s->input.end - s->input.start);
			} else {
				free((void *)s->input.start);
			}
		}

		// Close the opened file.
		close(s->file.descriptor);
		s->file.descriptor = -1;
	}

	// Keep file name for possible trailing error report.
	if (!keep_filename) {
		free(s->file.name);
		s->file.name = NULL;
	}

	// Unset the input limits.
	s->input.start   = NULL;
	s->input.current = NULL;
	s->input.end     = NULL;
	s->input.eof     = false;
}

_public_
void zs_deinit(
	zs_scanner_t *s)
{
	if (s == NULL) {
		return;
	}

	input_deinit(s, false);
	free(s->path);
}

static int set_input_string(
	zs_scanner_t *s,
	const char *input,
	size_t size,
	bool final_block)
{
	if (s == NULL) {
		return -1;
	}

	if (input == NULL) {
		ERR(ZS_EINVAL);
		return -1;
	}

	// Deinit possibly opened file.
	input_deinit(s, final_block);

	// Set the scanner input limits.
	s->input.start   = input;
	s->input.current = input;
	s->input.end     = input + size;
	s->input.eof     = final_block;

	return 0;
}

static char *read_file_to_buf(
	int fd,
	size_t *bufsize)
{
	size_t bufs = 0, newbufs = 8192;
	char *buf = malloc(bufs + newbufs);
	int ret = 0;

	while (buf != NULL && (ret = read(fd, buf + bufs, newbufs)) > 0) {
		bufs += ret;
		if (ret < newbufs) {
			newbufs -= ret;
			continue;
		}
		newbufs = bufs;
		char *newbuf = realloc(buf, bufs + newbufs);
		if (newbuf == NULL) {
			free(buf);
		}
		buf = newbuf;
	}
	if (ret < 0) {
		free(buf);
		return NULL;
	}

	*bufsize = bufs + ret;
	return buf;
}

_public_
int zs_set_input_string(
	zs_scanner_t *s,
	const char *input,
	size_t size)
{
	s->state = ZS_STATE_NONE;

	return set_input_string(s, input, size, false);
}

_public_
int zs_set_input_file(
	zs_scanner_t *s,
	const char *file_name)
{
	if (s == NULL) {
		return -1;
	}

	if (file_name == NULL) {
		ERR(ZS_EINVAL);
		return -1;
	}

	// Deinit possibly opened file.
	input_deinit(s, false);

	// Try to open the file.
	s->file.descriptor = open(file_name, O_RDONLY);
	if (s->file.descriptor == -1) {
		ERR(errno == EACCES ? ZS_FILE_ACCESS : ZS_FILE_OPEN);
		return -1;
	}

	char *start = NULL;
	size_t size = 0;

	// Check the input.
	struct stat file_stat;
	if (fstat(s->file.descriptor, &file_stat) == -1) {
		ERR(ZS_FILE_INVALID);
		input_deinit(s, false);
		return -1;
	} else if (S_ISCHR(file_stat.st_mode) ||
	           S_ISBLK(file_stat.st_mode) ||
	           S_ISFIFO(file_stat.st_mode)) {
		// Workaround if cannot mmap, read to memory.
		start = read_file_to_buf(s->file.descriptor, &size);
		if (start == NULL) {
			ERR(ZS_FILE_INVALID);
			input_deinit(s, false);
			return -1;
		}
	} else if (!S_ISREG(file_stat.st_mode)) { // Require regular file.
		ERR(ZS_FILE_INVALID);
		input_deinit(s, false);
		return -1;
	} else if (file_stat.st_size > 0) { // Mmap non-empty file.
		start = mmap(0, file_stat.st_size, PROT_READ, MAP_SHARED,
		             s->file.descriptor, 0);
		if (start == MAP_FAILED) {
			ERR(ZS_FILE_INVALID);
			input_deinit(s, false);
			return -1;
		}

		size = file_stat.st_size;
		s->input.mmaped = true;

		// Try to set the mapped memory advise to sequential.
#if defined(MADV_SEQUENTIAL) && !defined(__sun)
		(void)madvise(start, size, MADV_SEQUENTIAL);
#else
#ifdef POSIX_MADV_SEQUENTIAL
		(void)posix_madvise(start, size, POSIX_MADV_SEQUENTIAL);
#endif /* POSIX_MADV_SEQUENTIAL */
#endif /* MADV_SEQUENTIAL && !__sun */
	}

	// Set the scanner input limits.
	s->input.start   = start;
	s->input.current = start;
	s->input.end     = (start != NULL) ? start + size : start;

	// Get absolute path of the zone file if possible.
	char *full_name = realpath(file_name, NULL);
	if (full_name != NULL) {
		free(s->path);
		s->path = strdup(dirname(full_name));
		free(full_name);
		if (s->path == NULL) {
			ERR(ZS_ENOMEM);
			input_deinit(s, false);
			return -1;
		}
	}

	s->file.name = strdup(file_name);
	if (s->file.name == NULL) {
		ERR(ZS_ENOMEM);
		input_deinit(s, false);
		return -1;
	}

	s->state = ZS_STATE_NONE;

	return 0;
}

_public_
int zs_set_processing(
	zs_scanner_t *s,
	void (*process_record)(zs_scanner_t *),
	void (*process_error)(zs_scanner_t *),
	void *data)
{
	if (s == NULL) {
		return -1;
	}

	s->process.record = process_record;
	s->process.error = process_error;
	s->process.data = data;

	return 0;
}

_public_
int zs_set_processing_comment(
	zs_scanner_t *s,
	void (*process_comment)(zs_scanner_t *))
{
	if (s == NULL) {
		return -1;
	}

	s->process.comment = process_comment;

	return 0;
}

typedef enum {
	WRAP_NONE,     // Initial state.
	WRAP_DETECTED, // Input block end is a first '\' in rdata.
	WRAP_PROCESS   // Parsing of auxiliary block = "\".
} wrap_t;

static void parse(
	zs_scanner_t *s,
	wrap_t *wrap)
{
	// Restore scanner input limits (Ragel internals).
	const char *p = s->input.current;
	const char *pe = s->input.end;
	const char *eof = s->input.eof ? pe : NULL;

	// Restore state variables (Ragel internals).
	int cs  = s->cs;
	int top = s->top;
	int stack[ZS_RAGEL_STACK_SIZE];
	memcpy(stack, s->stack, sizeof(stack));

	// Next 2 variables are for better performance.
	// Restoring r_data pointer to next free space.
	uint8_t *rdata_tail = s->r_data + s->r_data_tail;
	// Initialization of the last r_data byte.
	uint8_t *rdata_stop = s->r_data + ZS_MAX_RDATA_LENGTH - 1;

	// Write scanner body (in C).

	{
	short _widec;
	if ( p == pe )
		goto _test_eof;
	goto _resume;

_again:
	switch ( cs ) {
		case 1641: goto st1641;
		case 0: goto st0;
		case 1: goto st1;
		case 2: goto st2;
		case 3: goto st3;
		case 4: goto st4;
		case 5: goto st5;
		case 6: goto st6;
		case 7: goto st7;
		case 8: goto st8;
		case 9: goto st9;
		case 10: goto st10;
		case 11: goto st11;
		case 12: goto st12;
		case 13: goto st13;
		case 1642: goto st1642;
		case 14: goto st14;
		case 15: goto st15;
		case 16: goto st16;
		case 17: goto st17;
		case 18: goto st18;
		case 19: goto st19;
		case 20: goto st20;
		case 21: goto st21;
		case 22: goto st22;
		case 23: goto st23;
		case 24: goto st24;
		case 25: goto st25;
		case 26: goto st26;
		case 27: goto st27;
		case 28: goto st28;
		case 29: goto st29;
		case 30: goto st30;
		case 31: goto st31;
		case 32: goto st32;
		case 33: goto st33;
		case 34: goto st34;
		case 35: goto st35;
		case 36: goto st36;
		case 37: goto st37;
		case 38: goto st38;
		case 39: goto st39;
		case 40: goto st40;
		case 41: goto st41;
		case 42: goto st42;
		case 43: goto st43;
		case 44: goto st44;
		case 45: goto st45;
		case 46: goto st46;
		case 47: goto st47;
		case 48: goto st48;
		case 49: goto st49;
		case 50: goto st50;
		case 51: goto st51;
		case 52: goto st52;
		case 53: goto st53;
		case 54: goto st54;
		case 55: goto st55;
		case 56: goto st56;
		case 57: goto st57;
		case 58: goto st58;
		case 59: goto st59;
		case 60: goto st60;
		case 61: goto st61;
		case 62: goto st62;
		case 63: goto st63;
		case 64: goto st64;
		case 65: goto st65;
		case 66: goto st66;
		case 67: goto st67;
		case 68: goto st68;
		case 69: goto st69;
		case 70: goto st70;
		case 71: goto st71;
		case 72: goto st72;
		case 73: goto st73;
		case 74: goto st74;
		case 75: goto st75;
		case 76: goto st76;
		case 77: goto st77;
		case 78: goto st78;
		case 79: goto st79;
		case 80: goto st80;
		case 81: goto st81;
		case 82: goto st82;
		case 83: goto st83;
		case 84: goto st84;
		case 85: goto st85;
		case 86: goto st86;
		case 87: goto st87;
		case 88: goto st88;
		case 89: goto st89;
		case 90: goto st90;
		case 91: goto st91;
		case 92: goto st92;
		case 93: goto st93;
		case 94: goto st94;
		case 95: goto st95;
		case 96: goto st96;
		case 97: goto st97;
		case 98: goto st98;
		case 99: goto st99;
		case 100: goto st100;
		case 101: goto st101;
		case 102: goto st102;
		case 103: goto st103;
		case 104: goto st104;
		case 105: goto st105;
		case 106: goto st106;
		case 107: goto st107;
		case 108: goto st108;
		case 109: goto st109;
		case 110: goto st110;
		case 111: goto st111;
		case 112: goto st112;
		case 113: goto st113;
		case 114: goto st114;
		case 115: goto st115;
		case 116: goto st116;
		case 117: goto st117;
		case 118: goto st118;
		case 119: goto st119;
		case 120: goto st120;
		case 121: goto st121;
		case 122: goto st122;
		case 123: goto st123;
		case 124: goto st124;
		case 125: goto st125;
		case 126: goto st126;
		case 127: goto st127;
		case 128: goto st128;
		case 129: goto st129;
		case 130: goto st130;
		case 131: goto st131;
		case 132: goto st132;
		case 133: goto st133;
		case 134: goto st134;
		case 135: goto st135;
		case 136: goto st136;
		case 137: goto st137;
		case 138: goto st138;
		case 139: goto st139;
		case 140: goto st140;
		case 141: goto st141;
		case 142: goto st142;
		case 143: goto st143;
		case 144: goto st144;
		case 145: goto st145;
		case 146: goto st146;
		case 147: goto st147;
		case 148: goto st148;
		case 149: goto st149;
		case 150: goto st150;
		case 151: goto st151;
		case 152: goto st152;
		case 153: goto st153;
		case 154: goto st154;
		case 155: goto st155;
		case 156: goto st156;
		case 157: goto st157;
		case 158: goto st158;
		case 159: goto st159;
		case 160: goto st160;
		case 161: goto st161;
		case 162: goto st162;
		case 163: goto st163;
		case 164: goto st164;
		case 165: goto st165;
		case 166: goto st166;
		case 167: goto st167;
		case 168: goto st168;
		case 169: goto st169;
		case 170: goto st170;
		case 171: goto st171;
		case 172: goto st172;
		case 173: goto st173;
		case 174: goto st174;
		case 175: goto st175;
		case 176: goto st176;
		case 177: goto st177;
		case 178: goto st178;
		case 179: goto st179;
		case 180: goto st180;
		case 181: goto st181;
		case 182: goto st182;
		case 1643: goto st1643;
		case 183: goto st183;
		case 184: goto st184;
		case 185: goto st185;
		case 186: goto st186;
		case 187: goto st187;
		case 188: goto st188;
		case 189: goto st189;
		case 190: goto st190;
		case 191: goto st191;
		case 192: goto st192;
		case 1644: goto st1644;
		case 193: goto st193;
		case 194: goto st194;
		case 195: goto st195;
		case 196: goto st196;
		case 197: goto st197;
		case 198: goto st198;
		case 199: goto st199;
		case 200: goto st200;
		case 1645: goto st1645;
		case 201: goto st201;
		case 202: goto st202;
		case 203: goto st203;
		case 1646: goto st1646;
		case 204: goto st204;
		case 205: goto st205;
		case 206: goto st206;
		case 207: goto st207;
		case 208: goto st208;
		case 209: goto st209;
		case 210: goto st210;
		case 211: goto st211;
		case 212: goto st212;
		case 213: goto st213;
		case 214: goto st214;
		case 1647: goto st1647;
		case 215: goto st215;
		case 216: goto st216;
		case 217: goto st217;
		case 218: goto st218;
		case 1648: goto st1648;
		case 219: goto st219;
		case 220: goto st220;
		case 221: goto st221;
		case 222: goto st222;
		case 223: goto st223;
		case 224: goto st224;
		case 225: goto st225;
		case 226: goto st226;
		case 227: goto st227;
		case 228: goto st228;
		case 229: goto st229;
		case 230: goto st230;
		case 231: goto st231;
		case 232: goto st232;
		case 233: goto st233;
		case 234: goto st234;
		case 235: goto st235;
		case 236: goto st236;
		case 237: goto st237;
		case 1649: goto st1649;
		case 238: goto st238;
		case 239: goto st239;
		case 240: goto st240;
		case 241: goto st241;
		case 242: goto st242;
		case 243: goto st243;
		case 244: goto st244;
		case 245: goto st245;
		case 246: goto st246;
		case 247: goto st247;
		case 248: goto st248;
		case 249: goto st249;
		case 250: goto st250;
		case 251: goto st251;
		case 252: goto st252;
		case 253: goto st253;
		case 1650: goto st1650;
		case 254: goto st254;
		case 255: goto st255;
		case 256: goto st256;
		case 257: goto st257;
		case 258: goto st258;
		case 259: goto st259;
		case 260: goto st260;
		case 261: goto st261;
		case 262: goto st262;
		case 263: goto st263;
		case 264: goto st264;
		case 265: goto st265;
		case 266: goto st266;
		case 267: goto st267;
		case 268: goto st268;
		case 269: goto st269;
		case 270: goto st270;
		case 271: goto st271;
		case 272: goto st272;
		case 273: goto st273;
		case 274: goto st274;
		case 275: goto st275;
		case 276: goto st276;
		case 277: goto st277;
		case 278: goto st278;
		case 279: goto st279;
		case 280: goto st280;
		case 281: goto st281;
		case 282: goto st282;
		case 283: goto st283;
		case 284: goto st284;
		case 285: goto st285;
		case 286: goto st286;
		case 287: goto st287;
		case 288: goto st288;
		case 289: goto st289;
		case 290: goto st290;
		case 291: goto st291;
		case 292: goto st292;
		case 293: goto st293;
		case 294: goto st294;
		case 295: goto st295;
		case 296: goto st296;
		case 297: goto st297;
		case 298: goto st298;
		case 299: goto st299;
		case 300: goto st300;
		case 301: goto st301;
		case 302: goto st302;
		case 303: goto st303;
		case 304: goto st304;
		case 305: goto st305;
		case 306: goto st306;
		case 307: goto st307;
		case 308: goto st308;
		case 309: goto st309;
		case 310: goto st310;
		case 311: goto st311;
		case 312: goto st312;
		case 313: goto st313;
		case 314: goto st314;
		case 315: goto st315;
		case 316: goto st316;
		case 317: goto st317;
		case 318: goto st318;
		case 1651: goto st1651;
		case 319: goto st319;
		case 320: goto st320;
		case 1652: goto st1652;
		case 321: goto st321;
		case 322: goto st322;
		case 1653: goto st1653;
		case 323: goto st323;
		case 324: goto st324;
		case 325: goto st325;
		case 326: goto st326;
		case 327: goto st327;
		case 328: goto st328;
		case 329: goto st329;
		case 330: goto st330;
		case 331: goto st331;
		case 1654: goto st1654;
		case 1655: goto st1655;
		case 332: goto st332;
		case 333: goto st333;
		case 334: goto st334;
		case 335: goto st335;
		case 336: goto st336;
		case 337: goto st337;
		case 338: goto st338;
		case 339: goto st339;
		case 340: goto st340;
		case 341: goto st341;
		case 342: goto st342;
		case 343: goto st343;
		case 344: goto st344;
		case 345: goto st345;
		case 346: goto st346;
		case 1656: goto st1656;
		case 347: goto st347;
		case 348: goto st348;
		case 349: goto st349;
		case 350: goto st350;
		case 351: goto st351;
		case 352: goto st352;
		case 353: goto st353;
		case 354: goto st354;
		case 355: goto st355;
		case 356: goto st356;
		case 1657: goto st1657;
		case 357: goto st357;
		case 358: goto st358;
		case 359: goto st359;
		case 360: goto st360;
		case 361: goto st361;
		case 362: goto st362;
		case 363: goto st363;
		case 364: goto st364;
		case 365: goto st365;
		case 366: goto st366;
		case 367: goto st367;
		case 368: goto st368;
		case 369: goto st369;
		case 370: goto st370;
		case 1658: goto st1658;
		case 371: goto st371;
		case 372: goto st372;
		case 373: goto st373;
		case 374: goto st374;
		case 375: goto st375;
		case 376: goto st376;
		case 377: goto st377;
		case 1659: goto st1659;
		case 378: goto st378;
		case 379: goto st379;
		case 380: goto st380;
		case 381: goto st381;
		case 382: goto st382;
		case 383: goto st383;
		case 384: goto st384;
		case 385: goto st385;
		case 386: goto st386;
		case 1660: goto st1660;
		case 1661: goto st1661;
		case 1662: goto st1662;
		case 387: goto st387;
		case 388: goto st388;
		case 389: goto st389;
		case 390: goto st390;
		case 391: goto st391;
		case 392: goto st392;
		case 393: goto st393;
		case 394: goto st394;
		case 1663: goto st1663;
		case 1664: goto st1664;
		case 395: goto st395;
		case 396: goto st396;
		case 397: goto st397;
		case 1665: goto st1665;
		case 398: goto st398;
		case 399: goto st399;
		case 400: goto st400;
		case 401: goto st401;
		case 402: goto st402;
		case 403: goto st403;
		case 404: goto st404;
		case 405: goto st405;
		case 406: goto st406;
		case 407: goto st407;
		case 408: goto st408;
		case 409: goto st409;
		case 410: goto st410;
		case 411: goto st411;
		case 412: goto st412;
		case 413: goto st413;
		case 414: goto st414;
		case 415: goto st415;
		case 416: goto st416;
		case 417: goto st417;
		case 418: goto st418;
		case 419: goto st419;
		case 420: goto st420;
		case 421: goto st421;
		case 422: goto st422;
		case 423: goto st423;
		case 424: goto st424;
		case 425: goto st425;
		case 426: goto st426;
		case 427: goto st427;
		case 428: goto st428;
		case 429: goto st429;
		case 430: goto st430;
		case 431: goto st431;
		case 432: goto st432;
		case 433: goto st433;
		case 434: goto st434;
		case 435: goto st435;
		case 436: goto st436;
		case 437: goto st437;
		case 438: goto st438;
		case 439: goto st439;
		case 440: goto st440;
		case 441: goto st441;
		case 442: goto st442;
		case 443: goto st443;
		case 444: goto st444;
		case 445: goto st445;
		case 446: goto st446;
		case 447: goto st447;
		case 448: goto st448;
		case 449: goto st449;
		case 450: goto st450;
		case 451: goto st451;
		case 452: goto st452;
		case 453: goto st453;
		case 454: goto st454;
		case 455: goto st455;
		case 456: goto st456;
		case 457: goto st457;
		case 458: goto st458;
		case 459: goto st459;
		case 460: goto st460;
		case 461: goto st461;
		case 462: goto st462;
		case 463: goto st463;
		case 464: goto st464;
		case 465: goto st465;
		case 466: goto st466;
		case 467: goto st467;
		case 468: goto st468;
		case 469: goto st469;
		case 470: goto st470;
		case 471: goto st471;
		case 472: goto st472;
		case 473: goto st473;
		case 474: goto st474;
		case 475: goto st475;
		case 476: goto st476;
		case 477: goto st477;
		case 478: goto st478;
		case 479: goto st479;
		case 480: goto st480;
		case 481: goto st481;
		case 482: goto st482;
		case 483: goto st483;
		case 484: goto st484;
		case 485: goto st485;
		case 486: goto st486;
		case 487: goto st487;
		case 488: goto st488;
		case 489: goto st489;
		case 490: goto st490;
		case 491: goto st491;
		case 492: goto st492;
		case 493: goto st493;
		case 494: goto st494;
		case 495: goto st495;
		case 496: goto st496;
		case 497: goto st497;
		case 498: goto st498;
		case 499: goto st499;
		case 500: goto st500;
		case 501: goto st501;
		case 502: goto st502;
		case 503: goto st503;
		case 504: goto st504;
		case 505: goto st505;
		case 506: goto st506;
		case 507: goto st507;
		case 508: goto st508;
		case 509: goto st509;
		case 510: goto st510;
		case 511: goto st511;
		case 512: goto st512;
		case 513: goto st513;
		case 514: goto st514;
		case 515: goto st515;
		case 516: goto st516;
		case 517: goto st517;
		case 518: goto st518;
		case 519: goto st519;
		case 520: goto st520;
		case 521: goto st521;
		case 522: goto st522;
		case 523: goto st523;
		case 524: goto st524;
		case 525: goto st525;
		case 526: goto st526;
		case 527: goto st527;
		case 528: goto st528;
		case 529: goto st529;
		case 530: goto st530;
		case 531: goto st531;
		case 532: goto st532;
		case 533: goto st533;
		case 534: goto st534;
		case 535: goto st535;
		case 536: goto st536;
		case 537: goto st537;
		case 538: goto st538;
		case 539: goto st539;
		case 540: goto st540;
		case 541: goto st541;
		case 542: goto st542;
		case 543: goto st543;
		case 544: goto st544;
		case 545: goto st545;
		case 546: goto st546;
		case 547: goto st547;
		case 548: goto st548;
		case 549: goto st549;
		case 550: goto st550;
		case 551: goto st551;
		case 552: goto st552;
		case 553: goto st553;
		case 554: goto st554;
		case 555: goto st555;
		case 556: goto st556;
		case 557: goto st557;
		case 558: goto st558;
		case 559: goto st559;
		case 560: goto st560;
		case 561: goto st561;
		case 562: goto st562;
		case 563: goto st563;
		case 564: goto st564;
		case 565: goto st565;
		case 566: goto st566;
		case 567: goto st567;
		case 1666: goto st1666;
		case 1667: goto st1667;
		case 1668: goto st1668;
		case 568: goto st568;
		case 569: goto st569;
		case 570: goto st570;
		case 571: goto st571;
		case 572: goto st572;
		case 1669: goto st1669;
		case 573: goto st573;
		case 574: goto st574;
		case 575: goto st575;
		case 576: goto st576;
		case 1670: goto st1670;
		case 1671: goto st1671;
		case 1672: goto st1672;
		case 577: goto st577;
		case 578: goto st578;
		case 1673: goto st1673;
		case 579: goto st579;
		case 580: goto st580;
		case 581: goto st581;
		case 582: goto st582;
		case 583: goto st583;
		case 584: goto st584;
		case 1674: goto st1674;
		case 585: goto st585;
		case 586: goto st586;
		case 587: goto st587;
		case 588: goto st588;
		case 589: goto st589;
		case 590: goto st590;
		case 591: goto st591;
		case 592: goto st592;
		case 593: goto st593;
		case 594: goto st594;
		case 595: goto st595;
		case 596: goto st596;
		case 597: goto st597;
		case 598: goto st598;
		case 599: goto st599;
		case 600: goto st600;
		case 601: goto st601;
		case 602: goto st602;
		case 603: goto st603;
		case 604: goto st604;
		case 605: goto st605;
		case 606: goto st606;
		case 607: goto st607;
		case 608: goto st608;
		case 609: goto st609;
		case 610: goto st610;
		case 611: goto st611;
		case 612: goto st612;
		case 613: goto st613;
		case 614: goto st614;
		case 615: goto st615;
		case 616: goto st616;
		case 617: goto st617;
		case 618: goto st618;
		case 619: goto st619;
		case 620: goto st620;
		case 621: goto st621;
		case 622: goto st622;
		case 623: goto st623;
		case 624: goto st624;
		case 625: goto st625;
		case 626: goto st626;
		case 627: goto st627;
		case 628: goto st628;
		case 629: goto st629;
		case 630: goto st630;
		case 631: goto st631;
		case 632: goto st632;
		case 633: goto st633;
		case 634: goto st634;
		case 635: goto st635;
		case 636: goto st636;
		case 637: goto st637;
		case 638: goto st638;
		case 639: goto st639;
		case 640: goto st640;
		case 641: goto st641;
		case 642: goto st642;
		case 643: goto st643;
		case 644: goto st644;
		case 1675: goto st1675;
		case 1676: goto st1676;
		case 645: goto st645;
		case 646: goto st646;
		case 647: goto st647;
		case 648: goto st648;
		case 649: goto st649;
		case 650: goto st650;
		case 651: goto st651;
		case 652: goto st652;
		case 653: goto st653;
		case 1677: goto st1677;
		case 654: goto st654;
		case 655: goto st655;
		case 656: goto st656;
		case 657: goto st657;
		case 658: goto st658;
		case 659: goto st659;
		case 660: goto st660;
		case 661: goto st661;
		case 662: goto st662;
		case 663: goto st663;
		case 664: goto st664;
		case 665: goto st665;
		case 666: goto st666;
		case 667: goto st667;
		case 668: goto st668;
		case 669: goto st669;
		case 670: goto st670;
		case 671: goto st671;
		case 672: goto st672;
		case 673: goto st673;
		case 674: goto st674;
		case 675: goto st675;
		case 676: goto st676;
		case 677: goto st677;
		case 678: goto st678;
		case 679: goto st679;
		case 680: goto st680;
		case 681: goto st681;
		case 682: goto st682;
		case 683: goto st683;
		case 684: goto st684;
		case 685: goto st685;
		case 686: goto st686;
		case 687: goto st687;
		case 688: goto st688;
		case 689: goto st689;
		case 690: goto st690;
		case 691: goto st691;
		case 692: goto st692;
		case 693: goto st693;
		case 694: goto st694;
		case 695: goto st695;
		case 696: goto st696;
		case 697: goto st697;
		case 698: goto st698;
		case 699: goto st699;
		case 700: goto st700;
		case 701: goto st701;
		case 702: goto st702;
		case 703: goto st703;
		case 704: goto st704;
		case 705: goto st705;
		case 706: goto st706;
		case 707: goto st707;
		case 708: goto st708;
		case 709: goto st709;
		case 710: goto st710;
		case 711: goto st711;
		case 712: goto st712;
		case 713: goto st713;
		case 714: goto st714;
		case 715: goto st715;
		case 716: goto st716;
		case 717: goto st717;
		case 718: goto st718;
		case 719: goto st719;
		case 720: goto st720;
		case 721: goto st721;
		case 722: goto st722;
		case 723: goto st723;
		case 724: goto st724;
		case 725: goto st725;
		case 726: goto st726;
		case 727: goto st727;
		case 728: goto st728;
		case 729: goto st729;
		case 730: goto st730;
		case 731: goto st731;
		case 732: goto st732;
		case 733: goto st733;
		case 734: goto st734;
		case 735: goto st735;
		case 736: goto st736;
		case 737: goto st737;
		case 738: goto st738;
		case 739: goto st739;
		case 740: goto st740;
		case 741: goto st741;
		case 742: goto st742;
		case 743: goto st743;
		case 744: goto st744;
		case 745: goto st745;
		case 746: goto st746;
		case 747: goto st747;
		case 748: goto st748;
		case 1678: goto st1678;
		case 749: goto st749;
		case 750: goto st750;
		case 751: goto st751;
		case 752: goto st752;
		case 753: goto st753;
		case 754: goto st754;
		case 755: goto st755;
		case 756: goto st756;
		case 757: goto st757;
		case 758: goto st758;
		case 759: goto st759;
		case 760: goto st760;
		case 761: goto st761;
		case 762: goto st762;
		case 763: goto st763;
		case 764: goto st764;
		case 765: goto st765;
		case 766: goto st766;
		case 767: goto st767;
		case 768: goto st768;
		case 769: goto st769;
		case 770: goto st770;
		case 771: goto st771;
		case 772: goto st772;
		case 773: goto st773;
		case 774: goto st774;
		case 775: goto st775;
		case 776: goto st776;
		case 777: goto st777;
		case 778: goto st778;
		case 779: goto st779;
		case 780: goto st780;
		case 781: goto st781;
		case 782: goto st782;
		case 783: goto st783;
		case 784: goto st784;
		case 785: goto st785;
		case 786: goto st786;
		case 787: goto st787;
		case 788: goto st788;
		case 789: goto st789;
		case 790: goto st790;
		case 791: goto st791;
		case 792: goto st792;
		case 793: goto st793;
		case 794: goto st794;
		case 795: goto st795;
		case 796: goto st796;
		case 797: goto st797;
		case 798: goto st798;
		case 799: goto st799;
		case 800: goto st800;
		case 801: goto st801;
		case 802: goto st802;
		case 803: goto st803;
		case 804: goto st804;
		case 805: goto st805;
		case 806: goto st806;
		case 807: goto st807;
		case 808: goto st808;
		case 809: goto st809;
		case 810: goto st810;
		case 811: goto st811;
		case 812: goto st812;
		case 813: goto st813;
		case 814: goto st814;
		case 815: goto st815;
		case 816: goto st816;
		case 817: goto st817;
		case 818: goto st818;
		case 819: goto st819;
		case 820: goto st820;
		case 821: goto st821;
		case 822: goto st822;
		case 823: goto st823;
		case 824: goto st824;
		case 825: goto st825;
		case 826: goto st826;
		case 827: goto st827;
		case 828: goto st828;
		case 829: goto st829;
		case 830: goto st830;
		case 831: goto st831;
		case 832: goto st832;
		case 833: goto st833;
		case 834: goto st834;
		case 835: goto st835;
		case 836: goto st836;
		case 837: goto st837;
		case 838: goto st838;
		case 839: goto st839;
		case 840: goto st840;
		case 841: goto st841;
		case 842: goto st842;
		case 843: goto st843;
		case 844: goto st844;
		case 845: goto st845;
		case 846: goto st846;
		case 847: goto st847;
		case 848: goto st848;
		case 849: goto st849;
		case 850: goto st850;
		case 851: goto st851;
		case 852: goto st852;
		case 1679: goto st1679;
		case 853: goto st853;
		case 854: goto st854;
		case 855: goto st855;
		case 856: goto st856;
		case 857: goto st857;
		case 858: goto st858;
		case 859: goto st859;
		case 860: goto st860;
		case 861: goto st861;
		case 862: goto st862;
		case 863: goto st863;
		case 864: goto st864;
		case 865: goto st865;
		case 866: goto st866;
		case 867: goto st867;
		case 868: goto st868;
		case 869: goto st869;
		case 870: goto st870;
		case 871: goto st871;
		case 872: goto st872;
		case 873: goto st873;
		case 874: goto st874;
		case 875: goto st875;
		case 876: goto st876;
		case 877: goto st877;
		case 878: goto st878;
		case 879: goto st879;
		case 880: goto st880;
		case 881: goto st881;
		case 882: goto st882;
		case 883: goto st883;
		case 884: goto st884;
		case 885: goto st885;
		case 886: goto st886;
		case 887: goto st887;
		case 888: goto st888;
		case 889: goto st889;
		case 890: goto st890;
		case 891: goto st891;
		case 892: goto st892;
		case 893: goto st893;
		case 1680: goto st1680;
		case 894: goto st894;
		case 895: goto st895;
		case 896: goto st896;
		case 897: goto st897;
		case 898: goto st898;
		case 899: goto st899;
		case 900: goto st900;
		case 901: goto st901;
		case 1681: goto st1681;
		case 902: goto st902;
		case 903: goto st903;
		case 1682: goto st1682;
		case 904: goto st904;
		case 905: goto st905;
		case 906: goto st906;
		case 907: goto st907;
		case 908: goto st908;
		case 909: goto st909;
		case 910: goto st910;
		case 911: goto st911;
		case 912: goto st912;
		case 913: goto st913;
		case 914: goto st914;
		case 915: goto st915;
		case 916: goto st916;
		case 917: goto st917;
		case 1683: goto st1683;
		case 918: goto st918;
		case 919: goto st919;
		case 920: goto st920;
		case 921: goto st921;
		case 922: goto st922;
		case 923: goto st923;
		case 924: goto st924;
		case 925: goto st925;
		case 926: goto st926;
		case 927: goto st927;
		case 928: goto st928;
		case 929: goto st929;
		case 930: goto st930;
		case 931: goto st931;
		case 932: goto st932;
		case 933: goto st933;
		case 934: goto st934;
		case 935: goto st935;
		case 936: goto st936;
		case 937: goto st937;
		case 938: goto st938;
		case 939: goto st939;
		case 1684: goto st1684;
		case 940: goto st940;
		case 941: goto st941;
		case 942: goto st942;
		case 943: goto st943;
		case 944: goto st944;
		case 1685: goto st1685;
		case 945: goto st945;
		case 946: goto st946;
		case 947: goto st947;
		case 948: goto st948;
		case 949: goto st949;
		case 1686: goto st1686;
		case 950: goto st950;
		case 951: goto st951;
		case 952: goto st952;
		case 953: goto st953;
		case 954: goto st954;
		case 1687: goto st1687;
		case 1688: goto st1688;
		case 1689: goto st1689;
		case 955: goto st955;
		case 956: goto st956;
		case 1690: goto st1690;
		case 957: goto st957;
		case 958: goto st958;
		case 959: goto st959;
		case 960: goto st960;
		case 961: goto st961;
		case 962: goto st962;
		case 963: goto st963;
		case 964: goto st964;
		case 965: goto st965;
		case 966: goto st966;
		case 967: goto st967;
		case 968: goto st968;
		case 969: goto st969;
		case 970: goto st970;
		case 971: goto st971;
		case 972: goto st972;
		case 973: goto st973;
		case 974: goto st974;
		case 975: goto st975;
		case 976: goto st976;
		case 977: goto st977;
		case 978: goto st978;
		case 979: goto st979;
		case 980: goto st980;
		case 981: goto st981;
		case 982: goto st982;
		case 983: goto st983;
		case 1691: goto st1691;
		case 1692: goto st1692;
		case 1693: goto st1693;
		case 984: goto st984;
		case 985: goto st985;
		case 986: goto st986;
		case 1694: goto st1694;
		case 1695: goto st1695;
		case 987: goto st987;
		case 988: goto st988;
		case 989: goto st989;
		case 990: goto st990;
		case 1696: goto st1696;
		case 1697: goto st1697;
		case 991: goto st991;
		case 992: goto st992;
		case 993: goto st993;
		case 994: goto st994;
		case 1698: goto st1698;
		case 1699: goto st1699;
		case 995: goto st995;
		case 996: goto st996;
		case 997: goto st997;
		case 998: goto st998;
		case 999: goto st999;
		case 1000: goto st1000;
		case 1001: goto st1001;
		case 1002: goto st1002;
		case 1003: goto st1003;
		case 1004: goto st1004;
		case 1005: goto st1005;
		case 1006: goto st1006;
		case 1007: goto st1007;
		case 1008: goto st1008;
		case 1009: goto st1009;
		case 1010: goto st1010;
		case 1011: goto st1011;
		case 1012: goto st1012;
		case 1013: goto st1013;
		case 1014: goto st1014;
		case 1015: goto st1015;
		case 1016: goto st1016;
		case 1017: goto st1017;
		case 1018: goto st1018;
		case 1019: goto st1019;
		case 1700: goto st1700;
		case 1020: goto st1020;
		case 1021: goto st1021;
		case 1022: goto st1022;
		case 1023: goto st1023;
		case 1024: goto st1024;
		case 1025: goto st1025;
		case 1026: goto st1026;
		case 1027: goto st1027;
		case 1028: goto st1028;
		case 1029: goto st1029;
		case 1030: goto st1030;
		case 1031: goto st1031;
		case 1032: goto st1032;
		case 1033: goto st1033;
		case 1034: goto st1034;
		case 1701: goto st1701;
		case 1035: goto st1035;
		case 1036: goto st1036;
		case 1037: goto st1037;
		case 1038: goto st1038;
		case 1039: goto st1039;
		case 1040: goto st1040;
		case 1041: goto st1041;
		case 1042: goto st1042;
		case 1043: goto st1043;
		case 1044: goto st1044;
		case 1045: goto st1045;
		case 1046: goto st1046;
		case 1047: goto st1047;
		case 1702: goto st1702;
		case 1048: goto st1048;
		case 1049: goto st1049;
		case 1050: goto st1050;
		case 1051: goto st1051;
		case 1052: goto st1052;
		case 1053: goto st1053;
		case 1054: goto st1054;
		case 1055: goto st1055;
		case 1056: goto st1056;
		case 1057: goto st1057;
		case 1058: goto st1058;
		case 1703: goto st1703;
		case 1704: goto st1704;
		case 1059: goto st1059;
		case 1060: goto st1060;
		case 1061: goto st1061;
		case 1705: goto st1705;
		case 1062: goto st1062;
		case 1063: goto st1063;
		case 1064: goto st1064;
		case 1065: goto st1065;
		case 1066: goto st1066;
		case 1067: goto st1067;
		case 1068: goto st1068;
		case 1069: goto st1069;
		case 1070: goto st1070;
		case 1071: goto st1071;
		case 1706: goto st1706;
		case 1707: goto st1707;
		case 1708: goto st1708;
		case 1072: goto st1072;
		case 1073: goto st1073;
		case 1074: goto st1074;
		case 1075: goto st1075;
		case 1076: goto st1076;
		case 1077: goto st1077;
		case 1078: goto st1078;
		case 1079: goto st1079;
		case 1080: goto st1080;
		case 1081: goto st1081;
		case 1082: goto st1082;
		case 1709: goto st1709;
		case 1710: goto st1710;
		case 1711: goto st1711;
		case 1083: goto st1083;
		case 1084: goto st1084;
		case 1085: goto st1085;
		case 1086: goto st1086;
		case 1087: goto st1087;
		case 1088: goto st1088;
		case 1089: goto st1089;
		case 1090: goto st1090;
		case 1091: goto st1091;
		case 1092: goto st1092;
		case 1093: goto st1093;
		case 1094: goto st1094;
		case 1712: goto st1712;
		case 1095: goto st1095;
		case 1096: goto st1096;
		case 1097: goto st1097;
		case 1713: goto st1713;
		case 1714: goto st1714;
		case 1098: goto st1098;
		case 1715: goto st1715;
		case 1716: goto st1716;
		case 1099: goto st1099;
		case 1717: goto st1717;
		case 1718: goto st1718;
		case 1100: goto st1100;
		case 1101: goto st1101;
		case 1102: goto st1102;
		case 1103: goto st1103;
		case 1104: goto st1104;
		case 1105: goto st1105;
		case 1106: goto st1106;
		case 1107: goto st1107;
		case 1108: goto st1108;
		case 1109: goto st1109;
		case 1110: goto st1110;
		case 1111: goto st1111;
		case 1112: goto st1112;
		case 1113: goto st1113;
		case 1114: goto st1114;
		case 1115: goto st1115;
		case 1116: goto st1116;
		case 1117: goto st1117;
		case 1118: goto st1118;
		case 1119: goto st1119;
		case 1120: goto st1120;
		case 1121: goto st1121;
		case 1122: goto st1122;
		case 1123: goto st1123;
		case 1124: goto st1124;
		case 1125: goto st1125;
		case 1126: goto st1126;
		case 1127: goto st1127;
		case 1128: goto st1128;
		case 1129: goto st1129;
		case 1130: goto st1130;
		case 1131: goto st1131;
		case 1132: goto st1132;
		case 1133: goto st1133;
		case 1134: goto st1134;
		case 1135: goto st1135;
		case 1136: goto st1136;
		case 1137: goto st1137;
		case 1138: goto st1138;
		case 1139: goto st1139;
		case 1140: goto st1140;
		case 1141: goto st1141;
		case 1719: goto st1719;
		case 1142: goto st1142;
		case 1143: goto st1143;
		case 1144: goto st1144;
		case 1145: goto st1145;
		case 1146: goto st1146;
		case 1147: goto st1147;
		case 1148: goto st1148;
		case 1149: goto st1149;
		case 1150: goto st1150;
		case 1151: goto st1151;
		case 1152: goto st1152;
		case 1153: goto st1153;
		case 1154: goto st1154;
		case 1155: goto st1155;
		case 1156: goto st1156;
		case 1157: goto st1157;
		case 1158: goto st1158;
		case 1159: goto st1159;
		case 1160: goto st1160;
		case 1161: goto st1161;
		case 1162: goto st1162;
		case 1163: goto st1163;
		case 1164: goto st1164;
		case 1165: goto st1165;
		case 1166: goto st1166;
		case 1167: goto st1167;
		case 1168: goto st1168;
		case 1169: goto st1169;
		case 1170: goto st1170;
		case 1171: goto st1171;
		case 1172: goto st1172;
		case 1173: goto st1173;
		case 1174: goto st1174;
		case 1175: goto st1175;
		case 1176: goto st1176;
		case 1177: goto st1177;
		case 1178: goto st1178;
		case 1179: goto st1179;
		case 1180: goto st1180;
		case 1181: goto st1181;
		case 1182: goto st1182;
		case 1183: goto st1183;
		case 1184: goto st1184;
		case 1185: goto st1185;
		case 1186: goto st1186;
		case 1187: goto st1187;
		case 1188: goto st1188;
		case 1189: goto st1189;
		case 1190: goto st1190;
		case 1191: goto st1191;
		case 1192: goto st1192;
		case 1193: goto st1193;
		case 1194: goto st1194;
		case 1195: goto st1195;
		case 1196: goto st1196;
		case 1197: goto st1197;
		case 1198: goto st1198;
		case 1199: goto st1199;
		case 1200: goto st1200;
		case 1201: goto st1201;
		case 1202: goto st1202;
		case 1203: goto st1203;
		case 1204: goto st1204;
		case 1205: goto st1205;
		case 1206: goto st1206;
		case 1207: goto st1207;
		case 1208: goto st1208;
		case 1209: goto st1209;
		case 1210: goto st1210;
		case 1211: goto st1211;
		case 1212: goto st1212;
		case 1213: goto st1213;
		case 1214: goto st1214;
		case 1215: goto st1215;
		case 1216: goto st1216;
		case 1217: goto st1217;
		case 1218: goto st1218;
		case 1219: goto st1219;
		case 1220: goto st1220;
		case 1221: goto st1221;
		case 1222: goto st1222;
		case 1223: goto st1223;
		case 1224: goto st1224;
		case 1225: goto st1225;
		case 1226: goto st1226;
		case 1227: goto st1227;
		case 1228: goto st1228;
		case 1229: goto st1229;
		case 1230: goto st1230;
		case 1231: goto st1231;
		case 1232: goto st1232;
		case 1233: goto st1233;
		case 1234: goto st1234;
		case 1235: goto st1235;
		case 1236: goto st1236;
		case 1237: goto st1237;
		case 1238: goto st1238;
		case 1239: goto st1239;
		case 1240: goto st1240;
		case 1241: goto st1241;
		case 1242: goto st1242;
		case 1243: goto st1243;
		case 1244: goto st1244;
		case 1245: goto st1245;
		case 1246: goto st1246;
		case 1247: goto st1247;
		case 1248: goto st1248;
		case 1249: goto st1249;
		case 1250: goto st1250;
		case 1251: goto st1251;
		case 1252: goto st1252;
		case 1253: goto st1253;
		case 1254: goto st1254;
		case 1255: goto st1255;
		case 1256: goto st1256;
		case 1257: goto st1257;
		case 1258: goto st1258;
		case 1259: goto st1259;
		case 1260: goto st1260;
		case 1261: goto st1261;
		case 1262: goto st1262;
		case 1263: goto st1263;
		case 1264: goto st1264;
		case 1265: goto st1265;
		case 1266: goto st1266;
		case 1267: goto st1267;
		case 1268: goto st1268;
		case 1269: goto st1269;
		case 1270: goto st1270;
		case 1271: goto st1271;
		case 1272: goto st1272;
		case 1273: goto st1273;
		case 1274: goto st1274;
		case 1275: goto st1275;
		case 1276: goto st1276;
		case 1277: goto st1277;
		case 1278: goto st1278;
		case 1279: goto st1279;
		case 1280: goto st1280;
		case 1281: goto st1281;
		case 1282: goto st1282;
		case 1283: goto st1283;
		case 1284: goto st1284;
		case 1285: goto st1285;
		case 1286: goto st1286;
		case 1287: goto st1287;
		case 1288: goto st1288;
		case 1289: goto st1289;
		case 1290: goto st1290;
		case 1291: goto st1291;
		case 1292: goto st1292;
		case 1293: goto st1293;
		case 1294: goto st1294;
		case 1295: goto st1295;
		case 1296: goto st1296;
		case 1297: goto st1297;
		case 1298: goto st1298;
		case 1299: goto st1299;
		case 1300: goto st1300;
		case 1301: goto st1301;
		case 1302: goto st1302;
		case 1303: goto st1303;
		case 1304: goto st1304;
		case 1305: goto st1305;
		case 1306: goto st1306;
		case 1307: goto st1307;
		case 1308: goto st1308;
		case 1309: goto st1309;
		case 1310: goto st1310;
		case 1311: goto st1311;
		case 1312: goto st1312;
		case 1313: goto st1313;
		case 1314: goto st1314;
		case 1315: goto st1315;
		case 1316: goto st1316;
		case 1317: goto st1317;
		case 1318: goto st1318;
		case 1319: goto st1319;
		case 1320: goto st1320;
		case 1321: goto st1321;
		case 1720: goto st1720;
		case 1322: goto st1322;
		case 1323: goto st1323;
		case 1324: goto st1324;
		case 1325: goto st1325;
		case 1326: goto st1326;
		case 1327: goto st1327;
		case 1328: goto st1328;
		case 1329: goto st1329;
		case 1721: goto st1721;
		case 1330: goto st1330;
		case 1331: goto st1331;
		case 1332: goto st1332;
		case 1333: goto st1333;
		case 1334: goto st1334;
		case 1722: goto st1722;
		case 1335: goto st1335;
		case 1336: goto st1336;
		case 1337: goto st1337;
		case 1338: goto st1338;
		case 1339: goto st1339;
		case 1340: goto st1340;
		case 1341: goto st1341;
		case 1342: goto st1342;
		case 1343: goto st1343;
		case 1344: goto st1344;
		case 1345: goto st1345;
		case 1346: goto st1346;
		case 1347: goto st1347;
		case 1348: goto st1348;
		case 1349: goto st1349;
		case 1350: goto st1350;
		case 1351: goto st1351;
		case 1352: goto st1352;
		case 1723: goto st1723;
		case 1353: goto st1353;
		case 1354: goto st1354;
		case 1355: goto st1355;
		case 1356: goto st1356;
		case 1357: goto st1357;
		case 1358: goto st1358;
		case 1359: goto st1359;
		case 1360: goto st1360;
		case 1361: goto st1361;
		case 1362: goto st1362;
		case 1363: goto st1363;
		case 1364: goto st1364;
		case 1365: goto st1365;
		case 1366: goto st1366;
		case 1367: goto st1367;
		case 1368: goto st1368;
		case 1369: goto st1369;
		case 1370: goto st1370;
		case 1371: goto st1371;
		case 1724: goto st1724;
		case 1372: goto st1372;
		case 1373: goto st1373;
		case 1374: goto st1374;
		case 1375: goto st1375;
		case 1376: goto st1376;
		case 1377: goto st1377;
		case 1378: goto st1378;
		case 1379: goto st1379;
		case 1380: goto st1380;
		case 1381: goto st1381;
		case 1382: goto st1382;
		case 1383: goto st1383;
		case 1384: goto st1384;
		case 1385: goto st1385;
		case 1386: goto st1386;
		case 1725: goto st1725;
		case 1726: goto st1726;
		case 1727: goto st1727;
		case 1387: goto st1387;
		case 1388: goto st1388;
		case 1389: goto st1389;
		case 1390: goto st1390;
		case 1391: goto st1391;
		case 1392: goto st1392;
		case 1393: goto st1393;
		case 1394: goto st1394;
		case 1728: goto st1728;
		case 1395: goto st1395;
		case 1396: goto st1396;
		case 1397: goto st1397;
		case 1398: goto st1398;
		case 1399: goto st1399;
		case 1400: goto st1400;
		case 1401: goto st1401;
		case 1402: goto st1402;
		case 1403: goto st1403;
		case 1404: goto st1404;
		case 1405: goto st1405;
		case 1729: goto st1729;
		case 1730: goto st1730;
		case 1731: goto st1731;
		case 1406: goto st1406;
		case 1407: goto st1407;
		case 1408: goto st1408;
		case 1409: goto st1409;
		case 1410: goto st1410;
		case 1411: goto st1411;
		case 1412: goto st1412;
		case 1732: goto st1732;
		case 1413: goto st1413;
		case 1414: goto st1414;
		case 1415: goto st1415;
		case 1416: goto st1416;
		case 1417: goto st1417;
		case 1418: goto st1418;
		case 1419: goto st1419;
		case 1420: goto st1420;
		case 1421: goto st1421;
		case 1422: goto st1422;
		case 1423: goto st1423;
		case 1424: goto st1424;
		case 1425: goto st1425;
		case 1733: goto st1733;
		case 1426: goto st1426;
		case 1427: goto st1427;
		case 1428: goto st1428;
		case 1429: goto st1429;
		case 1430: goto st1430;
		case 1431: goto st1431;
		case 1432: goto st1432;
		case 1734: goto st1734;
		case 1433: goto st1433;
		case 1434: goto st1434;
		case 1435: goto st1435;
		case 1436: goto st1436;
		case 1437: goto st1437;
		case 1438: goto st1438;
		case 1735: goto st1735;
		case 1439: goto st1439;
		case 1440: goto st1440;
		case 1441: goto st1441;
		case 1442: goto st1442;
		case 1443: goto st1443;
		case 1444: goto st1444;
		case 1736: goto st1736;
		case 1445: goto st1445;
		case 1446: goto st1446;
		case 1447: goto st1447;
		case 1448: goto st1448;
		case 1449: goto st1449;
		case 1450: goto st1450;
		case 1451: goto st1451;
		case 1452: goto st1452;
		case 1737: goto st1737;
		case 1453: goto st1453;
		case 1454: goto st1454;
		case 1455: goto st1455;
		case 1456: goto st1456;
		case 1457: goto st1457;
		case 1458: goto st1458;
		case 1459: goto st1459;
		case 1738: goto st1738;
		case 1460: goto st1460;
		case 1461: goto st1461;
		case 1462: goto st1462;
		case 1463: goto st1463;
		case 1464: goto st1464;
		case 1465: goto st1465;
		case 1466: goto st1466;
		case 1467: goto st1467;
		case 1468: goto st1468;
		case 1739: goto st1739;
		case 1469: goto st1469;
		case 1470: goto st1470;
		case 1471: goto st1471;
		case 1472: goto st1472;
		case 1473: goto st1473;
		case 1474: goto st1474;
		case 1475: goto st1475;
		case 1476: goto st1476;
		case 1477: goto st1477;
		case 1478: goto st1478;
		case 1479: goto st1479;
		case 1480: goto st1480;
		case 1481: goto st1481;
		case 1482: goto st1482;
		case 1483: goto st1483;
		case 1484: goto st1484;
		case 1485: goto st1485;
		case 1486: goto st1486;
		case 1487: goto st1487;
		case 1488: goto st1488;
		case 1489: goto st1489;
		case 1490: goto st1490;
		case 1491: goto st1491;
		case 1492: goto st1492;
		case 1493: goto st1493;
		case 1494: goto st1494;
		case 1495: goto st1495;
		case 1496: goto st1496;
		case 1497: goto st1497;
		case 1498: goto st1498;
		case 1499: goto st1499;
		case 1500: goto st1500;
		case 1501: goto st1501;
		case 1502: goto st1502;
		case 1503: goto st1503;
		case 1504: goto st1504;
		case 1505: goto st1505;
		case 1506: goto st1506;
		case 1507: goto st1507;
		case 1508: goto st1508;
		case 1509: goto st1509;
		case 1510: goto st1510;
		case 1511: goto st1511;
		case 1512: goto st1512;
		case 1513: goto st1513;
		case 1514: goto st1514;
		case 1515: goto st1515;
		case 1516: goto st1516;
		case 1517: goto st1517;
		case 1518: goto st1518;
		case 1519: goto st1519;
		case 1520: goto st1520;
		case 1521: goto st1521;
		case 1522: goto st1522;
		case 1523: goto st1523;
		case 1524: goto st1524;
		case 1525: goto st1525;
		case 1526: goto st1526;
		case 1527: goto st1527;
		case 1528: goto st1528;
		case 1529: goto st1529;
		case 1530: goto st1530;
		case 1531: goto st1531;
		case 1532: goto st1532;
		case 1533: goto st1533;
		case 1534: goto st1534;
		case 1535: goto st1535;
		case 1536: goto st1536;
		case 1537: goto st1537;
		case 1538: goto st1538;
		case 1539: goto st1539;
		case 1540: goto st1540;
		case 1541: goto st1541;
		case 1542: goto st1542;
		case 1543: goto st1543;
		case 1544: goto st1544;
		case 1545: goto st1545;
		case 1546: goto st1546;
		case 1547: goto st1547;
		case 1548: goto st1548;
		case 1549: goto st1549;
		case 1550: goto st1550;
		case 1551: goto st1551;
		case 1552: goto st1552;
		case 1553: goto st1553;
		case 1554: goto st1554;
		case 1555: goto st1555;
		case 1556: goto st1556;
		case 1557: goto st1557;
		case 1558: goto st1558;
		case 1559: goto st1559;
		case 1560: goto st1560;
		case 1561: goto st1561;
		case 1562: goto st1562;
		case 1563: goto st1563;
		case 1564: goto st1564;
		case 1565: goto st1565;
		case 1566: goto st1566;
		case 1567: goto st1567;
		case 1568: goto st1568;
		case 1569: goto st1569;
		case 1570: goto st1570;
		case 1571: goto st1571;
		case 1572: goto st1572;
		case 1573: goto st1573;
		case 1574: goto st1574;
		case 1575: goto st1575;
		case 1576: goto st1576;
		case 1577: goto st1577;
		case 1578: goto st1578;
		case 1579: goto st1579;
		case 1580: goto st1580;
		case 1581: goto st1581;
		case 1582: goto st1582;
		case 1583: goto st1583;
		case 1584: goto st1584;
		case 1585: goto st1585;
		case 1586: goto st1586;
		case 1587: goto st1587;
		case 1588: goto st1588;
		case 1589: goto st1589;
		case 1590: goto st1590;
		case 1591: goto st1591;
		case 1592: goto st1592;
		case 1593: goto st1593;
		case 1594: goto st1594;
		case 1595: goto st1595;
		case 1596: goto st1596;
		case 1597: goto st1597;
		case 1598: goto st1598;
		case 1599: goto st1599;
		case 1600: goto st1600;
		case 1601: goto st1601;
		case 1602: goto st1602;
		case 1603: goto st1603;
		case 1604: goto st1604;
		case 1605: goto st1605;
		case 1606: goto st1606;
		case 1607: goto st1607;
		case 1608: goto st1608;
		case 1609: goto st1609;
		case 1610: goto st1610;
		case 1611: goto st1611;
		case 1612: goto st1612;
		case 1613: goto st1613;
		case 1614: goto st1614;
		case 1615: goto st1615;
		case 1616: goto st1616;
		case 1617: goto st1617;
		case 1618: goto st1618;
		case 1619: goto st1619;
		case 1620: goto st1620;
		case 1621: goto st1621;
		case 1622: goto st1622;
		case 1623: goto st1623;
		case 1624: goto st1624;
		case 1625: goto st1625;
		case 1626: goto st1626;
		case 1627: goto st1627;
		case 1628: goto st1628;
		case 1629: goto st1629;
		case 1630: goto st1630;
		case 1631: goto st1631;
		case 1632: goto st1632;
		case 1633: goto st1633;
		case 1634: goto st1634;
		case 1635: goto st1635;
		case 1636: goto st1636;
		case 1637: goto st1637;
		case 1638: goto st1638;
		case 1639: goto st1639;
		case 1640: goto st1640;
	default: break;
	}

	if ( ++p == pe )
		goto _test_eof;
_resume:
	switch ( cs )
	{
tr23:
	{
		s->line_counter++;
	}
	goto st1641;
tr89:
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop if required from the callback.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1641; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1641; goto _out;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1641;
tr95:
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop if required from the callback.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1641; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1641; goto _out;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1641;
tr98:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1641; goto _out;}
			}
		}
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop if required from the callback.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1641; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1641; goto _out;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1641;
tr783:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1641; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1641;
tr877:
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1641; goto _out;}
			}
		}
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop if required from the callback.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1641; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1641; goto _out;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1641;
tr995:
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop if required from the callback.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1641; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1641; goto _out;}
		}
	}
	{
		s->line_counter++;
	}
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1641; goto _out;}
			}
		}
	}
	goto st1641;
tr999:
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop if required from the callback.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1641; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1641; goto _out;}
		}
	}
	{
		s->line_counter++;
	}
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1641; goto _out;}
			}
		}
	}
	goto st1641;
tr4789:
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		s->line_counter++;
	}
	goto st1641;
tr4855:
	{
		NOERR;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		s->line_counter++;
	}
	goto st1641;
st1641:
	if ( ++p == pe )
		goto _test_eof1641;
case 1641:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4784;
		case 32: goto tr4784;
		case 36: goto st193;
		case 40: goto tr4786;
		case 41: goto tr4787;
		case 42: goto tr4788;
		case 92: goto tr4788;
		case 95: goto tr4788;
		case 1802: goto tr4789;
		case 1851: goto tr4790;
		case 2058: goto tr4791;
		case 2107: goto tr4792;
	}
	if ( _widec < 64 ) {
		if ( 45 <= _widec && _widec <= 57 )
			goto tr4788;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr4788;
	} else
		goto tr4788;
	goto tr4783;
tr0:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st319;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st319;}
	}
	goto st0;
tr27:
	{
		WARN(ZS_BAD_TIME_UNIT);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st319;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st319;}
	}
	goto st0;
tr39:
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st319;}
	}
	goto st0;
tr63:
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	goto st0;
tr77:
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	goto st0;
tr85:
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st319;}
	}
	goto st0;
tr91:
	{
		WARN(ZS_BAD_REST);
		p--; {goto st319;}
	}
	goto st0;
tr120:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st319;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st319;}
	}
	goto st0;
tr148:
	{
		WARN(ZS_BAD_TIME_UNIT);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st319;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st319;}
	}
	goto st0;
tr154:
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st319;}
	}
	goto st0;
tr671:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st319;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st319;}
	}
	goto st0;
tr673:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st319;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	goto st0;
tr784:
	{
		ERR(ZS_BAD_DIRECTIVE);
		p--; {goto st319;}
	}
	goto st0;
tr795:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {goto st319;}
	}
	goto st0;
tr809:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_TIME_UNIT);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st319;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st319;}
	}
	goto st0;
tr837:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {goto st319;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	goto st0;
tr852:
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st319;}
	}
	goto st0;
tr890:
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st319;}
	}
	{
		ERR(ZS_BAD_DIRECTIVE);
		p--; {goto st319;}
	}
	goto st0;
tr900:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st319;}
	}
	goto st0;
tr906:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_TIME_UNIT);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st319;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st319;}
	}
	goto st0;
tr919:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {goto st319;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st319;}
	}
	goto st0;
tr933:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	goto st0;
tr1025:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {goto st319;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st319;}
	}
	goto st0;
tr1040:
	{
		WARN(ZS_BAD_DNAME_CHAR);
		p--; {goto st319;}
	}
	goto st0;
tr1053:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_DNAME_CHAR);
		p--; {goto st319;}
	}
	goto st0;
tr1061:
	{
		WARN(ZS_BAD_TEXT_CHAR);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_TEXT);
		p--; {goto st319;}
	}
	goto st0;
tr1069:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_TEXT_CHAR);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_TEXT);
		p--; {goto st319;}
	}
	goto st0;
tr1085:
	{
		WARN(ZS_BAD_TEXT);
		p--; {goto st319;}
	}
	goto st0;
tr1094:
	{
		ERR(ZS_BAD_TTL);
		p--; {goto st319;}
	}
	goto st0;
tr1100:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st319;}
	}
	{
		ERR(ZS_BAD_TTL);
		p--; {goto st319;}
	}
	goto st0;
tr1102:
	{
		WARN(ZS_BAD_TIME_UNIT);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st319;}
	}
	{
		ERR(ZS_BAD_TTL);
		p--; {goto st319;}
	}
	goto st0;
tr1114:
	{
		WARN(ZS_BAD_REST);
		p--; {goto st319;}
	}
	{
		ERR(ZS_BAD_TTL);
		p--; {goto st319;}
	}
	goto st0;
tr1123:
	{
		WARN(ZS_BAD_TIME_UNIT);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st319;}
	}
	{
		ERR(ZS_BAD_TTL);
		p--; {goto st319;}
	}
	goto st0;
tr1138:
	{
		ERR(ZS_BAD_ORIGIN);
		p--; {goto st319;}
	}
	goto st0;
tr1150:
	{
		WARN(ZS_BAD_REST);
		p--; {goto st319;}
	}
	{
		ERR(ZS_BAD_ORIGIN);
		p--; {goto st319;}
	}
	goto st0;
tr1166:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st319;}
	}
	{
		ERR(ZS_BAD_ORIGIN);
		p--; {goto st319;}
	}
	goto st0;
tr1180:
	{
		ERR(ZS_BAD_INCLUDE_FILENAME);
		p--; {goto st319;}
	}
	goto st0;
tr1181:
	{
		ERR(ZS_BAD_INCLUDE_FILENAME);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st319;}
	}
	goto st0;
tr1188:
	{
		ERR(ZS_BAD_INCLUDE_ORIGIN);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st319;}
	}
	goto st0;
tr1198:
	{
		ERR(ZS_BAD_INCLUDE_ORIGIN);
		p--; {goto st319;}
	}
	goto st0;
tr1215:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st319;}
	}
	{
		ERR(ZS_BAD_INCLUDE_ORIGIN);
		p--; {goto st319;}
	}
	goto st0;
tr1232:
	{
		WARN(ZS_BAD_BASE64_CHAR);
		p--; {goto st319;}
	}
	goto st0;
tr1248:
	{
		WARN(ZS_BAD_BITMAP);
		p--; {goto st319;}
	}
	goto st0;
tr1846:
	{
		WARN(ZS_BAD_HEX_RDATA);
		p--; {goto st319;}
	}
	goto st0;
tr1852:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_HEX_RDATA);
		p--; {goto st319;}
	}
	goto st0;
tr1860:
	{
		WARN(ZS_BAD_HEX_CHAR);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_HEX_RDATA);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_HEX_RDATA);
		p--; {goto st319;}
	}
	goto st0;
tr1922:
	{
		WARN(ZS_BAD_SVCB_MANDATORY);
		p--; {goto st319;}
	}
	goto st0;
tr1961:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_SVCB_MANDATORY);
		p--; {goto st319;}
	}
	goto st0;
tr1989:
	{
		WARN(ZS_BAD_SVCB_PARAM);
		p--; {goto st319;}
	}
	goto st0;
tr2085:
	{
		WARN(ZS_BAD_ADDRESS_CHAR);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_SVCB_PARAM);
		p--; {goto st319;}
	}
	goto st0;
tr2129:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_SVCB_PARAM);
		p--; {goto st319;}
	}
	goto st0;
tr2220:
	{
		WARN(ZS_BAD_ALGORITHM);
		p--; {goto st319;}
	}
	goto st0;
tr2342:
	{
		WARN(ZS_BAD_CERT_TYPE);
		p--; {goto st319;}
	}
	goto st0;
tr2395:
	{
                WARN(ZS_BAD_DSYNC_SCHEME);
                p--; {goto st319;}
        }
	goto st0;
tr2406:
	{
		WARN(ZS_BAD_ADDRESS_CHAR);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	goto st0;
tr2429:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	goto st0;
tr2448:
	{
		WARN(ZS_BAD_TIME_UNIT);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	goto st0;
tr2614:
	{
		s->long_string = false;
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	goto st0;
tr2637:
	{
		WARN(ZS_BAD_LOC_DATA);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	goto st0;
tr3040:
	{
		WARN(ZS_BAD_APL);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	goto st0;
tr3055:
	{
		WARN(ZS_BAD_ADDRESS_CHAR);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_APL);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	goto st0;
tr3100:
	{
		WARN(ZS_BAD_HEX_CHAR);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	goto st0;
tr3171:
	{
		WARN(ZS_BAD_GATEWAY);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	goto st0;
tr3186:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_GATEWAY);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	goto st0;
tr3200:
	{
		WARN(ZS_BAD_GATEWAY);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_GATEWAY_KEY);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	goto st0;
tr3223:
	{
		WARN(ZS_BAD_GATEWAY_KEY);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	goto st0;
tr3247:
	{
		WARN(ZS_BAD_ADDRESS_CHAR);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_GATEWAY);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	goto st0;
tr3254:
	{
		WARN(ZS_BAD_ADDRESS_CHAR);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_GATEWAY);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_GATEWAY_KEY);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	goto st0;
tr3373:
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	goto st0;
tr3430:
	{
		WARN(ZS_BAD_TIMESTAMP_CHAR);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	goto st0;
tr3867:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st319;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	goto st0;
tr3988:
	{
		WARN(ZS_BAD_BASE32HEX_CHAR);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	goto st0;
tr4227:
	{
		WARN(ZS_BAD_HEX_CHAR);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_CHAR_COLON);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	goto st0;
tr4233:
	{
		WARN(ZS_BAD_CHAR_COLON);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_HEX_CHAR);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	goto st0;
tr4239:
	{
		WARN(ZS_BAD_CHAR_DASH);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_HEX_CHAR);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	goto st0;
tr4783:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st319;}
	}
	goto st0;
tr4805:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {goto st319;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st319;}
	}
	goto st0;
tr4829:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st319;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st319;}
	}
	goto st0;
tr4849:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {goto st319;}
	}
	{
		ERR(ZS_BAD_DIRECTIVE);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st319;}
	}
	goto st0;
tr4873:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_NUMBER);
		p--; {goto st319;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {goto st319;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {goto st319;}
	}
	goto st0;
st0:
cs = 0;
	goto _out;
tr2:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1;
tr3:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1;
tr4784:
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st1;
tr4786:
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st1;
tr4787:
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st1;
tr4859:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st1;
tr4860:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st1;
tr4850:
	{
		NOERR;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st1;
tr4852:
	{
		NOERR;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st1;
tr4853:
	{
		NOERR;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st1;
st1:
	if ( ++p == pe )
		goto _test_eof1;
case 1:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1;
		case 32: goto st1;
		case 40: goto tr2;
		case 41: goto tr3;
		case 65: goto tr5;
		case 67: goto tr6;
		case 68: goto tr7;
		case 69: goto tr8;
		case 72: goto tr9;
		case 73: goto tr10;
		case 75: goto tr11;
		case 76: goto tr12;
		case 77: goto tr13;
		case 78: goto tr14;
		case 79: goto tr15;
		case 80: goto tr16;
		case 82: goto tr17;
		case 83: goto tr18;
		case 84: goto tr19;
		case 85: goto tr20;
		case 87: goto tr21;
		case 90: goto tr22;
		case 97: goto tr5;
		case 99: goto tr6;
		case 100: goto tr7;
		case 101: goto tr8;
		case 104: goto tr9;
		case 105: goto tr10;
		case 107: goto tr11;
		case 108: goto tr12;
		case 109: goto tr13;
		case 110: goto tr14;
		case 111: goto tr15;
		case 112: goto tr16;
		case 114: goto tr17;
		case 115: goto tr18;
		case 116: goto tr19;
		case 117: goto tr20;
		case 119: goto tr21;
		case 122: goto tr22;
		case 1802: goto tr23;
		case 1851: goto tr24;
		case 2058: goto tr25;
		case 2107: goto tr26;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4;
	goto tr0;
tr4:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st2;
tr31:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st2;
st2:
	if ( ++p == pe )
		goto _test_eof2;
case 2:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr28;
		case 32: goto tr28;
		case 40: goto tr29;
		case 41: goto tr30;
		case 68: goto tr32;
		case 72: goto tr33;
		case 77: goto tr34;
		case 83: goto st207;
		case 87: goto tr36;
		case 100: goto tr32;
		case 104: goto tr33;
		case 109: goto tr34;
		case 115: goto st207;
		case 119: goto tr36;
		case 2058: goto tr37;
		case 2107: goto tr38;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr31;
	goto tr27;
tr41:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st3;
tr42:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st3;
tr61:
	{
		s->line_counter++;
	}
	goto st3;
tr28:
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st3;
tr29:
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st3;
tr30:
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st3;
tr37:
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st3;
tr836:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 3; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st3;
tr829:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st3;
tr830:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st3;
tr831:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st3;
tr833:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st3;
st3:
	if ( ++p == pe )
		goto _test_eof3;
case 3:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st3;
		case 32: goto st3;
		case 40: goto tr41;
		case 41: goto tr42;
		case 65: goto tr43;
		case 67: goto tr44;
		case 68: goto tr45;
		case 69: goto tr46;
		case 72: goto tr47;
		case 73: goto tr48;
		case 75: goto tr49;
		case 76: goto tr50;
		case 77: goto tr51;
		case 78: goto tr52;
		case 79: goto tr53;
		case 80: goto tr54;
		case 82: goto tr55;
		case 83: goto tr56;
		case 84: goto tr57;
		case 85: goto tr58;
		case 87: goto tr59;
		case 90: goto tr60;
		case 97: goto tr43;
		case 99: goto tr44;
		case 100: goto tr45;
		case 101: goto tr46;
		case 104: goto tr47;
		case 105: goto tr48;
		case 107: goto tr49;
		case 108: goto tr50;
		case 109: goto tr51;
		case 110: goto tr52;
		case 111: goto tr53;
		case 112: goto tr54;
		case 114: goto tr55;
		case 115: goto tr56;
		case 116: goto tr57;
		case 117: goto tr58;
		case 119: goto tr59;
		case 122: goto tr60;
		case 2058: goto tr61;
		case 2107: goto tr62;
	}
	goto tr39;
tr5:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	goto st4;
tr43:
	{
		s->r_class = s->default_class;
	}
	goto st4;
tr736:
	{
		s->r_ttl = s->default_ttl;
	}
	goto st4;
st4:
	if ( ++p == pe )
		goto _test_eof4;
case 4:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr64;
		case 32: goto tr64;
		case 40: goto tr65;
		case 41: goto tr66;
		case 65: goto st277;
		case 70: goto st280;
		case 80: goto st284;
		case 97: goto st277;
		case 102: goto st280;
		case 112: goto st284;
		case 3082: goto tr70;
		case 3131: goto tr71;
		case 3338: goto tr72;
		case 3387: goto tr72;
		case 3594: goto tr73;
		case 3643: goto tr74;
	}
	goto tr63;
tr78:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr79:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr81:
	{
		s->line_counter++;
	}
	goto st5;
tr64:
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr65:
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr66:
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr70:
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr102:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 5; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st5;
tr166:
	{ s->r_type = KNOT_RRTYPE_CAA; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr167:
	{ s->r_type = KNOT_RRTYPE_CAA; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr168:
	{ s->r_type = KNOT_RRTYPE_CAA; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr169:
	{ s->r_type = KNOT_RRTYPE_CAA; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr188:
	{ s->r_type = KNOT_RRTYPE_CDNSKEY; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr189:
	{ s->r_type = KNOT_RRTYPE_CDNSKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr190:
	{ s->r_type = KNOT_RRTYPE_CDNSKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr191:
	{ s->r_type = KNOT_RRTYPE_CDNSKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr196:
	{ s->r_type = KNOT_RRTYPE_CDS; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr197:
	{ s->r_type = KNOT_RRTYPE_CDS; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr198:
	{ s->r_type = KNOT_RRTYPE_CDS; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr199:
	{ s->r_type = KNOT_RRTYPE_CDS; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr206:
	{ s->r_type = KNOT_RRTYPE_CERT; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr207:
	{ s->r_type = KNOT_RRTYPE_CERT; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr208:
	{ s->r_type = KNOT_RRTYPE_CERT; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr209:
	{ s->r_type = KNOT_RRTYPE_CERT; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr217:
	{ s->r_type = KNOT_RRTYPE_CNAME; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr218:
	{ s->r_type = KNOT_RRTYPE_CNAME; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr219:
	{ s->r_type = KNOT_RRTYPE_CNAME; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr220:
	{ s->r_type = KNOT_RRTYPE_CNAME; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr228:
	{ s->r_type = KNOT_RRTYPE_CSYNC; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr229:
	{ s->r_type = KNOT_RRTYPE_CSYNC; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr230:
	{ s->r_type = KNOT_RRTYPE_CSYNC; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr231:
	{ s->r_type = KNOT_RRTYPE_CSYNC; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr242:
	{ s->r_type = KNOT_RRTYPE_DHCID; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr243:
	{ s->r_type = KNOT_RRTYPE_DHCID; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr244:
	{ s->r_type = KNOT_RRTYPE_DHCID; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr245:
	{ s->r_type = KNOT_RRTYPE_DHCID; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr254:
	{ s->r_type = KNOT_RRTYPE_DNAME; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr255:
	{ s->r_type = KNOT_RRTYPE_DNAME; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr256:
	{ s->r_type = KNOT_RRTYPE_DNAME; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr257:
	{ s->r_type = KNOT_RRTYPE_DNAME; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr265:
	{ s->r_type = KNOT_RRTYPE_DNSKEY; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr266:
	{ s->r_type = KNOT_RRTYPE_DNSKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr267:
	{ s->r_type = KNOT_RRTYPE_DNSKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr268:
	{ s->r_type = KNOT_RRTYPE_DNSKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr273:
	{ s->r_type = KNOT_RRTYPE_DS; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr274:
	{ s->r_type = KNOT_RRTYPE_DS; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr275:
	{ s->r_type = KNOT_RRTYPE_DS; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr277:
	{ s->r_type = KNOT_RRTYPE_DS; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr284:
	{ s->r_type = KNOT_RRTYPE_DSYNC; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr285:
	{ s->r_type = KNOT_RRTYPE_DSYNC; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr286:
	{ s->r_type = KNOT_RRTYPE_DSYNC; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr287:
	{ s->r_type = KNOT_RRTYPE_DSYNC; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr297:
	{ s->r_type = KNOT_RRTYPE_EUI48; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr298:
	{ s->r_type = KNOT_RRTYPE_EUI48; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr299:
	{ s->r_type = KNOT_RRTYPE_EUI48; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr300:
	{ s->r_type = KNOT_RRTYPE_EUI48; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr306:
	{ s->r_type = KNOT_RRTYPE_EUI64; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr307:
	{ s->r_type = KNOT_RRTYPE_EUI64; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr308:
	{ s->r_type = KNOT_RRTYPE_EUI64; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr309:
	{ s->r_type = KNOT_RRTYPE_EUI64; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr319:
	{ s->r_type = KNOT_RRTYPE_HINFO; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr320:
	{ s->r_type = KNOT_RRTYPE_HINFO; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr321:
	{ s->r_type = KNOT_RRTYPE_HINFO; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr322:
	{ s->r_type = KNOT_RRTYPE_HINFO; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr330:
	{ s->r_type = KNOT_RRTYPE_HTTPS; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr331:
	{ s->r_type = KNOT_RRTYPE_HTTPS; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr332:
	{ s->r_type = KNOT_RRTYPE_HTTPS; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr333:
	{ s->r_type = KNOT_RRTYPE_HTTPS; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr374:
	{ s->r_type = KNOT_RRTYPE_IPSECKEY; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr375:
	{ s->r_type = KNOT_RRTYPE_IPSECKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr376:
	{ s->r_type = KNOT_RRTYPE_IPSECKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr377:
	{ s->r_type = KNOT_RRTYPE_IPSECKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr385:
	{ s->r_type = KNOT_RRTYPE_KEY; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr386:
	{ s->r_type = KNOT_RRTYPE_KEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr387:
	{ s->r_type = KNOT_RRTYPE_KEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr388:
	{ s->r_type = KNOT_RRTYPE_KEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr393:
	{ s->r_type = KNOT_RRTYPE_KX; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr394:
	{ s->r_type = KNOT_RRTYPE_KX; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr395:
	{ s->r_type = KNOT_RRTYPE_KX; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr396:
	{ s->r_type = KNOT_RRTYPE_KX; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr406:
	{ s->r_type = KNOT_RRTYPE_L32; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr407:
	{ s->r_type = KNOT_RRTYPE_L32; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr408:
	{ s->r_type = KNOT_RRTYPE_L32; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr409:
	{ s->r_type = KNOT_RRTYPE_L32; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr415:
	{ s->r_type = KNOT_RRTYPE_L64; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr416:
	{ s->r_type = KNOT_RRTYPE_L64; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr417:
	{ s->r_type = KNOT_RRTYPE_L64; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr418:
	{ s->r_type = KNOT_RRTYPE_L64; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr424:
	{ s->r_type = KNOT_RRTYPE_LOC; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr425:
	{ s->r_type = KNOT_RRTYPE_LOC; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr426:
	{ s->r_type = KNOT_RRTYPE_LOC; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr427:
	{ s->r_type = KNOT_RRTYPE_LOC; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr432:
	{ s->r_type = KNOT_RRTYPE_LP; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr433:
	{ s->r_type = KNOT_RRTYPE_LP; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr434:
	{ s->r_type = KNOT_RRTYPE_LP; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr435:
	{ s->r_type = KNOT_RRTYPE_LP; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr445:
	{ s->r_type = KNOT_RRTYPE_MINFO; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr446:
	{ s->r_type = KNOT_RRTYPE_MINFO; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr447:
	{ s->r_type = KNOT_RRTYPE_MINFO; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr448:
	{ s->r_type = KNOT_RRTYPE_MINFO; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr453:
	{ s->r_type = KNOT_RRTYPE_MX; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr454:
	{ s->r_type = KNOT_RRTYPE_MX; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr455:
	{ s->r_type = KNOT_RRTYPE_MX; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr456:
	{ s->r_type = KNOT_RRTYPE_MX; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr467:
	{ s->r_type = KNOT_RRTYPE_NAPTR; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr468:
	{ s->r_type = KNOT_RRTYPE_NAPTR; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr469:
	{ s->r_type = KNOT_RRTYPE_NAPTR; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr470:
	{ s->r_type = KNOT_RRTYPE_NAPTR; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr476:
	{ s->r_type = KNOT_RRTYPE_NID; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr477:
	{ s->r_type = KNOT_RRTYPE_NID; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr478:
	{ s->r_type = KNOT_RRTYPE_NID; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr479:
	{ s->r_type = KNOT_RRTYPE_NID; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr484:
	{ s->r_type = KNOT_RRTYPE_NS; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr485:
	{ s->r_type = KNOT_RRTYPE_NS; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr486:
	{ s->r_type = KNOT_RRTYPE_NS; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr488:
	{ s->r_type = KNOT_RRTYPE_NS; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr494:
	{ s->r_type = KNOT_RRTYPE_NSEC; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr495:
	{ s->r_type = KNOT_RRTYPE_NSEC; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr496:
	{ s->r_type = KNOT_RRTYPE_NSEC; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr498:
	{ s->r_type = KNOT_RRTYPE_NSEC; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr503:
	{ s->r_type = KNOT_RRTYPE_NSEC3; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr504:
	{ s->r_type = KNOT_RRTYPE_NSEC3; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr505:
	{ s->r_type = KNOT_RRTYPE_NSEC3; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr507:
	{ s->r_type = KNOT_RRTYPE_NSEC3; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr516:
	{ s->r_type = KNOT_RRTYPE_NSEC3PARAM; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr517:
	{ s->r_type = KNOT_RRTYPE_NSEC3PARAM; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr518:
	{ s->r_type = KNOT_RRTYPE_NSEC3PARAM; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr519:
	{ s->r_type = KNOT_RRTYPE_NSEC3PARAM; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr533:
	{ s->r_type = KNOT_RRTYPE_OPENPGPKEY; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr534:
	{ s->r_type = KNOT_RRTYPE_OPENPGPKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr535:
	{ s->r_type = KNOT_RRTYPE_OPENPGPKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr536:
	{ s->r_type = KNOT_RRTYPE_OPENPGPKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr543:
	{ s->r_type = KNOT_RRTYPE_PTR; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr544:
	{ s->r_type = KNOT_RRTYPE_PTR; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr545:
	{ s->r_type = KNOT_RRTYPE_PTR; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr546:
	{ s->r_type = KNOT_RRTYPE_PTR; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr554:
	{ s->r_type = KNOT_RRTYPE_RP; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr555:
	{ s->r_type = KNOT_RRTYPE_RP; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr556:
	{ s->r_type = KNOT_RRTYPE_RP; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr557:
	{ s->r_type = KNOT_RRTYPE_RP; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr565:
	{ s->r_type = KNOT_RRTYPE_RRSIG; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr566:
	{ s->r_type = KNOT_RRTYPE_RRSIG; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr567:
	{ s->r_type = KNOT_RRTYPE_RRSIG; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr568:
	{ s->r_type = KNOT_RRTYPE_RRSIG; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr573:
	{ s->r_type = KNOT_RRTYPE_RT; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr574:
	{ s->r_type = KNOT_RRTYPE_RT; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr575:
	{ s->r_type = KNOT_RRTYPE_RT; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr576:
	{ s->r_type = KNOT_RRTYPE_RT; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr591:
	{ s->r_type = KNOT_RRTYPE_SMIMEA; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr592:
	{ s->r_type = KNOT_RRTYPE_SMIMEA; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr593:
	{ s->r_type = KNOT_RRTYPE_SMIMEA; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr594:
	{ s->r_type = KNOT_RRTYPE_SMIMEA; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr600:
	{ s->r_type = KNOT_RRTYPE_SOA; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr601:
	{ s->r_type = KNOT_RRTYPE_SOA; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr602:
	{ s->r_type = KNOT_RRTYPE_SOA; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr603:
	{ s->r_type = KNOT_RRTYPE_SOA; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr609:
	{ s->r_type = KNOT_RRTYPE_SPF; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr610:
	{ s->r_type = KNOT_RRTYPE_SPF; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr611:
	{ s->r_type = KNOT_RRTYPE_SPF; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr612:
	{ s->r_type = KNOT_RRTYPE_SPF; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr618:
	{ s->r_type = KNOT_RRTYPE_SRV; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr619:
	{ s->r_type = KNOT_RRTYPE_SRV; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr620:
	{ s->r_type = KNOT_RRTYPE_SRV; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr621:
	{ s->r_type = KNOT_RRTYPE_SRV; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr629:
	{ s->r_type = KNOT_RRTYPE_SSHFP; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr630:
	{ s->r_type = KNOT_RRTYPE_SSHFP; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr631:
	{ s->r_type = KNOT_RRTYPE_SSHFP; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr632:
	{ s->r_type = KNOT_RRTYPE_SSHFP; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr639:
	{ s->r_type = KNOT_RRTYPE_SVCB; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr640:
	{ s->r_type = KNOT_RRTYPE_SVCB; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr641:
	{ s->r_type = KNOT_RRTYPE_SVCB; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr642:
	{ s->r_type = KNOT_RRTYPE_SVCB; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr652:
	{ s->r_type = KNOT_RRTYPE_TLSA; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr653:
	{ s->r_type = KNOT_RRTYPE_TLSA; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr654:
	{ s->r_type = KNOT_RRTYPE_TLSA; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr655:
	{ s->r_type = KNOT_RRTYPE_TLSA; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr661:
	{ s->r_type = KNOT_RRTYPE_TXT; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr662:
	{ s->r_type = KNOT_RRTYPE_TXT; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr663:
	{ s->r_type = KNOT_RRTYPE_TXT; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr664:
	{ s->r_type = KNOT_RRTYPE_TXT; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr674:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_type = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr675:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_type = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr676:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_type = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr678:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_type = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr685:
	{ s->r_type = KNOT_RRTYPE_URI; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr686:
	{ s->r_type = KNOT_RRTYPE_URI; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr687:
	{ s->r_type = KNOT_RRTYPE_URI; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr688:
	{ s->r_type = KNOT_RRTYPE_URI; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr698:
	{ s->r_type = KNOT_RRTYPE_WALLET; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr699:
	{ s->r_type = KNOT_RRTYPE_WALLET; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr700:
	{ s->r_type = KNOT_RRTYPE_WALLET; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr701:
	{ s->r_type = KNOT_RRTYPE_WALLET; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr711:
	{ s->r_type = KNOT_RRTYPE_ZONEMD; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr712:
	{ s->r_type = KNOT_RRTYPE_ZONEMD; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr713:
	{ s->r_type = KNOT_RRTYPE_ZONEMD; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr714:
	{ s->r_type = KNOT_RRTYPE_ZONEMD; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr962:
	{ s->r_type = KNOT_RRTYPE_AAAA; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr963:
	{ s->r_type = KNOT_RRTYPE_AAAA; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr964:
	{ s->r_type = KNOT_RRTYPE_AAAA; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr965:
	{ s->r_type = KNOT_RRTYPE_AAAA; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr973:
	{ s->r_type = KNOT_RRTYPE_AFSDB; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr974:
	{ s->r_type = KNOT_RRTYPE_AFSDB; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr975:
	{ s->r_type = KNOT_RRTYPE_AFSDB; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr976:
	{ s->r_type = KNOT_RRTYPE_AFSDB; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
tr982:
	{ s->r_type = KNOT_RRTYPE_APL; }
	{
		rdata_tail = s->r_data;
	}
	goto st5;
tr983:
	{ s->r_type = KNOT_RRTYPE_APL; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st5;
tr984:
	{ s->r_type = KNOT_RRTYPE_APL; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st5;
tr985:
	{ s->r_type = KNOT_RRTYPE_APL; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	goto st5;
st5:
	if ( ++p == pe )
		goto _test_eof5;
case 5:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st5;
		case 32: goto st5;
		case 40: goto tr78;
		case 41: goto tr79;
		case 92: goto tr80;
		case 3082: goto tr81;
		case 3131: goto tr82;
		case 3338: goto tr75;
		case 3387: goto tr75;
		case 3594: goto tr83;
		case 3643: goto tr84;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr75;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr75;
	} else
		goto tr75;
	goto tr77;
tr72:
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr75:
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr99:
	{
		if (*wrap == WRAP_NONE) {
			p--;
		}
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr100:
	{
		switch (s->r_type) {
		// Next types must not have empty rdata.
		case KNOT_RRTYPE_A:
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
		case KNOT_RRTYPE_SOA:
		case KNOT_RRTYPE_HINFO:
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_RP:
		case KNOT_RRTYPE_AAAA:
		case KNOT_RRTYPE_LOC:
		case KNOT_RRTYPE_SRV:
		case KNOT_RRTYPE_NAPTR:
		case KNOT_RRTYPE_CERT:
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_SSHFP:
		case KNOT_RRTYPE_IPSECKEY:
		case KNOT_RRTYPE_RRSIG:
		case KNOT_RRTYPE_NSEC:
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_NSEC3:
		case KNOT_RRTYPE_NSEC3PARAM:
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
		case KNOT_RRTYPE_CDS:
		case KNOT_RRTYPE_CDNSKEY:
		case KNOT_RRTYPE_OPENPGPKEY:
		case KNOT_RRTYPE_CSYNC:
		case KNOT_RRTYPE_ZONEMD:
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L32:
		case KNOT_RRTYPE_L64:
		case KNOT_RRTYPE_LP:
		case KNOT_RRTYPE_EUI48:
		case KNOT_RRTYPE_EUI64:
		case KNOT_RRTYPE_URI:
		case KNOT_RRTYPE_CAA:
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
		case KNOT_RRTYPE_DSYNC:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st561;}
		// Next types can have empty rdata.
		case KNOT_RRTYPE_APL:
		default:
			{stack[top++] = 6;goto st570;}
		}
	}
	goto st6;
tr171:
	{ s->r_type = KNOT_RRTYPE_CAA; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr193:
	{ s->r_type = KNOT_RRTYPE_CDNSKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr201:
	{ s->r_type = KNOT_RRTYPE_CDS; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr211:
	{ s->r_type = KNOT_RRTYPE_CERT; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr222:
	{ s->r_type = KNOT_RRTYPE_CNAME; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr233:
	{ s->r_type = KNOT_RRTYPE_CSYNC; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr247:
	{ s->r_type = KNOT_RRTYPE_DHCID; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr259:
	{ s->r_type = KNOT_RRTYPE_DNAME; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr270:
	{ s->r_type = KNOT_RRTYPE_DNSKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr279:
	{ s->r_type = KNOT_RRTYPE_DS; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr289:
	{ s->r_type = KNOT_RRTYPE_DSYNC; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr302:
	{ s->r_type = KNOT_RRTYPE_EUI48; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr311:
	{ s->r_type = KNOT_RRTYPE_EUI64; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr324:
	{ s->r_type = KNOT_RRTYPE_HINFO; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr335:
	{ s->r_type = KNOT_RRTYPE_HTTPS; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr379:
	{ s->r_type = KNOT_RRTYPE_IPSECKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr390:
	{ s->r_type = KNOT_RRTYPE_KEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr398:
	{ s->r_type = KNOT_RRTYPE_KX; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr411:
	{ s->r_type = KNOT_RRTYPE_L32; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr420:
	{ s->r_type = KNOT_RRTYPE_L64; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr429:
	{ s->r_type = KNOT_RRTYPE_LOC; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr437:
	{ s->r_type = KNOT_RRTYPE_LP; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr450:
	{ s->r_type = KNOT_RRTYPE_MINFO; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr458:
	{ s->r_type = KNOT_RRTYPE_MX; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr472:
	{ s->r_type = KNOT_RRTYPE_NAPTR; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr481:
	{ s->r_type = KNOT_RRTYPE_NID; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr490:
	{ s->r_type = KNOT_RRTYPE_NS; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr500:
	{ s->r_type = KNOT_RRTYPE_NSEC; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr509:
	{ s->r_type = KNOT_RRTYPE_NSEC3; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr521:
	{ s->r_type = KNOT_RRTYPE_NSEC3PARAM; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr538:
	{ s->r_type = KNOT_RRTYPE_OPENPGPKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr548:
	{ s->r_type = KNOT_RRTYPE_PTR; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr559:
	{ s->r_type = KNOT_RRTYPE_RP; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr570:
	{ s->r_type = KNOT_RRTYPE_RRSIG; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr578:
	{ s->r_type = KNOT_RRTYPE_RT; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr596:
	{ s->r_type = KNOT_RRTYPE_SMIMEA; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr605:
	{ s->r_type = KNOT_RRTYPE_SOA; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr614:
	{ s->r_type = KNOT_RRTYPE_SPF; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr623:
	{ s->r_type = KNOT_RRTYPE_SRV; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr634:
	{ s->r_type = KNOT_RRTYPE_SSHFP; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr644:
	{ s->r_type = KNOT_RRTYPE_SVCB; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr657:
	{ s->r_type = KNOT_RRTYPE_TLSA; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr666:
	{ s->r_type = KNOT_RRTYPE_TXT; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr680:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_type = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr690:
	{ s->r_type = KNOT_RRTYPE_URI; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr703:
	{ s->r_type = KNOT_RRTYPE_WALLET; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr716:
	{ s->r_type = KNOT_RRTYPE_ZONEMD; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr967:
	{ s->r_type = KNOT_RRTYPE_AAAA; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr978:
	{ s->r_type = KNOT_RRTYPE_AFSDB; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
tr987:
	{ s->r_type = KNOT_RRTYPE_APL; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 6;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 6;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 6;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 6;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 6;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 6;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 6;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 6;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 6;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 6;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 6;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 6;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 6;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 6;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 6;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 6;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 6;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 6;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 6;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 6;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 6;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 6;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 6;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 6;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 6;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 6;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 6;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 6;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 6;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 6;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 6;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 6;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 6;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st6;
st6:
	if ( ++p == pe )
		goto _test_eof6;
case 6:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr86;
		case 32: goto tr86;
		case 40: goto tr87;
		case 41: goto tr88;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr89;
		case 2107: goto tr90;
	}
	goto tr85;
tr93:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st7;
tr94:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st7;
tr86:
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st7;
tr87:
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st7;
tr88:
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st7;
st7:
	if ( ++p == pe )
		goto _test_eof7;
case 7:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st7;
		case 32: goto st7;
		case 40: goto tr93;
		case 41: goto tr94;
		case 1802: goto tr95;
		case 1851: goto tr96;
		case 2058: goto tr95;
		case 2107: goto tr96;
	}
	goto tr91;
tr96:
	{
		s->buffer_length = 0;
	}
	goto st8;
tr90:
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		s->buffer_length = 0;
	}
	goto st8;
tr97:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st8;
tr878:
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		s->buffer_length = 0;
	}
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st8;
tr882:
	{
		s->buffer_length = 0;
	}
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st8;
st8:
	if ( ++p == pe )
		goto _test_eof8;
case 8:
	if ( (*p) == 10 )
		goto tr98;
	goto tr97;
tr80:
	{
		if (pe - p == 1) {
			*wrap = WRAP_DETECTED;
		}
	}
	goto st9;
st9:
	if ( ++p == pe )
		goto _test_eof9;
case 9:
	if ( (*p) == 35 )
		goto tr100;
	goto tr99;
tr82:
	{
		s->buffer_length = 0;
	}
	goto st10;
tr71:
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr101:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st10;
tr170:
	{ s->r_type = KNOT_RRTYPE_CAA; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr192:
	{ s->r_type = KNOT_RRTYPE_CDNSKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr200:
	{ s->r_type = KNOT_RRTYPE_CDS; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr210:
	{ s->r_type = KNOT_RRTYPE_CERT; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr221:
	{ s->r_type = KNOT_RRTYPE_CNAME; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr232:
	{ s->r_type = KNOT_RRTYPE_CSYNC; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr246:
	{ s->r_type = KNOT_RRTYPE_DHCID; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr258:
	{ s->r_type = KNOT_RRTYPE_DNAME; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr269:
	{ s->r_type = KNOT_RRTYPE_DNSKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr278:
	{ s->r_type = KNOT_RRTYPE_DS; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr288:
	{ s->r_type = KNOT_RRTYPE_DSYNC; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr301:
	{ s->r_type = KNOT_RRTYPE_EUI48; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr310:
	{ s->r_type = KNOT_RRTYPE_EUI64; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr323:
	{ s->r_type = KNOT_RRTYPE_HINFO; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr334:
	{ s->r_type = KNOT_RRTYPE_HTTPS; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr378:
	{ s->r_type = KNOT_RRTYPE_IPSECKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr389:
	{ s->r_type = KNOT_RRTYPE_KEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr397:
	{ s->r_type = KNOT_RRTYPE_KX; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr410:
	{ s->r_type = KNOT_RRTYPE_L32; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr419:
	{ s->r_type = KNOT_RRTYPE_L64; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr428:
	{ s->r_type = KNOT_RRTYPE_LOC; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr436:
	{ s->r_type = KNOT_RRTYPE_LP; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr449:
	{ s->r_type = KNOT_RRTYPE_MINFO; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr457:
	{ s->r_type = KNOT_RRTYPE_MX; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr471:
	{ s->r_type = KNOT_RRTYPE_NAPTR; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr480:
	{ s->r_type = KNOT_RRTYPE_NID; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr489:
	{ s->r_type = KNOT_RRTYPE_NS; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr499:
	{ s->r_type = KNOT_RRTYPE_NSEC; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr508:
	{ s->r_type = KNOT_RRTYPE_NSEC3; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr520:
	{ s->r_type = KNOT_RRTYPE_NSEC3PARAM; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr537:
	{ s->r_type = KNOT_RRTYPE_OPENPGPKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr547:
	{ s->r_type = KNOT_RRTYPE_PTR; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr558:
	{ s->r_type = KNOT_RRTYPE_RP; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr569:
	{ s->r_type = KNOT_RRTYPE_RRSIG; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr577:
	{ s->r_type = KNOT_RRTYPE_RT; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr595:
	{ s->r_type = KNOT_RRTYPE_SMIMEA; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr604:
	{ s->r_type = KNOT_RRTYPE_SOA; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr613:
	{ s->r_type = KNOT_RRTYPE_SPF; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr622:
	{ s->r_type = KNOT_RRTYPE_SRV; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr633:
	{ s->r_type = KNOT_RRTYPE_SSHFP; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr643:
	{ s->r_type = KNOT_RRTYPE_SVCB; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr656:
	{ s->r_type = KNOT_RRTYPE_TLSA; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr665:
	{ s->r_type = KNOT_RRTYPE_TXT; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr679:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_type = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr689:
	{ s->r_type = KNOT_RRTYPE_URI; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr702:
	{ s->r_type = KNOT_RRTYPE_WALLET; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr715:
	{ s->r_type = KNOT_RRTYPE_ZONEMD; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr966:
	{ s->r_type = KNOT_RRTYPE_AAAA; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr977:
	{ s->r_type = KNOT_RRTYPE_AFSDB; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
tr986:
	{ s->r_type = KNOT_RRTYPE_APL; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	goto st10;
st10:
	if ( ++p == pe )
		goto _test_eof10;
case 10:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr102;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr101;
	goto tr77;
tr73:
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr83:
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr172:
	{ s->r_type = KNOT_RRTYPE_CAA; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr194:
	{ s->r_type = KNOT_RRTYPE_CDNSKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr202:
	{ s->r_type = KNOT_RRTYPE_CDS; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr212:
	{ s->r_type = KNOT_RRTYPE_CERT; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr223:
	{ s->r_type = KNOT_RRTYPE_CNAME; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr234:
	{ s->r_type = KNOT_RRTYPE_CSYNC; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr248:
	{ s->r_type = KNOT_RRTYPE_DHCID; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr260:
	{ s->r_type = KNOT_RRTYPE_DNAME; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr271:
	{ s->r_type = KNOT_RRTYPE_DNSKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr280:
	{ s->r_type = KNOT_RRTYPE_DS; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr290:
	{ s->r_type = KNOT_RRTYPE_DSYNC; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr303:
	{ s->r_type = KNOT_RRTYPE_EUI48; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr312:
	{ s->r_type = KNOT_RRTYPE_EUI64; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr325:
	{ s->r_type = KNOT_RRTYPE_HINFO; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr336:
	{ s->r_type = KNOT_RRTYPE_HTTPS; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr380:
	{ s->r_type = KNOT_RRTYPE_IPSECKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr391:
	{ s->r_type = KNOT_RRTYPE_KEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr399:
	{ s->r_type = KNOT_RRTYPE_KX; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr412:
	{ s->r_type = KNOT_RRTYPE_L32; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr421:
	{ s->r_type = KNOT_RRTYPE_L64; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr430:
	{ s->r_type = KNOT_RRTYPE_LOC; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr438:
	{ s->r_type = KNOT_RRTYPE_LP; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr451:
	{ s->r_type = KNOT_RRTYPE_MINFO; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr459:
	{ s->r_type = KNOT_RRTYPE_MX; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr473:
	{ s->r_type = KNOT_RRTYPE_NAPTR; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr482:
	{ s->r_type = KNOT_RRTYPE_NID; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr491:
	{ s->r_type = KNOT_RRTYPE_NS; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr501:
	{ s->r_type = KNOT_RRTYPE_NSEC; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr510:
	{ s->r_type = KNOT_RRTYPE_NSEC3; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr522:
	{ s->r_type = KNOT_RRTYPE_NSEC3PARAM; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr539:
	{ s->r_type = KNOT_RRTYPE_OPENPGPKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr549:
	{ s->r_type = KNOT_RRTYPE_PTR; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr560:
	{ s->r_type = KNOT_RRTYPE_RP; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr571:
	{ s->r_type = KNOT_RRTYPE_RRSIG; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr579:
	{ s->r_type = KNOT_RRTYPE_RT; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr597:
	{ s->r_type = KNOT_RRTYPE_SMIMEA; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr606:
	{ s->r_type = KNOT_RRTYPE_SOA; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr615:
	{ s->r_type = KNOT_RRTYPE_SPF; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr624:
	{ s->r_type = KNOT_RRTYPE_SRV; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr635:
	{ s->r_type = KNOT_RRTYPE_SSHFP; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr645:
	{ s->r_type = KNOT_RRTYPE_SVCB; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr658:
	{ s->r_type = KNOT_RRTYPE_TLSA; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr667:
	{ s->r_type = KNOT_RRTYPE_TXT; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr681:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_type = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr691:
	{ s->r_type = KNOT_RRTYPE_URI; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr704:
	{ s->r_type = KNOT_RRTYPE_WALLET; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr717:
	{ s->r_type = KNOT_RRTYPE_ZONEMD; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr968:
	{ s->r_type = KNOT_RRTYPE_AAAA; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr979:
	{ s->r_type = KNOT_RRTYPE_AFSDB; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
tr988:
	{ s->r_type = KNOT_RRTYPE_APL; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 11;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 11;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 11;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 11;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 11;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 11;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 11;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 11;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 11;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 11;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 11;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 11;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 11;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 11;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 11;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 11;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 11;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 11;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 11;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 11;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 11;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 11;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 11;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 11;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 11;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 11;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 11;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 11;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 11;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 11;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 11;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 11;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 11;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st11;
st11:
	if ( ++p == pe )
		goto _test_eof11;
case 11:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr103;
		case 32: goto tr103;
		case 40: goto tr104;
		case 41: goto tr105;
		case 92: goto tr80;
		case 2826: goto tr89;
		case 2875: goto tr90;
		case 3082: goto tr89;
		case 3131: goto tr106;
		case 3338: goto tr107;
		case 3387: goto tr108;
		case 3594: goto tr89;
		case 3643: goto tr109;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr75;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr75;
	} else
		goto tr75;
	goto tr85;
tr111:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st12;
tr112:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st12;
tr103:
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st12;
tr104:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st12;
tr105:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st12;
st12:
	if ( ++p == pe )
		goto _test_eof12;
case 12:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st12;
		case 32: goto st12;
		case 40: goto tr111;
		case 41: goto tr112;
		case 92: goto tr80;
		case 2826: goto tr95;
		case 2875: goto tr96;
		case 3082: goto tr95;
		case 3131: goto tr113;
		case 3338: goto tr114;
		case 3387: goto tr115;
		case 3594: goto tr95;
		case 3643: goto tr116;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr75;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr75;
	} else
		goto tr75;
	goto tr85;
tr113:
	{
		s->buffer_length = 0;
	}
	goto st13;
tr117:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st13;
tr106:
	{
		s->buffer_length = 0;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st13;
tr177:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		s->buffer_length = 0;
	}
	goto st13;
tr181:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st13;
tr857:
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st13;
st13:
	if ( ++p == pe )
		goto _test_eof13;
case 13:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 1802: goto tr98;
		case 2058: goto tr118;
	}
	if ( _widec > 1919 ) {
		if ( 1920 <= _widec && _widec <= 2175 )
			goto tr117;
	} else if ( _widec >= 1664 )
		goto tr97;
	goto tr85;
tr118:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1642; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop if required from the callback.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1642; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1642; goto _out;}
		}
	}
	goto st1642;
tr865:
	{
		s->line_counter++;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop if required from the callback.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1642; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1642; goto _out;}
		}
	}
	goto st1642;
tr856:
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop if required from the callback.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1642; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1642; goto _out;}
		}
	}
	goto st1642;
st1642:
	if ( ++p == pe )
		goto _test_eof1642;
case 1642:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr4793;
		case 32: goto tr4793;
		case 36: goto tr4794;
		case 40: goto tr4795;
		case 41: goto tr4796;
		case 42: goto tr4797;
		case 58: goto tr75;
		case 92: goto tr4798;
		case 95: goto tr4797;
		case 2826: goto tr4789;
		case 2875: goto tr4790;
		case 3082: goto tr4799;
		case 3131: goto tr4800;
		case 3338: goto tr4801;
		case 3387: goto tr4802;
		case 3594: goto tr4803;
		case 3643: goto tr4804;
	}
	if ( _widec < 60 ) {
		if ( _widec < 11 ) {
			if ( _widec <= 8 )
				goto tr75;
		} else if ( _widec > 44 ) {
			if ( 45 <= _widec && _widec <= 57 )
				goto tr4797;
		} else
			goto tr75;
	} else if ( _widec > 63 ) {
		if ( _widec < 91 ) {
			if ( 64 <= _widec && _widec <= 90 )
				goto tr4797;
		} else if ( _widec > 96 ) {
			if ( _widec > 122 ) {
				if ( 123 <= _widec )
					goto tr75;
			} else if ( _widec >= 97 )
				goto tr4797;
		} else
			goto tr75;
	} else
		goto tr75;
	goto tr900;
tr121:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st14;
tr122:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st14;
tr4793:
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st14;
tr4795:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st14;
tr4796:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st14;
st14:
	if ( ++p == pe )
		goto _test_eof14;
case 14:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st14;
		case 32: goto st14;
		case 40: goto tr121;
		case 41: goto tr122;
		case 58: goto tr75;
		case 65: goto tr124;
		case 67: goto tr125;
		case 68: goto tr126;
		case 69: goto tr127;
		case 72: goto tr128;
		case 73: goto tr129;
		case 75: goto tr130;
		case 76: goto tr131;
		case 77: goto tr132;
		case 78: goto tr133;
		case 79: goto tr134;
		case 80: goto tr135;
		case 82: goto tr136;
		case 83: goto tr137;
		case 84: goto tr138;
		case 85: goto tr139;
		case 87: goto tr140;
		case 90: goto tr141;
		case 92: goto tr80;
		case 97: goto tr124;
		case 99: goto tr125;
		case 100: goto tr126;
		case 101: goto tr127;
		case 104: goto tr128;
		case 105: goto tr129;
		case 107: goto tr130;
		case 108: goto tr131;
		case 109: goto tr132;
		case 110: goto tr133;
		case 111: goto tr134;
		case 112: goto tr135;
		case 114: goto tr136;
		case 115: goto tr137;
		case 116: goto tr138;
		case 117: goto tr139;
		case 119: goto tr140;
		case 122: goto tr141;
		case 2826: goto tr23;
		case 2875: goto tr24;
		case 3082: goto tr142;
		case 3131: goto tr143;
		case 3338: goto tr144;
		case 3387: goto tr145;
		case 3594: goto tr146;
		case 3643: goto tr147;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr75;
	} else if ( _widec > 47 ) {
		if ( _widec > 57 ) {
			if ( 60 <= _widec )
				goto tr75;
		} else if ( _widec >= 48 )
			goto tr123;
	} else
		goto tr75;
	goto tr120;
tr123:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 15;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 15;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 15;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 15;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 15;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 15;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 15;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 15;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 15;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 15;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 15;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 15;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 15;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 15;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 15;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 15;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 15;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 15;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 15;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 15;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 15;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 15;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 15;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 15;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 15;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 15;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 15;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 15;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 15;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 15;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 15;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 15;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 15;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st15;
st15:
	if ( ++p == pe )
		goto _test_eof15;
case 15:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr149;
		case 32: goto tr149;
		case 40: goto tr150;
		case 41: goto tr151;
		case 68: goto tr32;
		case 72: goto tr33;
		case 77: goto tr34;
		case 83: goto st207;
		case 87: goto tr36;
		case 100: goto tr32;
		case 104: goto tr33;
		case 109: goto tr34;
		case 115: goto st207;
		case 119: goto tr36;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr152;
		case 2107: goto tr153;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr31;
	goto tr148;
tr156:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st16;
tr157:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st16;
tr149:
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st16;
tr150:
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st16;
tr151:
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st16;
st16:
	if ( ++p == pe )
		goto _test_eof16;
case 16:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st16;
		case 32: goto st16;
		case 40: goto tr156;
		case 41: goto tr157;
		case 65: goto tr43;
		case 67: goto tr44;
		case 68: goto tr45;
		case 69: goto tr46;
		case 72: goto tr47;
		case 73: goto tr48;
		case 75: goto tr49;
		case 76: goto tr50;
		case 77: goto tr51;
		case 78: goto tr52;
		case 79: goto tr53;
		case 80: goto tr54;
		case 82: goto tr55;
		case 83: goto tr56;
		case 84: goto tr57;
		case 85: goto tr58;
		case 87: goto tr59;
		case 90: goto tr60;
		case 97: goto tr43;
		case 99: goto tr44;
		case 100: goto tr45;
		case 101: goto tr46;
		case 104: goto tr47;
		case 105: goto tr48;
		case 107: goto tr49;
		case 108: goto tr50;
		case 109: goto tr51;
		case 110: goto tr52;
		case 111: goto tr53;
		case 112: goto tr54;
		case 114: goto tr55;
		case 115: goto tr56;
		case 116: goto tr57;
		case 117: goto tr58;
		case 119: goto tr59;
		case 122: goto tr60;
		case 1802: goto tr95;
		case 1851: goto tr96;
		case 2058: goto tr158;
		case 2107: goto tr159;
	}
	goto tr154;
tr6:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	goto st17;
tr44:
	{
		s->r_class = s->default_class;
	}
	goto st17;
tr737:
	{
		s->r_ttl = s->default_ttl;
	}
	goto st17;
st17:
	if ( ++p == pe )
		goto _test_eof17;
case 17:
	switch( (*p) ) {
		case 65: goto st18;
		case 68: goto st22;
		case 69: goto st29;
		case 78: goto st32;
		case 83: goto st36;
		case 97: goto st18;
		case 100: goto st22;
		case 101: goto st29;
		case 110: goto st32;
		case 115: goto st36;
	}
	goto tr39;
st18:
	if ( ++p == pe )
		goto _test_eof18;
case 18:
	switch( (*p) ) {
		case 65: goto st19;
		case 97: goto st19;
	}
	goto tr39;
st19:
	if ( ++p == pe )
		goto _test_eof19;
case 19:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr166;
		case 32: goto tr166;
		case 40: goto tr167;
		case 41: goto tr168;
		case 3082: goto tr169;
		case 3131: goto tr170;
		case 3338: goto tr171;
		case 3387: goto tr171;
		case 3594: goto tr172;
		case 3643: goto tr173;
	}
	goto tr63;
tr74:
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr84:
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr173:
	{ s->r_type = KNOT_RRTYPE_CAA; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr195:
	{ s->r_type = KNOT_RRTYPE_CDNSKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr203:
	{ s->r_type = KNOT_RRTYPE_CDS; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr213:
	{ s->r_type = KNOT_RRTYPE_CERT; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr224:
	{ s->r_type = KNOT_RRTYPE_CNAME; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr235:
	{ s->r_type = KNOT_RRTYPE_CSYNC; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr249:
	{ s->r_type = KNOT_RRTYPE_DHCID; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr261:
	{ s->r_type = KNOT_RRTYPE_DNAME; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr272:
	{ s->r_type = KNOT_RRTYPE_DNSKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr281:
	{ s->r_type = KNOT_RRTYPE_DS; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr291:
	{ s->r_type = KNOT_RRTYPE_DSYNC; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr304:
	{ s->r_type = KNOT_RRTYPE_EUI48; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr313:
	{ s->r_type = KNOT_RRTYPE_EUI64; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr326:
	{ s->r_type = KNOT_RRTYPE_HINFO; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr337:
	{ s->r_type = KNOT_RRTYPE_HTTPS; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr381:
	{ s->r_type = KNOT_RRTYPE_IPSECKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr392:
	{ s->r_type = KNOT_RRTYPE_KEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr400:
	{ s->r_type = KNOT_RRTYPE_KX; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr413:
	{ s->r_type = KNOT_RRTYPE_L32; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr422:
	{ s->r_type = KNOT_RRTYPE_L64; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr431:
	{ s->r_type = KNOT_RRTYPE_LOC; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr439:
	{ s->r_type = KNOT_RRTYPE_LP; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr452:
	{ s->r_type = KNOT_RRTYPE_MINFO; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr460:
	{ s->r_type = KNOT_RRTYPE_MX; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr474:
	{ s->r_type = KNOT_RRTYPE_NAPTR; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr483:
	{ s->r_type = KNOT_RRTYPE_NID; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr492:
	{ s->r_type = KNOT_RRTYPE_NS; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr502:
	{ s->r_type = KNOT_RRTYPE_NSEC; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr511:
	{ s->r_type = KNOT_RRTYPE_NSEC3; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr523:
	{ s->r_type = KNOT_RRTYPE_NSEC3PARAM; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr540:
	{ s->r_type = KNOT_RRTYPE_OPENPGPKEY; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr550:
	{ s->r_type = KNOT_RRTYPE_PTR; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr561:
	{ s->r_type = KNOT_RRTYPE_RP; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr572:
	{ s->r_type = KNOT_RRTYPE_RRSIG; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr580:
	{ s->r_type = KNOT_RRTYPE_RT; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr598:
	{ s->r_type = KNOT_RRTYPE_SMIMEA; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr607:
	{ s->r_type = KNOT_RRTYPE_SOA; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr616:
	{ s->r_type = KNOT_RRTYPE_SPF; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr625:
	{ s->r_type = KNOT_RRTYPE_SRV; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr636:
	{ s->r_type = KNOT_RRTYPE_SSHFP; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr646:
	{ s->r_type = KNOT_RRTYPE_SVCB; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr659:
	{ s->r_type = KNOT_RRTYPE_TLSA; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr668:
	{ s->r_type = KNOT_RRTYPE_TXT; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr682:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_type = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr692:
	{ s->r_type = KNOT_RRTYPE_URI; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr705:
	{ s->r_type = KNOT_RRTYPE_WALLET; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr718:
	{ s->r_type = KNOT_RRTYPE_ZONEMD; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr969:
	{ s->r_type = KNOT_RRTYPE_AAAA; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr980:
	{ s->r_type = KNOT_RRTYPE_AFSDB; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
tr989:
	{ s->r_type = KNOT_RRTYPE_APL; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 20;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 20;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 20;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 20;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 20;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 20;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 20;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 20;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 20;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 20;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 20;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 20;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 20;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 20;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 20;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 20;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 20;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 20;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 20;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 20;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 20;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 20;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 20;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 20;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 20;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 20;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 20;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 20;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 20;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 20;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 20;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 20;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 20;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st20;
st20:
	if ( ++p == pe )
		goto _test_eof20;
case 20:
	_widec = (*p);
	if ( (*p) < 11 ) {
		if ( (*p) > 9 ) {
			if ( 10 <= (*p) && (*p) <= 10 ) {
				_widec = (short)(1664 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 58 ) {
		if ( (*p) > 59 ) {
			if ( 60 <= (*p) )
 {				_widec = (short)(1664 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else if ( (*p) >= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 1801: goto tr86;
		case 1802: goto tr89;
		case 1824: goto tr86;
		case 1832: goto tr87;
		case 1833: goto tr88;
		case 1851: goto tr90;
		case 2057: goto tr174;
		case 2058: goto tr89;
		case 2080: goto tr174;
		case 2088: goto tr175;
		case 2089: goto tr176;
		case 2107: goto tr177;
	}
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr101;
	goto tr85;
tr178:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st21;
tr174:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st21;
tr175:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st21;
tr176:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st21;
tr179:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st21;
tr180:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st21;
st21:
	if ( ++p == pe )
		goto _test_eof21;
case 21:
	_widec = (*p);
	if ( (*p) < 11 ) {
		if ( (*p) > 9 ) {
			if ( 10 <= (*p) && (*p) <= 10 ) {
				_widec = (short)(1664 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 58 ) {
		if ( (*p) > 59 ) {
			if ( 60 <= (*p) )
 {				_widec = (short)(1664 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else if ( (*p) >= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 1801: goto st7;
		case 1802: goto tr95;
		case 1824: goto st7;
		case 1832: goto tr93;
		case 1833: goto tr94;
		case 1851: goto tr96;
		case 2057: goto tr178;
		case 2058: goto tr95;
		case 2080: goto tr178;
		case 2088: goto tr179;
		case 2089: goto tr180;
		case 2107: goto tr181;
	}
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr101;
	goto tr85;
st22:
	if ( ++p == pe )
		goto _test_eof22;
case 22:
	switch( (*p) ) {
		case 78: goto st23;
		case 83: goto st28;
		case 110: goto st23;
		case 115: goto st28;
	}
	goto tr39;
st23:
	if ( ++p == pe )
		goto _test_eof23;
case 23:
	switch( (*p) ) {
		case 83: goto st24;
		case 115: goto st24;
	}
	goto tr39;
st24:
	if ( ++p == pe )
		goto _test_eof24;
case 24:
	switch( (*p) ) {
		case 75: goto st25;
		case 107: goto st25;
	}
	goto tr39;
st25:
	if ( ++p == pe )
		goto _test_eof25;
case 25:
	switch( (*p) ) {
		case 69: goto st26;
		case 101: goto st26;
	}
	goto tr39;
st26:
	if ( ++p == pe )
		goto _test_eof26;
case 26:
	switch( (*p) ) {
		case 89: goto st27;
		case 121: goto st27;
	}
	goto tr39;
st27:
	if ( ++p == pe )
		goto _test_eof27;
case 27:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr188;
		case 32: goto tr188;
		case 40: goto tr189;
		case 41: goto tr190;
		case 3082: goto tr191;
		case 3131: goto tr192;
		case 3338: goto tr193;
		case 3387: goto tr193;
		case 3594: goto tr194;
		case 3643: goto tr195;
	}
	goto tr63;
st28:
	if ( ++p == pe )
		goto _test_eof28;
case 28:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr196;
		case 32: goto tr196;
		case 40: goto tr197;
		case 41: goto tr198;
		case 3082: goto tr199;
		case 3131: goto tr200;
		case 3338: goto tr201;
		case 3387: goto tr201;
		case 3594: goto tr202;
		case 3643: goto tr203;
	}
	goto tr63;
st29:
	if ( ++p == pe )
		goto _test_eof29;
case 29:
	switch( (*p) ) {
		case 82: goto st30;
		case 114: goto st30;
	}
	goto tr39;
st30:
	if ( ++p == pe )
		goto _test_eof30;
case 30:
	switch( (*p) ) {
		case 84: goto st31;
		case 116: goto st31;
	}
	goto tr39;
st31:
	if ( ++p == pe )
		goto _test_eof31;
case 31:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr206;
		case 32: goto tr206;
		case 40: goto tr207;
		case 41: goto tr208;
		case 3082: goto tr209;
		case 3131: goto tr210;
		case 3338: goto tr211;
		case 3387: goto tr211;
		case 3594: goto tr212;
		case 3643: goto tr213;
	}
	goto tr63;
st32:
	if ( ++p == pe )
		goto _test_eof32;
case 32:
	switch( (*p) ) {
		case 65: goto st33;
		case 97: goto st33;
	}
	goto tr39;
st33:
	if ( ++p == pe )
		goto _test_eof33;
case 33:
	switch( (*p) ) {
		case 77: goto st34;
		case 109: goto st34;
	}
	goto tr39;
st34:
	if ( ++p == pe )
		goto _test_eof34;
case 34:
	switch( (*p) ) {
		case 69: goto st35;
		case 101: goto st35;
	}
	goto tr39;
st35:
	if ( ++p == pe )
		goto _test_eof35;
case 35:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr217;
		case 32: goto tr217;
		case 40: goto tr218;
		case 41: goto tr219;
		case 3082: goto tr220;
		case 3131: goto tr221;
		case 3338: goto tr222;
		case 3387: goto tr222;
		case 3594: goto tr223;
		case 3643: goto tr224;
	}
	goto tr63;
st36:
	if ( ++p == pe )
		goto _test_eof36;
case 36:
	switch( (*p) ) {
		case 89: goto st37;
		case 121: goto st37;
	}
	goto tr39;
st37:
	if ( ++p == pe )
		goto _test_eof37;
case 37:
	switch( (*p) ) {
		case 78: goto st38;
		case 110: goto st38;
	}
	goto tr39;
st38:
	if ( ++p == pe )
		goto _test_eof38;
case 38:
	switch( (*p) ) {
		case 67: goto st39;
		case 99: goto st39;
	}
	goto tr39;
st39:
	if ( ++p == pe )
		goto _test_eof39;
case 39:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr228;
		case 32: goto tr228;
		case 40: goto tr229;
		case 41: goto tr230;
		case 3082: goto tr231;
		case 3131: goto tr232;
		case 3338: goto tr233;
		case 3387: goto tr233;
		case 3594: goto tr234;
		case 3643: goto tr235;
	}
	goto tr63;
tr7:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	goto st40;
tr45:
	{
		s->r_class = s->default_class;
	}
	goto st40;
tr738:
	{
		s->r_ttl = s->default_ttl;
	}
	goto st40;
st40:
	if ( ++p == pe )
		goto _test_eof40;
case 40:
	switch( (*p) ) {
		case 72: goto st41;
		case 78: goto st45;
		case 83: goto st53;
		case 104: goto st41;
		case 110: goto st45;
		case 115: goto st53;
	}
	goto tr39;
st41:
	if ( ++p == pe )
		goto _test_eof41;
case 41:
	switch( (*p) ) {
		case 67: goto st42;
		case 99: goto st42;
	}
	goto tr39;
st42:
	if ( ++p == pe )
		goto _test_eof42;
case 42:
	switch( (*p) ) {
		case 73: goto st43;
		case 105: goto st43;
	}
	goto tr39;
st43:
	if ( ++p == pe )
		goto _test_eof43;
case 43:
	switch( (*p) ) {
		case 68: goto st44;
		case 100: goto st44;
	}
	goto tr39;
st44:
	if ( ++p == pe )
		goto _test_eof44;
case 44:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr242;
		case 32: goto tr242;
		case 40: goto tr243;
		case 41: goto tr244;
		case 3082: goto tr245;
		case 3131: goto tr246;
		case 3338: goto tr247;
		case 3387: goto tr247;
		case 3594: goto tr248;
		case 3643: goto tr249;
	}
	goto tr63;
st45:
	if ( ++p == pe )
		goto _test_eof45;
case 45:
	switch( (*p) ) {
		case 65: goto st46;
		case 83: goto st49;
		case 97: goto st46;
		case 115: goto st49;
	}
	goto tr39;
st46:
	if ( ++p == pe )
		goto _test_eof46;
case 46:
	switch( (*p) ) {
		case 77: goto st47;
		case 109: goto st47;
	}
	goto tr39;
st47:
	if ( ++p == pe )
		goto _test_eof47;
case 47:
	switch( (*p) ) {
		case 69: goto st48;
		case 101: goto st48;
	}
	goto tr39;
st48:
	if ( ++p == pe )
		goto _test_eof48;
case 48:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr254;
		case 32: goto tr254;
		case 40: goto tr255;
		case 41: goto tr256;
		case 3082: goto tr257;
		case 3131: goto tr258;
		case 3338: goto tr259;
		case 3387: goto tr259;
		case 3594: goto tr260;
		case 3643: goto tr261;
	}
	goto tr63;
st49:
	if ( ++p == pe )
		goto _test_eof49;
case 49:
	switch( (*p) ) {
		case 75: goto st50;
		case 107: goto st50;
	}
	goto tr39;
st50:
	if ( ++p == pe )
		goto _test_eof50;
case 50:
	switch( (*p) ) {
		case 69: goto st51;
		case 101: goto st51;
	}
	goto tr39;
st51:
	if ( ++p == pe )
		goto _test_eof51;
case 51:
	switch( (*p) ) {
		case 89: goto st52;
		case 121: goto st52;
	}
	goto tr39;
st52:
	if ( ++p == pe )
		goto _test_eof52;
case 52:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr265;
		case 32: goto tr265;
		case 40: goto tr266;
		case 41: goto tr267;
		case 3082: goto tr268;
		case 3131: goto tr269;
		case 3338: goto tr270;
		case 3387: goto tr270;
		case 3594: goto tr271;
		case 3643: goto tr272;
	}
	goto tr63;
st53:
	if ( ++p == pe )
		goto _test_eof53;
case 53:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr273;
		case 32: goto tr273;
		case 40: goto tr274;
		case 41: goto tr275;
		case 89: goto st54;
		case 121: goto st54;
		case 3082: goto tr277;
		case 3131: goto tr278;
		case 3338: goto tr279;
		case 3387: goto tr279;
		case 3594: goto tr280;
		case 3643: goto tr281;
	}
	goto tr63;
st54:
	if ( ++p == pe )
		goto _test_eof54;
case 54:
	switch( (*p) ) {
		case 78: goto st55;
		case 110: goto st55;
	}
	goto tr39;
st55:
	if ( ++p == pe )
		goto _test_eof55;
case 55:
	switch( (*p) ) {
		case 67: goto st56;
		case 99: goto st56;
	}
	goto tr39;
st56:
	if ( ++p == pe )
		goto _test_eof56;
case 56:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr284;
		case 32: goto tr284;
		case 40: goto tr285;
		case 41: goto tr286;
		case 3082: goto tr287;
		case 3131: goto tr288;
		case 3338: goto tr289;
		case 3387: goto tr289;
		case 3594: goto tr290;
		case 3643: goto tr291;
	}
	goto tr63;
tr8:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	goto st57;
tr46:
	{
		s->r_class = s->default_class;
	}
	goto st57;
tr739:
	{
		s->r_ttl = s->default_ttl;
	}
	goto st57;
st57:
	if ( ++p == pe )
		goto _test_eof57;
case 57:
	switch( (*p) ) {
		case 85: goto st58;
		case 117: goto st58;
	}
	goto tr39;
st58:
	if ( ++p == pe )
		goto _test_eof58;
case 58:
	switch( (*p) ) {
		case 73: goto st59;
		case 105: goto st59;
	}
	goto tr39;
st59:
	if ( ++p == pe )
		goto _test_eof59;
case 59:
	switch( (*p) ) {
		case 52: goto st60;
		case 54: goto st62;
	}
	goto tr39;
st60:
	if ( ++p == pe )
		goto _test_eof60;
case 60:
	if ( (*p) == 56 )
		goto st61;
	goto tr39;
st61:
	if ( ++p == pe )
		goto _test_eof61;
case 61:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr297;
		case 32: goto tr297;
		case 40: goto tr298;
		case 41: goto tr299;
		case 3082: goto tr300;
		case 3131: goto tr301;
		case 3338: goto tr302;
		case 3387: goto tr302;
		case 3594: goto tr303;
		case 3643: goto tr304;
	}
	goto tr63;
st62:
	if ( ++p == pe )
		goto _test_eof62;
case 62:
	if ( (*p) == 52 )
		goto st63;
	goto tr39;
st63:
	if ( ++p == pe )
		goto _test_eof63;
case 63:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr306;
		case 32: goto tr306;
		case 40: goto tr307;
		case 41: goto tr308;
		case 3082: goto tr309;
		case 3131: goto tr310;
		case 3338: goto tr311;
		case 3387: goto tr311;
		case 3594: goto tr312;
		case 3643: goto tr313;
	}
	goto tr63;
tr9:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	goto st64;
tr47:
	{
		s->r_class = s->default_class;
	}
	goto st64;
tr740:
	{
		s->r_ttl = s->default_ttl;
	}
	goto st64;
st64:
	if ( ++p == pe )
		goto _test_eof64;
case 64:
	switch( (*p) ) {
		case 73: goto st65;
		case 84: goto st69;
		case 105: goto st65;
		case 116: goto st69;
	}
	goto tr39;
st65:
	if ( ++p == pe )
		goto _test_eof65;
case 65:
	switch( (*p) ) {
		case 78: goto st66;
		case 110: goto st66;
	}
	goto tr39;
st66:
	if ( ++p == pe )
		goto _test_eof66;
case 66:
	switch( (*p) ) {
		case 70: goto st67;
		case 102: goto st67;
	}
	goto tr39;
st67:
	if ( ++p == pe )
		goto _test_eof67;
case 67:
	switch( (*p) ) {
		case 79: goto st68;
		case 111: goto st68;
	}
	goto tr39;
st68:
	if ( ++p == pe )
		goto _test_eof68;
case 68:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr319;
		case 32: goto tr319;
		case 40: goto tr320;
		case 41: goto tr321;
		case 3082: goto tr322;
		case 3131: goto tr323;
		case 3338: goto tr324;
		case 3387: goto tr324;
		case 3594: goto tr325;
		case 3643: goto tr326;
	}
	goto tr63;
st69:
	if ( ++p == pe )
		goto _test_eof69;
case 69:
	switch( (*p) ) {
		case 84: goto st70;
		case 116: goto st70;
	}
	goto tr39;
st70:
	if ( ++p == pe )
		goto _test_eof70;
case 70:
	switch( (*p) ) {
		case 80: goto st71;
		case 112: goto st71;
	}
	goto tr39;
st71:
	if ( ++p == pe )
		goto _test_eof71;
case 71:
	switch( (*p) ) {
		case 83: goto st72;
		case 115: goto st72;
	}
	goto tr39;
st72:
	if ( ++p == pe )
		goto _test_eof72;
case 72:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr330;
		case 32: goto tr330;
		case 40: goto tr331;
		case 41: goto tr332;
		case 3082: goto tr333;
		case 3131: goto tr334;
		case 3338: goto tr335;
		case 3387: goto tr335;
		case 3594: goto tr336;
		case 3643: goto tr337;
	}
	goto tr63;
tr48:
	{
		s->r_class = s->default_class;
	}
	goto st73;
st73:
	if ( ++p == pe )
		goto _test_eof73;
case 73:
	switch( (*p) ) {
		case 78: goto st74;
		case 80: goto st77;
		case 110: goto st74;
		case 112: goto st77;
	}
	goto tr39;
st74:
	if ( ++p == pe )
		goto _test_eof74;
case 74:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr340;
		case 32: goto tr340;
		case 40: goto tr341;
		case 41: goto tr342;
		case 2058: goto tr343;
		case 2107: goto tr344;
	}
	goto tr39;
tr346:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st75;
tr347:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st75;
tr366:
	{
		s->line_counter++;
	}
	goto st75;
tr756:
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st75;
tr757:
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st75;
tr758:
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st75;
tr765:
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st75;
tr720:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 75; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st75;
tr340:
	{
		s->r_class = KNOT_CLASS_IN;
	}
	goto st75;
tr341:
	{
		s->r_class = KNOT_CLASS_IN;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st75;
tr342:
	{
		s->r_class = KNOT_CLASS_IN;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st75;
tr343:
	{
		s->r_class = KNOT_CLASS_IN;
	}
	{
		s->line_counter++;
	}
	goto st75;
tr774:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st75;
tr775:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st75;
tr776:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st75;
tr778:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st75;
st75:
	if ( ++p == pe )
		goto _test_eof75;
case 75:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st75;
		case 32: goto st75;
		case 40: goto tr346;
		case 41: goto tr347;
		case 65: goto st4;
		case 67: goto st17;
		case 68: goto st40;
		case 69: goto st57;
		case 72: goto st64;
		case 73: goto st76;
		case 75: goto st84;
		case 76: goto st88;
		case 77: goto st96;
		case 78: goto st102;
		case 79: goto st118;
		case 80: goto st128;
		case 82: goto st131;
		case 83: goto st138;
		case 84: goto st157;
		case 85: goto st167;
		case 87: goto st170;
		case 90: goto st176;
		case 97: goto st4;
		case 99: goto st17;
		case 100: goto st40;
		case 101: goto st57;
		case 104: goto st64;
		case 105: goto st76;
		case 107: goto st84;
		case 108: goto st88;
		case 109: goto st96;
		case 110: goto st102;
		case 111: goto st118;
		case 112: goto st128;
		case 114: goto st131;
		case 115: goto st138;
		case 116: goto st157;
		case 117: goto st167;
		case 119: goto st170;
		case 122: goto st176;
		case 2058: goto tr366;
		case 2107: goto tr367;
	}
	goto tr39;
tr741:
	{
		s->r_ttl = s->default_ttl;
	}
	goto st76;
st76:
	if ( ++p == pe )
		goto _test_eof76;
case 76:
	switch( (*p) ) {
		case 80: goto st77;
		case 112: goto st77;
	}
	goto tr39;
st77:
	if ( ++p == pe )
		goto _test_eof77;
case 77:
	switch( (*p) ) {
		case 83: goto st78;
		case 115: goto st78;
	}
	goto tr39;
st78:
	if ( ++p == pe )
		goto _test_eof78;
case 78:
	switch( (*p) ) {
		case 69: goto st79;
		case 101: goto st79;
	}
	goto tr39;
st79:
	if ( ++p == pe )
		goto _test_eof79;
case 79:
	switch( (*p) ) {
		case 67: goto st80;
		case 99: goto st80;
	}
	goto tr39;
st80:
	if ( ++p == pe )
		goto _test_eof80;
case 80:
	switch( (*p) ) {
		case 75: goto st81;
		case 107: goto st81;
	}
	goto tr39;
st81:
	if ( ++p == pe )
		goto _test_eof81;
case 81:
	switch( (*p) ) {
		case 69: goto st82;
		case 101: goto st82;
	}
	goto tr39;
st82:
	if ( ++p == pe )
		goto _test_eof82;
case 82:
	switch( (*p) ) {
		case 89: goto st83;
		case 121: goto st83;
	}
	goto tr39;
st83:
	if ( ++p == pe )
		goto _test_eof83;
case 83:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr374;
		case 32: goto tr374;
		case 40: goto tr375;
		case 41: goto tr376;
		case 3082: goto tr377;
		case 3131: goto tr378;
		case 3338: goto tr379;
		case 3387: goto tr379;
		case 3594: goto tr380;
		case 3643: goto tr381;
	}
	goto tr63;
tr11:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	goto st84;
tr49:
	{
		s->r_class = s->default_class;
	}
	goto st84;
tr742:
	{
		s->r_ttl = s->default_ttl;
	}
	goto st84;
st84:
	if ( ++p == pe )
		goto _test_eof84;
case 84:
	switch( (*p) ) {
		case 69: goto st85;
		case 88: goto st87;
		case 101: goto st85;
		case 120: goto st87;
	}
	goto tr39;
st85:
	if ( ++p == pe )
		goto _test_eof85;
case 85:
	switch( (*p) ) {
		case 89: goto st86;
		case 121: goto st86;
	}
	goto tr39;
st86:
	if ( ++p == pe )
		goto _test_eof86;
case 86:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr385;
		case 32: goto tr385;
		case 40: goto tr386;
		case 41: goto tr387;
		case 3082: goto tr388;
		case 3131: goto tr389;
		case 3338: goto tr390;
		case 3387: goto tr390;
		case 3594: goto tr391;
		case 3643: goto tr392;
	}
	goto tr63;
st87:
	if ( ++p == pe )
		goto _test_eof87;
case 87:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr393;
		case 32: goto tr393;
		case 40: goto tr394;
		case 41: goto tr395;
		case 3082: goto tr396;
		case 3131: goto tr397;
		case 3338: goto tr398;
		case 3387: goto tr398;
		case 3594: goto tr399;
		case 3643: goto tr400;
	}
	goto tr63;
tr12:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	goto st88;
tr50:
	{
		s->r_class = s->default_class;
	}
	goto st88;
tr743:
	{
		s->r_ttl = s->default_ttl;
	}
	goto st88;
st88:
	if ( ++p == pe )
		goto _test_eof88;
case 88:
	switch( (*p) ) {
		case 51: goto st89;
		case 54: goto st91;
		case 79: goto st93;
		case 80: goto st95;
		case 111: goto st93;
		case 112: goto st95;
	}
	goto tr39;
st89:
	if ( ++p == pe )
		goto _test_eof89;
case 89:
	if ( (*p) == 50 )
		goto st90;
	goto tr39;
st90:
	if ( ++p == pe )
		goto _test_eof90;
case 90:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr406;
		case 32: goto tr406;
		case 40: goto tr407;
		case 41: goto tr408;
		case 3082: goto tr409;
		case 3131: goto tr410;
		case 3338: goto tr411;
		case 3387: goto tr411;
		case 3594: goto tr412;
		case 3643: goto tr413;
	}
	goto tr63;
st91:
	if ( ++p == pe )
		goto _test_eof91;
case 91:
	if ( (*p) == 52 )
		goto st92;
	goto tr39;
st92:
	if ( ++p == pe )
		goto _test_eof92;
case 92:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr415;
		case 32: goto tr415;
		case 40: goto tr416;
		case 41: goto tr417;
		case 3082: goto tr418;
		case 3131: goto tr419;
		case 3338: goto tr420;
		case 3387: goto tr420;
		case 3594: goto tr421;
		case 3643: goto tr422;
	}
	goto tr63;
st93:
	if ( ++p == pe )
		goto _test_eof93;
case 93:
	switch( (*p) ) {
		case 67: goto st94;
		case 99: goto st94;
	}
	goto tr39;
st94:
	if ( ++p == pe )
		goto _test_eof94;
case 94:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr424;
		case 32: goto tr424;
		case 40: goto tr425;
		case 41: goto tr426;
		case 3082: goto tr427;
		case 3131: goto tr428;
		case 3338: goto tr429;
		case 3387: goto tr429;
		case 3594: goto tr430;
		case 3643: goto tr431;
	}
	goto tr63;
st95:
	if ( ++p == pe )
		goto _test_eof95;
case 95:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr432;
		case 32: goto tr432;
		case 40: goto tr433;
		case 41: goto tr434;
		case 3082: goto tr435;
		case 3131: goto tr436;
		case 3338: goto tr437;
		case 3387: goto tr437;
		case 3594: goto tr438;
		case 3643: goto tr439;
	}
	goto tr63;
tr13:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	goto st96;
tr51:
	{
		s->r_class = s->default_class;
	}
	goto st96;
tr744:
	{
		s->r_ttl = s->default_ttl;
	}
	goto st96;
st96:
	if ( ++p == pe )
		goto _test_eof96;
case 96:
	switch( (*p) ) {
		case 73: goto st97;
		case 88: goto st101;
		case 105: goto st97;
		case 120: goto st101;
	}
	goto tr39;
st97:
	if ( ++p == pe )
		goto _test_eof97;
case 97:
	switch( (*p) ) {
		case 78: goto st98;
		case 110: goto st98;
	}
	goto tr39;
st98:
	if ( ++p == pe )
		goto _test_eof98;
case 98:
	switch( (*p) ) {
		case 70: goto st99;
		case 102: goto st99;
	}
	goto tr39;
st99:
	if ( ++p == pe )
		goto _test_eof99;
case 99:
	switch( (*p) ) {
		case 79: goto st100;
		case 111: goto st100;
	}
	goto tr39;
st100:
	if ( ++p == pe )
		goto _test_eof100;
case 100:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr445;
		case 32: goto tr445;
		case 40: goto tr446;
		case 41: goto tr447;
		case 3082: goto tr448;
		case 3131: goto tr449;
		case 3338: goto tr450;
		case 3387: goto tr450;
		case 3594: goto tr451;
		case 3643: goto tr452;
	}
	goto tr63;
st101:
	if ( ++p == pe )
		goto _test_eof101;
case 101:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr453;
		case 32: goto tr453;
		case 40: goto tr454;
		case 41: goto tr455;
		case 3082: goto tr456;
		case 3131: goto tr457;
		case 3338: goto tr458;
		case 3387: goto tr458;
		case 3594: goto tr459;
		case 3643: goto tr460;
	}
	goto tr63;
tr14:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	goto st102;
tr52:
	{
		s->r_class = s->default_class;
	}
	goto st102;
tr745:
	{
		s->r_ttl = s->default_ttl;
	}
	goto st102;
st102:
	if ( ++p == pe )
		goto _test_eof102;
case 102:
	switch( (*p) ) {
		case 65: goto st103;
		case 73: goto st107;
		case 83: goto st109;
		case 97: goto st103;
		case 105: goto st107;
		case 115: goto st109;
	}
	goto tr39;
st103:
	if ( ++p == pe )
		goto _test_eof103;
case 103:
	switch( (*p) ) {
		case 80: goto st104;
		case 112: goto st104;
	}
	goto tr39;
st104:
	if ( ++p == pe )
		goto _test_eof104;
case 104:
	switch( (*p) ) {
		case 84: goto st105;
		case 116: goto st105;
	}
	goto tr39;
st105:
	if ( ++p == pe )
		goto _test_eof105;
case 105:
	switch( (*p) ) {
		case 82: goto st106;
		case 114: goto st106;
	}
	goto tr39;
st106:
	if ( ++p == pe )
		goto _test_eof106;
case 106:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr467;
		case 32: goto tr467;
		case 40: goto tr468;
		case 41: goto tr469;
		case 3082: goto tr470;
		case 3131: goto tr471;
		case 3338: goto tr472;
		case 3387: goto tr472;
		case 3594: goto tr473;
		case 3643: goto tr474;
	}
	goto tr63;
st107:
	if ( ++p == pe )
		goto _test_eof107;
case 107:
	switch( (*p) ) {
		case 68: goto st108;
		case 100: goto st108;
	}
	goto tr39;
st108:
	if ( ++p == pe )
		goto _test_eof108;
case 108:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr476;
		case 32: goto tr476;
		case 40: goto tr477;
		case 41: goto tr478;
		case 3082: goto tr479;
		case 3131: goto tr480;
		case 3338: goto tr481;
		case 3387: goto tr481;
		case 3594: goto tr482;
		case 3643: goto tr483;
	}
	goto tr63;
st109:
	if ( ++p == pe )
		goto _test_eof109;
case 109:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr484;
		case 32: goto tr484;
		case 40: goto tr485;
		case 41: goto tr486;
		case 69: goto st110;
		case 101: goto st110;
		case 3082: goto tr488;
		case 3131: goto tr489;
		case 3338: goto tr490;
		case 3387: goto tr490;
		case 3594: goto tr491;
		case 3643: goto tr492;
	}
	goto tr63;
st110:
	if ( ++p == pe )
		goto _test_eof110;
case 110:
	switch( (*p) ) {
		case 67: goto st111;
		case 99: goto st111;
	}
	goto tr39;
st111:
	if ( ++p == pe )
		goto _test_eof111;
case 111:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr494;
		case 32: goto tr494;
		case 40: goto tr495;
		case 41: goto tr496;
		case 51: goto st112;
		case 3082: goto tr498;
		case 3131: goto tr499;
		case 3338: goto tr500;
		case 3387: goto tr500;
		case 3594: goto tr501;
		case 3643: goto tr502;
	}
	goto tr63;
st112:
	if ( ++p == pe )
		goto _test_eof112;
case 112:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr503;
		case 32: goto tr503;
		case 40: goto tr504;
		case 41: goto tr505;
		case 80: goto st113;
		case 112: goto st113;
		case 3082: goto tr507;
		case 3131: goto tr508;
		case 3338: goto tr509;
		case 3387: goto tr509;
		case 3594: goto tr510;
		case 3643: goto tr511;
	}
	goto tr63;
st113:
	if ( ++p == pe )
		goto _test_eof113;
case 113:
	switch( (*p) ) {
		case 65: goto st114;
		case 97: goto st114;
	}
	goto tr39;
st114:
	if ( ++p == pe )
		goto _test_eof114;
case 114:
	switch( (*p) ) {
		case 82: goto st115;
		case 114: goto st115;
	}
	goto tr39;
st115:
	if ( ++p == pe )
		goto _test_eof115;
case 115:
	switch( (*p) ) {
		case 65: goto st116;
		case 97: goto st116;
	}
	goto tr39;
st116:
	if ( ++p == pe )
		goto _test_eof116;
case 116:
	switch( (*p) ) {
		case 77: goto st117;
		case 109: goto st117;
	}
	goto tr39;
st117:
	if ( ++p == pe )
		goto _test_eof117;
case 117:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr516;
		case 32: goto tr516;
		case 40: goto tr517;
		case 41: goto tr518;
		case 3082: goto tr519;
		case 3131: goto tr520;
		case 3338: goto tr521;
		case 3387: goto tr521;
		case 3594: goto tr522;
		case 3643: goto tr523;
	}
	goto tr63;
tr15:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	goto st118;
tr53:
	{
		s->r_class = s->default_class;
	}
	goto st118;
tr746:
	{
		s->r_ttl = s->default_ttl;
	}
	goto st118;
st118:
	if ( ++p == pe )
		goto _test_eof118;
case 118:
	switch( (*p) ) {
		case 80: goto st119;
		case 112: goto st119;
	}
	goto tr39;
st119:
	if ( ++p == pe )
		goto _test_eof119;
case 119:
	switch( (*p) ) {
		case 69: goto st120;
		case 101: goto st120;
	}
	goto tr39;
st120:
	if ( ++p == pe )
		goto _test_eof120;
case 120:
	switch( (*p) ) {
		case 78: goto st121;
		case 110: goto st121;
	}
	goto tr39;
st121:
	if ( ++p == pe )
		goto _test_eof121;
case 121:
	switch( (*p) ) {
		case 80: goto st122;
		case 112: goto st122;
	}
	goto tr39;
st122:
	if ( ++p == pe )
		goto _test_eof122;
case 122:
	switch( (*p) ) {
		case 71: goto st123;
		case 103: goto st123;
	}
	goto tr39;
st123:
	if ( ++p == pe )
		goto _test_eof123;
case 123:
	switch( (*p) ) {
		case 80: goto st124;
		case 112: goto st124;
	}
	goto tr39;
st124:
	if ( ++p == pe )
		goto _test_eof124;
case 124:
	switch( (*p) ) {
		case 75: goto st125;
		case 107: goto st125;
	}
	goto tr39;
st125:
	if ( ++p == pe )
		goto _test_eof125;
case 125:
	switch( (*p) ) {
		case 69: goto st126;
		case 101: goto st126;
	}
	goto tr39;
st126:
	if ( ++p == pe )
		goto _test_eof126;
case 126:
	switch( (*p) ) {
		case 89: goto st127;
		case 121: goto st127;
	}
	goto tr39;
st127:
	if ( ++p == pe )
		goto _test_eof127;
case 127:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr533;
		case 32: goto tr533;
		case 40: goto tr534;
		case 41: goto tr535;
		case 3082: goto tr536;
		case 3131: goto tr537;
		case 3338: goto tr538;
		case 3387: goto tr538;
		case 3594: goto tr539;
		case 3643: goto tr540;
	}
	goto tr63;
tr16:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	goto st128;
tr54:
	{
		s->r_class = s->default_class;
	}
	goto st128;
tr747:
	{
		s->r_ttl = s->default_ttl;
	}
	goto st128;
st128:
	if ( ++p == pe )
		goto _test_eof128;
case 128:
	switch( (*p) ) {
		case 84: goto st129;
		case 116: goto st129;
	}
	goto tr39;
st129:
	if ( ++p == pe )
		goto _test_eof129;
case 129:
	switch( (*p) ) {
		case 82: goto st130;
		case 114: goto st130;
	}
	goto tr39;
st130:
	if ( ++p == pe )
		goto _test_eof130;
case 130:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr543;
		case 32: goto tr543;
		case 40: goto tr544;
		case 41: goto tr545;
		case 3082: goto tr546;
		case 3131: goto tr547;
		case 3338: goto tr548;
		case 3387: goto tr548;
		case 3594: goto tr549;
		case 3643: goto tr550;
	}
	goto tr63;
tr17:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	goto st131;
tr55:
	{
		s->r_class = s->default_class;
	}
	goto st131;
tr748:
	{
		s->r_ttl = s->default_ttl;
	}
	goto st131;
st131:
	if ( ++p == pe )
		goto _test_eof131;
case 131:
	switch( (*p) ) {
		case 80: goto st132;
		case 82: goto st133;
		case 84: goto st137;
		case 112: goto st132;
		case 114: goto st133;
		case 116: goto st137;
	}
	goto tr39;
st132:
	if ( ++p == pe )
		goto _test_eof132;
case 132:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr554;
		case 32: goto tr554;
		case 40: goto tr555;
		case 41: goto tr556;
		case 3082: goto tr557;
		case 3131: goto tr558;
		case 3338: goto tr559;
		case 3387: goto tr559;
		case 3594: goto tr560;
		case 3643: goto tr561;
	}
	goto tr63;
st133:
	if ( ++p == pe )
		goto _test_eof133;
case 133:
	switch( (*p) ) {
		case 83: goto st134;
		case 115: goto st134;
	}
	goto tr39;
st134:
	if ( ++p == pe )
		goto _test_eof134;
case 134:
	switch( (*p) ) {
		case 73: goto st135;
		case 105: goto st135;
	}
	goto tr39;
st135:
	if ( ++p == pe )
		goto _test_eof135;
case 135:
	switch( (*p) ) {
		case 71: goto st136;
		case 103: goto st136;
	}
	goto tr39;
st136:
	if ( ++p == pe )
		goto _test_eof136;
case 136:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr565;
		case 32: goto tr565;
		case 40: goto tr566;
		case 41: goto tr567;
		case 3082: goto tr568;
		case 3131: goto tr569;
		case 3338: goto tr570;
		case 3387: goto tr570;
		case 3594: goto tr571;
		case 3643: goto tr572;
	}
	goto tr63;
st137:
	if ( ++p == pe )
		goto _test_eof137;
case 137:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr573;
		case 32: goto tr573;
		case 40: goto tr574;
		case 41: goto tr575;
		case 3082: goto tr576;
		case 3131: goto tr577;
		case 3338: goto tr578;
		case 3387: goto tr578;
		case 3594: goto tr579;
		case 3643: goto tr580;
	}
	goto tr63;
tr18:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	goto st138;
tr56:
	{
		s->r_class = s->default_class;
	}
	goto st138;
tr749:
	{
		s->r_ttl = s->default_ttl;
	}
	goto st138;
st138:
	if ( ++p == pe )
		goto _test_eof138;
case 138:
	switch( (*p) ) {
		case 77: goto st139;
		case 79: goto st144;
		case 80: goto st146;
		case 82: goto st148;
		case 83: goto st150;
		case 86: goto st154;
		case 109: goto st139;
		case 111: goto st144;
		case 112: goto st146;
		case 114: goto st148;
		case 115: goto st150;
		case 118: goto st154;
	}
	goto tr39;
st139:
	if ( ++p == pe )
		goto _test_eof139;
case 139:
	switch( (*p) ) {
		case 73: goto st140;
		case 105: goto st140;
	}
	goto tr39;
st140:
	if ( ++p == pe )
		goto _test_eof140;
case 140:
	switch( (*p) ) {
		case 77: goto st141;
		case 109: goto st141;
	}
	goto tr39;
st141:
	if ( ++p == pe )
		goto _test_eof141;
case 141:
	switch( (*p) ) {
		case 69: goto st142;
		case 101: goto st142;
	}
	goto tr39;
st142:
	if ( ++p == pe )
		goto _test_eof142;
case 142:
	switch( (*p) ) {
		case 65: goto st143;
		case 97: goto st143;
	}
	goto tr39;
st143:
	if ( ++p == pe )
		goto _test_eof143;
case 143:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr591;
		case 32: goto tr591;
		case 40: goto tr592;
		case 41: goto tr593;
		case 3082: goto tr594;
		case 3131: goto tr595;
		case 3338: goto tr596;
		case 3387: goto tr596;
		case 3594: goto tr597;
		case 3643: goto tr598;
	}
	goto tr63;
st144:
	if ( ++p == pe )
		goto _test_eof144;
case 144:
	switch( (*p) ) {
		case 65: goto st145;
		case 97: goto st145;
	}
	goto tr39;
st145:
	if ( ++p == pe )
		goto _test_eof145;
case 145:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr600;
		case 32: goto tr600;
		case 40: goto tr601;
		case 41: goto tr602;
		case 3082: goto tr603;
		case 3131: goto tr604;
		case 3338: goto tr605;
		case 3387: goto tr605;
		case 3594: goto tr606;
		case 3643: goto tr607;
	}
	goto tr63;
st146:
	if ( ++p == pe )
		goto _test_eof146;
case 146:
	switch( (*p) ) {
		case 70: goto st147;
		case 102: goto st147;
	}
	goto tr39;
st147:
	if ( ++p == pe )
		goto _test_eof147;
case 147:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr609;
		case 32: goto tr609;
		case 40: goto tr610;
		case 41: goto tr611;
		case 3082: goto tr612;
		case 3131: goto tr613;
		case 3338: goto tr614;
		case 3387: goto tr614;
		case 3594: goto tr615;
		case 3643: goto tr616;
	}
	goto tr63;
st148:
	if ( ++p == pe )
		goto _test_eof148;
case 148:
	switch( (*p) ) {
		case 86: goto st149;
		case 118: goto st149;
	}
	goto tr39;
st149:
	if ( ++p == pe )
		goto _test_eof149;
case 149:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr618;
		case 32: goto tr618;
		case 40: goto tr619;
		case 41: goto tr620;
		case 3082: goto tr621;
		case 3131: goto tr622;
		case 3338: goto tr623;
		case 3387: goto tr623;
		case 3594: goto tr624;
		case 3643: goto tr625;
	}
	goto tr63;
st150:
	if ( ++p == pe )
		goto _test_eof150;
case 150:
	switch( (*p) ) {
		case 72: goto st151;
		case 104: goto st151;
	}
	goto tr39;
st151:
	if ( ++p == pe )
		goto _test_eof151;
case 151:
	switch( (*p) ) {
		case 70: goto st152;
		case 102: goto st152;
	}
	goto tr39;
st152:
	if ( ++p == pe )
		goto _test_eof152;
case 152:
	switch( (*p) ) {
		case 80: goto st153;
		case 112: goto st153;
	}
	goto tr39;
st153:
	if ( ++p == pe )
		goto _test_eof153;
case 153:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr629;
		case 32: goto tr629;
		case 40: goto tr630;
		case 41: goto tr631;
		case 3082: goto tr632;
		case 3131: goto tr633;
		case 3338: goto tr634;
		case 3387: goto tr634;
		case 3594: goto tr635;
		case 3643: goto tr636;
	}
	goto tr63;
st154:
	if ( ++p == pe )
		goto _test_eof154;
case 154:
	switch( (*p) ) {
		case 67: goto st155;
		case 99: goto st155;
	}
	goto tr39;
st155:
	if ( ++p == pe )
		goto _test_eof155;
case 155:
	switch( (*p) ) {
		case 66: goto st156;
		case 98: goto st156;
	}
	goto tr39;
st156:
	if ( ++p == pe )
		goto _test_eof156;
case 156:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr639;
		case 32: goto tr639;
		case 40: goto tr640;
		case 41: goto tr641;
		case 3082: goto tr642;
		case 3131: goto tr643;
		case 3338: goto tr644;
		case 3387: goto tr644;
		case 3594: goto tr645;
		case 3643: goto tr646;
	}
	goto tr63;
tr19:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	goto st157;
tr57:
	{
		s->r_class = s->default_class;
	}
	goto st157;
tr750:
	{
		s->r_ttl = s->default_ttl;
	}
	goto st157;
st157:
	if ( ++p == pe )
		goto _test_eof157;
case 157:
	switch( (*p) ) {
		case 76: goto st158;
		case 88: goto st161;
		case 89: goto st163;
		case 108: goto st158;
		case 120: goto st161;
		case 121: goto st163;
	}
	goto tr39;
st158:
	if ( ++p == pe )
		goto _test_eof158;
case 158:
	switch( (*p) ) {
		case 83: goto st159;
		case 115: goto st159;
	}
	goto tr39;
st159:
	if ( ++p == pe )
		goto _test_eof159;
case 159:
	switch( (*p) ) {
		case 65: goto st160;
		case 97: goto st160;
	}
	goto tr39;
st160:
	if ( ++p == pe )
		goto _test_eof160;
case 160:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr652;
		case 32: goto tr652;
		case 40: goto tr653;
		case 41: goto tr654;
		case 3082: goto tr655;
		case 3131: goto tr656;
		case 3338: goto tr657;
		case 3387: goto tr657;
		case 3594: goto tr658;
		case 3643: goto tr659;
	}
	goto tr63;
st161:
	if ( ++p == pe )
		goto _test_eof161;
case 161:
	switch( (*p) ) {
		case 84: goto st162;
		case 116: goto st162;
	}
	goto tr39;
st162:
	if ( ++p == pe )
		goto _test_eof162;
case 162:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr661;
		case 32: goto tr661;
		case 40: goto tr662;
		case 41: goto tr663;
		case 3082: goto tr664;
		case 3131: goto tr665;
		case 3338: goto tr666;
		case 3387: goto tr666;
		case 3594: goto tr667;
		case 3643: goto tr668;
	}
	goto tr63;
st163:
	if ( ++p == pe )
		goto _test_eof163;
case 163:
	switch( (*p) ) {
		case 80: goto st164;
		case 112: goto st164;
	}
	goto tr39;
st164:
	if ( ++p == pe )
		goto _test_eof164;
case 164:
	switch( (*p) ) {
		case 69: goto st165;
		case 101: goto st165;
	}
	goto tr39;
st165:
	if ( ++p == pe )
		goto _test_eof165;
case 165:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr672;
	goto tr671;
tr672:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st166;
tr677:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st166;
st166:
	if ( ++p == pe )
		goto _test_eof166;
case 166:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr674;
		case 32: goto tr674;
		case 40: goto tr675;
		case 41: goto tr676;
		case 3082: goto tr678;
		case 3131: goto tr679;
		case 3338: goto tr680;
		case 3387: goto tr680;
		case 3594: goto tr681;
		case 3643: goto tr682;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr677;
	goto tr673;
tr20:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	goto st167;
tr58:
	{
		s->r_class = s->default_class;
	}
	goto st167;
tr751:
	{
		s->r_ttl = s->default_ttl;
	}
	goto st167;
st167:
	if ( ++p == pe )
		goto _test_eof167;
case 167:
	switch( (*p) ) {
		case 82: goto st168;
		case 114: goto st168;
	}
	goto tr39;
st168:
	if ( ++p == pe )
		goto _test_eof168;
case 168:
	switch( (*p) ) {
		case 73: goto st169;
		case 105: goto st169;
	}
	goto tr39;
st169:
	if ( ++p == pe )
		goto _test_eof169;
case 169:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr685;
		case 32: goto tr685;
		case 40: goto tr686;
		case 41: goto tr687;
		case 3082: goto tr688;
		case 3131: goto tr689;
		case 3338: goto tr690;
		case 3387: goto tr690;
		case 3594: goto tr691;
		case 3643: goto tr692;
	}
	goto tr63;
tr21:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	goto st170;
tr59:
	{
		s->r_class = s->default_class;
	}
	goto st170;
tr752:
	{
		s->r_ttl = s->default_ttl;
	}
	goto st170;
st170:
	if ( ++p == pe )
		goto _test_eof170;
case 170:
	switch( (*p) ) {
		case 65: goto st171;
		case 97: goto st171;
	}
	goto tr39;
st171:
	if ( ++p == pe )
		goto _test_eof171;
case 171:
	switch( (*p) ) {
		case 76: goto st172;
		case 108: goto st172;
	}
	goto tr39;
st172:
	if ( ++p == pe )
		goto _test_eof172;
case 172:
	switch( (*p) ) {
		case 76: goto st173;
		case 108: goto st173;
	}
	goto tr39;
st173:
	if ( ++p == pe )
		goto _test_eof173;
case 173:
	switch( (*p) ) {
		case 69: goto st174;
		case 101: goto st174;
	}
	goto tr39;
st174:
	if ( ++p == pe )
		goto _test_eof174;
case 174:
	switch( (*p) ) {
		case 84: goto st175;
		case 116: goto st175;
	}
	goto tr39;
st175:
	if ( ++p == pe )
		goto _test_eof175;
case 175:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr698;
		case 32: goto tr698;
		case 40: goto tr699;
		case 41: goto tr700;
		case 3082: goto tr701;
		case 3131: goto tr702;
		case 3338: goto tr703;
		case 3387: goto tr703;
		case 3594: goto tr704;
		case 3643: goto tr705;
	}
	goto tr63;
tr22:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	goto st176;
tr60:
	{
		s->r_class = s->default_class;
	}
	goto st176;
tr753:
	{
		s->r_ttl = s->default_ttl;
	}
	goto st176;
st176:
	if ( ++p == pe )
		goto _test_eof176;
case 176:
	switch( (*p) ) {
		case 79: goto st177;
		case 111: goto st177;
	}
	goto tr39;
st177:
	if ( ++p == pe )
		goto _test_eof177;
case 177:
	switch( (*p) ) {
		case 78: goto st178;
		case 110: goto st178;
	}
	goto tr39;
st178:
	if ( ++p == pe )
		goto _test_eof178;
case 178:
	switch( (*p) ) {
		case 69: goto st179;
		case 101: goto st179;
	}
	goto tr39;
st179:
	if ( ++p == pe )
		goto _test_eof179;
case 179:
	switch( (*p) ) {
		case 77: goto st180;
		case 109: goto st180;
	}
	goto tr39;
st180:
	if ( ++p == pe )
		goto _test_eof180;
case 180:
	switch( (*p) ) {
		case 68: goto st181;
		case 100: goto st181;
	}
	goto tr39;
st181:
	if ( ++p == pe )
		goto _test_eof181;
case 181:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr711;
		case 32: goto tr711;
		case 40: goto tr712;
		case 41: goto tr713;
		case 3082: goto tr714;
		case 3131: goto tr715;
		case 3338: goto tr716;
		case 3387: goto tr716;
		case 3594: goto tr717;
		case 3643: goto tr718;
	}
	goto tr63;
tr367:
	{
		s->buffer_length = 0;
	}
	goto st182;
tr766:
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st182;
tr719:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st182;
tr344:
	{
		s->r_class = KNOT_CLASS_IN;
	}
	{
		s->buffer_length = 0;
	}
	goto st182;
tr779:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st182;
st182:
	if ( ++p == pe )
		goto _test_eof182;
case 182:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr720;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr719;
	goto tr39;
tr1031:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1643; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop if required from the callback.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1643; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1643; goto _out;}
		}
	}
	goto st1643;
tr152:
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop if required from the callback.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1643; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1643; goto _out;}
		}
	}
	goto st1643;
tr158:
	{
		s->line_counter++;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop if required from the callback.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1643; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1643; goto _out;}
		}
	}
	goto st1643;
st1643:
	if ( ++p == pe )
		goto _test_eof1643;
case 1643:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4806;
		case 32: goto tr4806;
		case 36: goto st193;
		case 40: goto tr4807;
		case 41: goto tr4808;
		case 42: goto tr4788;
		case 65: goto tr4809;
		case 67: goto tr4810;
		case 68: goto tr4811;
		case 69: goto tr4812;
		case 72: goto tr4813;
		case 73: goto tr4814;
		case 75: goto tr4815;
		case 76: goto tr4816;
		case 77: goto tr4817;
		case 78: goto tr4818;
		case 79: goto tr4819;
		case 80: goto tr4820;
		case 82: goto tr4821;
		case 83: goto tr4822;
		case 84: goto tr4823;
		case 85: goto tr4824;
		case 87: goto tr4825;
		case 90: goto tr4826;
		case 92: goto tr4788;
		case 95: goto tr4788;
		case 97: goto tr4809;
		case 99: goto tr4810;
		case 100: goto tr4811;
		case 101: goto tr4812;
		case 104: goto tr4813;
		case 105: goto tr4814;
		case 107: goto tr4815;
		case 108: goto tr4816;
		case 109: goto tr4817;
		case 110: goto tr4818;
		case 111: goto tr4819;
		case 112: goto tr4820;
		case 114: goto tr4821;
		case 115: goto tr4822;
		case 116: goto tr4823;
		case 117: goto tr4824;
		case 119: goto tr4825;
		case 122: goto tr4826;
		case 1802: goto tr4789;
		case 1851: goto tr4790;
		case 2058: goto tr4827;
		case 2107: goto tr4828;
	}
	if ( _widec < 64 ) {
		if ( 45 <= _widec && _widec <= 57 )
			goto tr4788;
	} else if ( _widec > 89 ) {
		if ( 98 <= _widec && _widec <= 121 )
			goto tr4788;
	} else
		goto tr4788;
	goto tr4805;
tr722:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st183;
tr723:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st183;
tr4806:
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st183;
tr4807:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st183;
tr4808:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st183;
st183:
	if ( ++p == pe )
		goto _test_eof183;
case 183:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st183;
		case 32: goto st183;
		case 40: goto tr722;
		case 41: goto tr723;
		case 65: goto tr5;
		case 67: goto tr6;
		case 68: goto tr7;
		case 69: goto tr8;
		case 72: goto tr9;
		case 73: goto tr10;
		case 75: goto tr11;
		case 76: goto tr12;
		case 77: goto tr13;
		case 78: goto tr14;
		case 79: goto tr15;
		case 80: goto tr16;
		case 82: goto tr17;
		case 83: goto tr18;
		case 84: goto tr19;
		case 85: goto tr20;
		case 87: goto tr21;
		case 90: goto tr22;
		case 97: goto tr5;
		case 99: goto tr6;
		case 100: goto tr7;
		case 101: goto tr8;
		case 104: goto tr9;
		case 105: goto tr10;
		case 107: goto tr11;
		case 108: goto tr12;
		case 109: goto tr13;
		case 110: goto tr14;
		case 111: goto tr15;
		case 112: goto tr16;
		case 114: goto tr17;
		case 115: goto tr18;
		case 116: goto tr19;
		case 117: goto tr20;
		case 119: goto tr21;
		case 122: goto tr22;
		case 1802: goto tr23;
		case 1851: goto tr24;
		case 2058: goto tr724;
		case 2107: goto tr725;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4;
	goto tr0;
tr10:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	goto st184;
st184:
	if ( ++p == pe )
		goto _test_eof184;
case 184:
	switch( (*p) ) {
		case 78: goto st185;
		case 80: goto st77;
		case 110: goto st185;
		case 112: goto st77;
	}
	goto tr39;
st185:
	if ( ++p == pe )
		goto _test_eof185;
case 185:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr727;
		case 32: goto tr727;
		case 40: goto tr728;
		case 41: goto tr729;
		case 2058: goto tr730;
		case 2107: goto tr731;
	}
	goto tr39;
tr733:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st186;
tr734:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st186;
tr754:
	{
		s->line_counter++;
	}
	goto st186;
tr781:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 186; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st186;
tr727:
	{
		s->r_class = KNOT_CLASS_IN;
	}
	goto st186;
tr728:
	{
		s->r_class = KNOT_CLASS_IN;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st186;
tr729:
	{
		s->r_class = KNOT_CLASS_IN;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st186;
tr730:
	{
		s->r_class = KNOT_CLASS_IN;
	}
	{
		s->line_counter++;
	}
	goto st186;
st186:
	if ( ++p == pe )
		goto _test_eof186;
case 186:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st186;
		case 32: goto st186;
		case 40: goto tr733;
		case 41: goto tr734;
		case 65: goto tr736;
		case 67: goto tr737;
		case 68: goto tr738;
		case 69: goto tr739;
		case 72: goto tr740;
		case 73: goto tr741;
		case 75: goto tr742;
		case 76: goto tr743;
		case 77: goto tr744;
		case 78: goto tr745;
		case 79: goto tr746;
		case 80: goto tr747;
		case 82: goto tr748;
		case 83: goto tr749;
		case 84: goto tr750;
		case 85: goto tr751;
		case 87: goto tr752;
		case 90: goto tr753;
		case 97: goto tr736;
		case 99: goto tr737;
		case 100: goto tr738;
		case 101: goto tr739;
		case 104: goto tr740;
		case 105: goto tr741;
		case 107: goto tr742;
		case 108: goto tr743;
		case 109: goto tr744;
		case 110: goto tr745;
		case 111: goto tr746;
		case 112: goto tr747;
		case 114: goto tr748;
		case 115: goto tr749;
		case 116: goto tr750;
		case 117: goto tr751;
		case 119: goto tr752;
		case 122: goto tr753;
		case 2058: goto tr754;
		case 2107: goto tr755;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr735;
	goto tr671;
tr735:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st187;
tr759:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st187;
st187:
	if ( ++p == pe )
		goto _test_eof187;
case 187:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr756;
		case 32: goto tr756;
		case 40: goto tr757;
		case 41: goto tr758;
		case 68: goto tr760;
		case 72: goto tr761;
		case 77: goto tr762;
		case 83: goto st188;
		case 87: goto tr764;
		case 100: goto tr760;
		case 104: goto tr761;
		case 109: goto tr762;
		case 115: goto st188;
		case 119: goto tr764;
		case 2058: goto tr765;
		case 2107: goto tr766;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr759;
	goto tr27;
tr760:
	{ if (s->number64 <= (UINT32_MAX / 86400)) {
	                  s->number64 *= 86400;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st188;
tr761:
	{ if (s->number64 <= (UINT32_MAX / 3600)) {
	                  s->number64 *= 3600;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st188;
tr762:
	{ if (s->number64 <= (UINT32_MAX / 60)) {
	                  s->number64 *= 60;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st188;
tr764:
	{ if (s->number64 <= (UINT32_MAX / 604800)) {
	                  s->number64 *= 604800;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st188;
st188:
	if ( ++p == pe )
		goto _test_eof188;
case 188:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr756;
		case 32: goto tr756;
		case 40: goto tr757;
		case 41: goto tr758;
		case 2058: goto tr765;
		case 2107: goto tr766;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr767;
	goto tr27;
tr768:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st189;
tr767:
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st189;
tr777:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st189;
st189:
	if ( ++p == pe )
		goto _test_eof189;
case 189:
	switch( (*p) ) {
		case 68: goto tr769;
		case 72: goto tr770;
		case 77: goto tr771;
		case 83: goto st190;
		case 87: goto tr773;
		case 100: goto tr769;
		case 104: goto tr770;
		case 109: goto tr771;
		case 115: goto st190;
		case 119: goto tr773;
	}
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr768;
	goto tr27;
tr769:
	{ if (s->number64 <= (UINT32_MAX / 86400)) {
	                  s->number64 *= 86400;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st190;
tr770:
	{ if (s->number64 <= (UINT32_MAX / 3600)) {
	                  s->number64 *= 3600;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st190;
tr771:
	{ if (s->number64 <= (UINT32_MAX / 60)) {
	                  s->number64 *= 60;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st190;
tr773:
	{ if (s->number64 <= (UINT32_MAX / 604800)) {
	                  s->number64 *= 604800;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st190;
st190:
	if ( ++p == pe )
		goto _test_eof190;
case 190:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr774;
		case 32: goto tr774;
		case 40: goto tr775;
		case 41: goto tr776;
		case 2058: goto tr778;
		case 2107: goto tr779;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr777;
	goto tr27;
tr755:
	{
		s->buffer_length = 0;
	}
	goto st191;
tr780:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st191;
tr731:
	{
		s->r_class = KNOT_CLASS_IN;
	}
	{
		s->buffer_length = 0;
	}
	goto st191;
st191:
	if ( ++p == pe )
		goto _test_eof191;
case 191:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr781;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr780;
	goto tr39;
tr24:
	{
		s->buffer_length = 0;
	}
	goto st192;
tr4790:
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		s->buffer_length = 0;
	}
	goto st192;
tr782:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st192;
tr4856:
	{
		NOERR;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		s->buffer_length = 0;
	}
	goto st192;
st192:
	if ( ++p == pe )
		goto _test_eof192;
case 192:
	if ( (*p) == 10 )
		goto tr783;
	goto tr782;
tr724:
	{
		s->line_counter++;
	}
	goto st1644;
tr1029:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1644; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1644;
tr918:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1644; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop if required from the callback.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1644; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1644; goto _out;}
		}
	}
	goto st1644;
tr915:
	{
		s->line_counter++;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop if required from the callback.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1644; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1644; goto _out;}
		}
	}
	goto st1644;
tr910:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop if required from the callback.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1644; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1644; goto _out;}
		}
	}
	goto st1644;
tr4827:
	{
		s->line_counter++;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st1644;
st1644:
	if ( ++p == pe )
		goto _test_eof1644;
case 1644:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4806;
		case 32: goto tr4806;
		case 36: goto st193;
		case 40: goto tr4807;
		case 41: goto tr4808;
		case 42: goto tr4788;
		case 65: goto tr4831;
		case 67: goto tr4832;
		case 68: goto tr4833;
		case 69: goto tr4834;
		case 72: goto tr4835;
		case 73: goto tr4836;
		case 75: goto tr4837;
		case 76: goto tr4838;
		case 77: goto tr4839;
		case 78: goto tr4840;
		case 79: goto tr4841;
		case 80: goto tr4842;
		case 82: goto tr4843;
		case 83: goto tr4844;
		case 84: goto tr4845;
		case 85: goto tr4846;
		case 87: goto tr4847;
		case 90: goto tr4848;
		case 92: goto tr4788;
		case 95: goto tr4788;
		case 97: goto tr4831;
		case 99: goto tr4832;
		case 100: goto tr4833;
		case 101: goto tr4834;
		case 104: goto tr4835;
		case 105: goto tr4836;
		case 107: goto tr4837;
		case 108: goto tr4838;
		case 109: goto tr4839;
		case 110: goto tr4840;
		case 111: goto tr4841;
		case 112: goto tr4842;
		case 114: goto tr4843;
		case 115: goto tr4844;
		case 116: goto tr4845;
		case 117: goto tr4846;
		case 119: goto tr4847;
		case 122: goto tr4848;
		case 1802: goto tr4789;
		case 1851: goto tr4790;
		case 2058: goto tr4827;
		case 2107: goto tr4828;
	}
	if ( _widec < 48 ) {
		if ( 45 <= _widec && _widec <= 47 )
			goto tr4788;
	} else if ( _widec > 57 ) {
		if ( _widec > 89 ) {
			if ( 98 <= _widec && _widec <= 121 )
				goto tr4788;
		} else if ( _widec >= 64 )
			goto tr4788;
	} else
		goto tr4830;
	goto tr4829;
tr4851:
	{
		NOERR;
	}
	goto st193;
st193:
	if ( ++p == pe )
		goto _test_eof193;
case 193:
	switch( (*p) ) {
		case 73: goto tr785;
		case 79: goto tr786;
		case 84: goto tr787;
		case 105: goto tr785;
		case 111: goto tr786;
		case 116: goto tr787;
	}
	goto tr784;
tr785:
	{
		ERR(ZS_OK);
	}
	goto st194;
st194:
	if ( ++p == pe )
		goto _test_eof194;
case 194:
	switch( (*p) ) {
		case 78: goto st195;
		case 110: goto st195;
	}
	goto tr784;
st195:
	if ( ++p == pe )
		goto _test_eof195;
case 195:
	switch( (*p) ) {
		case 67: goto st196;
		case 99: goto st196;
	}
	goto tr784;
st196:
	if ( ++p == pe )
		goto _test_eof196;
case 196:
	switch( (*p) ) {
		case 76: goto st197;
		case 108: goto st197;
	}
	goto tr784;
st197:
	if ( ++p == pe )
		goto _test_eof197;
case 197:
	switch( (*p) ) {
		case 85: goto st198;
		case 117: goto st198;
	}
	goto tr784;
st198:
	if ( ++p == pe )
		goto _test_eof198;
case 198:
	switch( (*p) ) {
		case 68: goto st199;
		case 100: goto st199;
	}
	goto tr784;
st199:
	if ( ++p == pe )
		goto _test_eof199;
case 199:
	switch( (*p) ) {
		case 69: goto st200;
		case 101: goto st200;
	}
	goto tr784;
st200:
	if ( ++p == pe )
		goto _test_eof200;
case 200:
	switch( (*p) ) {
		case 32: goto tr794;
		case 59: goto tr794;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr794;
	} else if ( (*p) >= 9 )
		goto tr794;
	goto tr784;
tr794:
	{ p--; {stack[top++] = 1645;goto st364;} }
	goto st1645;
tr896:
	{ p--; {stack[top++] = 1645;goto st352;} }
	goto st1645;
tr899:
	{ p--; {stack[top++] = 1645;goto st343;} }
	goto st1645;
st1645:
	if ( ++p == pe )
		goto _test_eof1645;
case 1645:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4850;
		case 32: goto tr4850;
		case 36: goto tr4851;
		case 40: goto tr4852;
		case 41: goto tr4853;
		case 42: goto tr4854;
		case 92: goto tr4854;
		case 95: goto tr4854;
		case 1802: goto tr4855;
		case 1851: goto tr4856;
		case 2058: goto tr4857;
		case 2107: goto tr4858;
	}
	if ( _widec < 64 ) {
		if ( 45 <= _widec && _widec <= 57 )
			goto tr4854;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr4854;
	} else
		goto tr4854;
	goto tr4849;
tr4788:
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 201;goto st321;} }
	goto st201;
tr4854:
	{
		NOERR;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 201;goto st321;} }
	goto st201;
st201:
	if ( ++p == pe )
		goto _test_eof201;
case 201:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr796;
		case 32: goto tr796;
		case 40: goto tr797;
		case 41: goto tr798;
		case 2058: goto tr799;
		case 2107: goto tr800;
	}
	goto tr795;
tr802:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st202;
tr803:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st202;
tr804:
	{
		s->line_counter++;
	}
	goto st202;
tr808:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 202; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st202;
tr796:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	goto st202;
tr797:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st202;
tr798:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st202;
tr799:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	goto st202;
st202:
	if ( ++p == pe )
		goto _test_eof202;
case 202:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st202;
		case 32: goto st202;
		case 40: goto tr802;
		case 41: goto tr803;
		case 65: goto tr5;
		case 67: goto tr6;
		case 68: goto tr7;
		case 69: goto tr8;
		case 72: goto tr9;
		case 73: goto tr10;
		case 75: goto tr11;
		case 76: goto tr12;
		case 77: goto tr13;
		case 78: goto tr14;
		case 79: goto tr15;
		case 80: goto tr16;
		case 82: goto tr17;
		case 83: goto tr18;
		case 84: goto tr19;
		case 85: goto tr20;
		case 87: goto tr21;
		case 90: goto tr22;
		case 97: goto tr5;
		case 99: goto tr6;
		case 100: goto tr7;
		case 101: goto tr8;
		case 104: goto tr9;
		case 105: goto tr10;
		case 107: goto tr11;
		case 108: goto tr12;
		case 109: goto tr13;
		case 110: goto tr14;
		case 111: goto tr15;
		case 112: goto tr16;
		case 114: goto tr17;
		case 115: goto tr18;
		case 116: goto tr19;
		case 117: goto tr20;
		case 119: goto tr21;
		case 122: goto tr22;
		case 2058: goto tr804;
		case 2107: goto tr805;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4;
	goto tr671;
tr805:
	{
		s->buffer_length = 0;
	}
	goto st203;
tr806:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st203;
tr800:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		s->buffer_length = 0;
	}
	goto st203;
st203:
	if ( ++p == pe )
		goto _test_eof203;
case 203:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr808;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr806;
	goto st0;
tr25:
	{
		s->line_counter++;
	}
	goto st1646;
tr1027:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1646; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1646;
tr873:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1646; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop if required from the callback.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1646; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1646; goto _out;}
		}
	}
	goto st1646;
tr870:
	{
		s->line_counter++;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop if required from the callback.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1646; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1646; goto _out;}
		}
	}
	goto st1646;
tr904:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop if required from the callback.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1646; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1646; goto _out;}
		}
	}
	goto st1646;
tr941:
	{
		s->line_counter++;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop if required from the callback.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1646; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1646; goto _out;}
		}
	}
	goto st1646;
tr944:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1646; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop if required from the callback.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1646; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1646; goto _out;}
		}
	}
	goto st1646;
tr4791:
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st1646;
tr4861:
	{
		s->line_counter++;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st1646;
tr4857:
	{
		NOERR;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st1646;
tr4866:
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop if required from the callback.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1646; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1646; goto _out;}
		}
	}
	{
		s->line_counter++;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	goto st1646;
tr4893:
	{
		s->line_counter++;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop if required from the callback.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1646; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1646; goto _out;}
		}
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	goto st1646;
st1646:
	if ( ++p == pe )
		goto _test_eof1646;
case 1646:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4784;
		case 32: goto tr4784;
		case 36: goto st193;
		case 40: goto tr4859;
		case 41: goto tr4860;
		case 42: goto tr4788;
		case 65: goto tr4831;
		case 67: goto tr4832;
		case 68: goto tr4833;
		case 69: goto tr4834;
		case 72: goto tr4835;
		case 73: goto tr4836;
		case 75: goto tr4837;
		case 76: goto tr4838;
		case 77: goto tr4839;
		case 78: goto tr4840;
		case 79: goto tr4841;
		case 80: goto tr4842;
		case 82: goto tr4843;
		case 83: goto tr4844;
		case 84: goto tr4845;
		case 85: goto tr4846;
		case 87: goto tr4847;
		case 90: goto tr4848;
		case 92: goto tr4788;
		case 95: goto tr4788;
		case 97: goto tr4831;
		case 99: goto tr4832;
		case 100: goto tr4833;
		case 101: goto tr4834;
		case 104: goto tr4835;
		case 105: goto tr4836;
		case 107: goto tr4837;
		case 108: goto tr4838;
		case 109: goto tr4839;
		case 110: goto tr4840;
		case 111: goto tr4841;
		case 112: goto tr4842;
		case 114: goto tr4843;
		case 115: goto tr4844;
		case 116: goto tr4845;
		case 117: goto tr4846;
		case 119: goto tr4847;
		case 122: goto tr4848;
		case 1802: goto tr4789;
		case 1851: goto tr4790;
		case 2058: goto tr4861;
		case 2107: goto tr4862;
	}
	if ( _widec < 48 ) {
		if ( 45 <= _widec && _widec <= 47 )
			goto tr4788;
	} else if ( _widec > 57 ) {
		if ( _widec > 89 ) {
			if ( 98 <= _widec && _widec <= 121 )
				goto tr4788;
		} else if ( _widec >= 64 )
			goto tr4788;
	} else
		goto tr4830;
	goto tr4829;
tr4830:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 204;goto st321;} }
	goto st204;
st204:
	if ( ++p == pe )
		goto _test_eof204;
case 204:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr810;
		case 32: goto tr810;
		case 40: goto tr811;
		case 41: goto tr812;
		case 68: goto tr32;
		case 72: goto tr33;
		case 77: goto tr34;
		case 83: goto st207;
		case 87: goto tr36;
		case 100: goto tr32;
		case 104: goto tr33;
		case 109: goto tr34;
		case 115: goto st207;
		case 119: goto tr36;
		case 2058: goto tr813;
		case 2107: goto tr814;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr31;
	goto tr809;
tr816:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st205;
tr817:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st205;
tr818:
	{
		s->line_counter++;
	}
	goto st205;
tr821:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 205; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st205;
tr810:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st205;
tr811:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st205;
tr812:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st205;
tr813:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st205;
st205:
	if ( ++p == pe )
		goto _test_eof205;
case 205:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st205;
		case 32: goto st205;
		case 40: goto tr816;
		case 41: goto tr817;
		case 65: goto tr5;
		case 67: goto tr6;
		case 68: goto tr7;
		case 69: goto tr8;
		case 72: goto tr9;
		case 73: goto tr10;
		case 75: goto tr11;
		case 76: goto tr12;
		case 77: goto tr13;
		case 78: goto tr14;
		case 79: goto tr15;
		case 80: goto tr16;
		case 82: goto tr17;
		case 83: goto tr18;
		case 84: goto tr19;
		case 85: goto tr20;
		case 87: goto tr21;
		case 90: goto tr22;
		case 97: goto tr5;
		case 99: goto tr6;
		case 100: goto tr7;
		case 101: goto tr8;
		case 104: goto tr9;
		case 105: goto tr10;
		case 107: goto tr11;
		case 108: goto tr12;
		case 109: goto tr13;
		case 110: goto tr14;
		case 111: goto tr15;
		case 112: goto tr16;
		case 114: goto tr17;
		case 115: goto tr18;
		case 116: goto tr19;
		case 117: goto tr20;
		case 119: goto tr21;
		case 122: goto tr22;
		case 2058: goto tr818;
		case 2107: goto tr819;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4;
	goto tr671;
tr819:
	{
		s->buffer_length = 0;
	}
	goto st206;
tr820:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st206;
tr814:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		s->buffer_length = 0;
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st206;
st206:
	if ( ++p == pe )
		goto _test_eof206;
case 206:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr821;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr820;
	goto tr39;
tr32:
	{ if (s->number64 <= (UINT32_MAX / 86400)) {
	                  s->number64 *= 86400;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st207;
tr33:
	{ if (s->number64 <= (UINT32_MAX / 3600)) {
	                  s->number64 *= 3600;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st207;
tr34:
	{ if (s->number64 <= (UINT32_MAX / 60)) {
	                  s->number64 *= 60;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st207;
tr36:
	{ if (s->number64 <= (UINT32_MAX / 604800)) {
	                  s->number64 *= 604800;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st207;
st207:
	if ( ++p == pe )
		goto _test_eof207;
case 207:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr28;
		case 32: goto tr28;
		case 40: goto tr29;
		case 41: goto tr30;
		case 2058: goto tr37;
		case 2107: goto tr38;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr822;
	goto tr27;
tr823:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st208;
tr822:
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st208;
tr832:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st208;
st208:
	if ( ++p == pe )
		goto _test_eof208;
case 208:
	switch( (*p) ) {
		case 68: goto tr824;
		case 72: goto tr825;
		case 77: goto tr826;
		case 83: goto st209;
		case 87: goto tr828;
		case 100: goto tr824;
		case 104: goto tr825;
		case 109: goto tr826;
		case 115: goto st209;
		case 119: goto tr828;
	}
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr823;
	goto tr27;
tr824:
	{ if (s->number64 <= (UINT32_MAX / 86400)) {
	                  s->number64 *= 86400;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st209;
tr825:
	{ if (s->number64 <= (UINT32_MAX / 3600)) {
	                  s->number64 *= 3600;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st209;
tr826:
	{ if (s->number64 <= (UINT32_MAX / 60)) {
	                  s->number64 *= 60;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st209;
tr828:
	{ if (s->number64 <= (UINT32_MAX / 604800)) {
	                  s->number64 *= 604800;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st209;
st209:
	if ( ++p == pe )
		goto _test_eof209;
case 209:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr829;
		case 32: goto tr829;
		case 40: goto tr830;
		case 41: goto tr831;
		case 2058: goto tr833;
		case 2107: goto tr834;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr832;
	goto tr27;
tr62:
	{
		s->buffer_length = 0;
	}
	goto st210;
tr38:
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st210;
tr835:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st210;
tr834:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st210;
st210:
	if ( ++p == pe )
		goto _test_eof210;
case 210:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr836;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr835;
	goto tr39;
tr4809:
	{
		s->r_class = s->default_class;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 211;goto st321;} }
	goto st211;
tr4831:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 211;goto st321;} }
	goto st211;
st211:
	if ( ++p == pe )
		goto _test_eof211;
case 211:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr838;
		case 32: goto tr838;
		case 40: goto tr839;
		case 41: goto tr840;
		case 65: goto st277;
		case 70: goto st280;
		case 80: goto st284;
		case 97: goto st277;
		case 102: goto st280;
		case 112: goto st284;
		case 3082: goto tr841;
		case 3131: goto tr842;
		case 3338: goto tr72;
		case 3387: goto tr72;
		case 3594: goto tr843;
		case 3643: goto tr844;
	}
	goto tr837;
tr846:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st212;
tr847:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st212;
tr848:
	{
		s->line_counter++;
	}
	goto st212;
tr1013:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 212; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st212;
tr838:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	goto st212;
tr839:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	goto st212;
tr840:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	goto st212;
tr841:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	goto st212;
st212:
	if ( ++p == pe )
		goto _test_eof212;
case 212:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st212;
		case 32: goto st212;
		case 40: goto tr846;
		case 41: goto tr847;
		case 58: goto tr75;
		case 65: goto tr124;
		case 67: goto tr125;
		case 68: goto tr126;
		case 69: goto tr127;
		case 72: goto tr128;
		case 73: goto tr129;
		case 75: goto tr130;
		case 76: goto tr131;
		case 77: goto tr132;
		case 78: goto tr133;
		case 79: goto tr134;
		case 80: goto tr135;
		case 82: goto tr136;
		case 83: goto tr137;
		case 84: goto tr138;
		case 85: goto tr139;
		case 87: goto tr140;
		case 90: goto tr141;
		case 92: goto tr80;
		case 97: goto tr124;
		case 99: goto tr125;
		case 100: goto tr126;
		case 101: goto tr127;
		case 104: goto tr128;
		case 105: goto tr129;
		case 107: goto tr130;
		case 108: goto tr131;
		case 109: goto tr132;
		case 110: goto tr133;
		case 111: goto tr134;
		case 112: goto tr135;
		case 114: goto tr136;
		case 115: goto tr137;
		case 116: goto tr138;
		case 117: goto tr139;
		case 119: goto tr140;
		case 122: goto tr141;
		case 3082: goto tr848;
		case 3131: goto tr849;
		case 3338: goto tr75;
		case 3387: goto tr75;
		case 3594: goto tr850;
		case 3643: goto tr851;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr75;
	} else if ( _widec > 47 ) {
		if ( _widec > 57 ) {
			if ( 60 <= _widec )
				goto tr75;
		} else if ( _widec >= 48 )
			goto tr123;
	} else
		goto tr75;
	goto tr673;
tr124:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 213;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 213;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 213;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 213;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 213;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 213;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 213;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 213;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 213;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 213;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 213;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 213;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 213;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 213;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 213;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 213;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 213;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 213;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 213;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 213;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 213;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 213;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 213;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 213;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 213;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 213;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 213;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 213;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 213;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 213;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 213;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 213;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 213;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st213;
st213:
	if ( ++p == pe )
		goto _test_eof213;
case 213:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr853;
		case 32: goto tr853;
		case 40: goto tr854;
		case 41: goto tr855;
		case 65: goto st277;
		case 70: goto st280;
		case 80: goto st284;
		case 97: goto st277;
		case 102: goto st280;
		case 112: goto st284;
		case 2826: goto tr89;
		case 2875: goto tr90;
		case 3082: goto tr856;
		case 3131: goto tr857;
		case 3338: goto tr858;
		case 3387: goto tr859;
		case 3594: goto tr860;
		case 3643: goto tr861;
	}
	goto tr852;
tr863:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st214;
tr864:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st214;
tr853:
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st214;
tr854:
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st214;
tr855:
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st214;
st214:
	if ( ++p == pe )
		goto _test_eof214;
case 214:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st214;
		case 32: goto st214;
		case 40: goto tr863;
		case 41: goto tr864;
		case 92: goto tr80;
		case 2826: goto tr95;
		case 2875: goto tr96;
		case 3082: goto tr865;
		case 3131: goto tr113;
		case 3338: goto tr114;
		case 3387: goto tr115;
		case 3594: goto tr866;
		case 3643: goto tr116;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr75;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr75;
	} else
		goto tr75;
	goto tr85;
tr107:
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 1647;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 1647;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 1647;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 1647;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 1647;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 1647;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 1647;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 1647;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 1647;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 1647;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 1647;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 1647;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 1647;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 1647;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 1647;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 1647;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 1647;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 1647;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 1647;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 1647;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 1647;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 1647;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 1647;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 1647;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 1647;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 1647;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 1647;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 1647;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 1647;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 1647;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 1647;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 1647;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 1647;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop if required from the callback.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1647; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1647; goto _out;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1647;
tr114:
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 1647;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 1647;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 1647;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 1647;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 1647;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 1647;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 1647;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 1647;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 1647;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 1647;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 1647;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 1647;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 1647;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 1647;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 1647;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 1647;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 1647;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 1647;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 1647;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 1647;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 1647;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 1647;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 1647;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 1647;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 1647;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 1647;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 1647;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 1647;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 1647;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 1647;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 1647;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 1647;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 1647;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop if required from the callback.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1647; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1647; goto _out;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1647;
tr144:
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 1647;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 1647;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 1647;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 1647;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 1647;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 1647;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 1647;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 1647;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 1647;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 1647;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 1647;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 1647;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 1647;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 1647;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 1647;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 1647;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 1647;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 1647;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 1647;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 1647;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 1647;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 1647;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 1647;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 1647;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 1647;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 1647;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 1647;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 1647;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 1647;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 1647;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 1647;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 1647;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 1647;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1647;
tr858:
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 1647;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 1647;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 1647;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 1647;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 1647;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 1647;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 1647;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 1647;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 1647;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 1647;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 1647;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 1647;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 1647;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 1647;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 1647;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 1647;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 1647;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 1647;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 1647;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 1647;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 1647;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 1647;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 1647;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 1647;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 1647;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 1647;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 1647;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 1647;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 1647;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 1647;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 1647;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 1647;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 1647;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop if required from the callback.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1647; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1647; goto _out;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1647;
tr4801:
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 1647;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 1647;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 1647;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 1647;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 1647;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 1647;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 1647;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 1647;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 1647;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 1647;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 1647;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 1647;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 1647;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 1647;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 1647;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 1647;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 1647;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 1647;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 1647;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 1647;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 1647;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 1647;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 1647;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 1647;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 1647;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 1647;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 1647;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 1647;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 1647;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 1647;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 1647;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 1647;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 1647;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		s->line_counter++;
	}
	goto st1647;
st1647:
	if ( ++p == pe )
		goto _test_eof1647;
case 1647:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4863;
		case 32: goto tr4863;
		case 36: goto st193;
		case 40: goto tr4864;
		case 41: goto tr4865;
		case 42: goto tr4788;
		case 92: goto tr4788;
		case 95: goto tr4788;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr4866;
		case 2107: goto tr4867;
	}
	if ( _widec < 64 ) {
		if ( 45 <= _widec && _widec <= 57 )
			goto tr4788;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr4788;
	} else
		goto tr4788;
	goto tr900;
tr868:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st215;
tr869:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st215;
tr938:
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st215;
tr939:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st215;
tr940:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st215;
tr901:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st215;
tr902:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st215;
tr903:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st215;
tr4863:
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	goto st215;
tr4864:
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	goto st215;
tr4865:
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	goto st215;
st215:
	if ( ++p == pe )
		goto _test_eof215;
case 215:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st215;
		case 32: goto st215;
		case 40: goto tr868;
		case 41: goto tr869;
		case 65: goto tr5;
		case 67: goto tr6;
		case 68: goto tr7;
		case 69: goto tr8;
		case 72: goto tr9;
		case 73: goto tr10;
		case 75: goto tr11;
		case 76: goto tr12;
		case 77: goto tr13;
		case 78: goto tr14;
		case 79: goto tr15;
		case 80: goto tr16;
		case 82: goto tr17;
		case 83: goto tr18;
		case 84: goto tr19;
		case 85: goto tr20;
		case 87: goto tr21;
		case 90: goto tr22;
		case 97: goto tr5;
		case 99: goto tr6;
		case 100: goto tr7;
		case 101: goto tr8;
		case 104: goto tr9;
		case 105: goto tr10;
		case 107: goto tr11;
		case 108: goto tr12;
		case 109: goto tr13;
		case 110: goto tr14;
		case 111: goto tr15;
		case 112: goto tr16;
		case 114: goto tr17;
		case 115: goto tr18;
		case 116: goto tr19;
		case 117: goto tr20;
		case 119: goto tr21;
		case 122: goto tr22;
		case 1802: goto tr95;
		case 1851: goto tr96;
		case 2058: goto tr870;
		case 2107: goto tr871;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4;
	goto tr0;
tr871:
	{
		s->buffer_length = 0;
	}
	goto st216;
tr872:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st216;
tr942:
	{
		s->buffer_length = 0;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st216;
tr947:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		s->buffer_length = 0;
	}
	goto st216;
tr951:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st216;
tr905:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		s->buffer_length = 0;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st216;
tr4867:
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		s->buffer_length = 0;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	goto st216;
st216:
	if ( ++p == pe )
		goto _test_eof216;
case 216:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 1802: goto tr98;
		case 2058: goto tr873;
	}
	if ( _widec > 1919 ) {
		if ( 1920 <= _widec && _widec <= 2175 )
			goto tr872;
	} else if ( _widec >= 1664 )
		goto tr97;
	goto tr91;
tr108:
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 217;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 217;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 217;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 217;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 217;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 217;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 217;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 217;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 217;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 217;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 217;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 217;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 217;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 217;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 217;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 217;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 217;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 217;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 217;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 217;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 217;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 217;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 217;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 217;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 217;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 217;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 217;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 217;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 217;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 217;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 217;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 217;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 217;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		s->buffer_length = 0;
	}
	goto st217;
tr115:
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 217;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 217;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 217;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 217;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 217;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 217;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 217;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 217;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 217;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 217;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 217;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 217;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 217;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 217;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 217;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 217;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 217;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 217;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 217;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 217;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 217;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 217;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 217;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 217;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 217;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 217;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 217;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 217;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 217;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 217;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 217;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 217;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 217;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st217;
tr859:
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 217;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 217;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 217;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 217;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 217;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 217;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 217;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 217;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 217;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 217;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 217;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 217;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 217;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 217;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 217;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 217;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 217;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 217;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 217;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 217;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 217;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 217;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 217;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 217;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 217;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 217;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 217;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 217;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 217;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 217;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 217;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 217;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 217;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		s->buffer_length = 0;
	}
	goto st217;
st217:
	if ( ++p == pe )
		goto _test_eof217;
case 217:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr874;
		case 32: goto tr874;
		case 40: goto tr875;
		case 41: goto tr876;
		case 1802: goto tr877;
		case 1851: goto tr878;
		case 2058: goto tr877;
		case 2107: goto tr878;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr97;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr97;
	} else
		goto tr97;
	goto tr85;
tr879:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st218;
tr874:
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st218;
tr875:
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st218;
tr876:
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st218;
tr880:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st218;
tr881:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st218;
st218:
	if ( ++p == pe )
		goto _test_eof218;
case 218:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr879;
		case 32: goto tr879;
		case 40: goto tr880;
		case 41: goto tr881;
		case 1802: goto tr98;
		case 1851: goto tr882;
		case 2058: goto tr98;
		case 2107: goto tr882;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr97;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr97;
	} else
		goto tr97;
	goto tr91;
tr860:
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 1648;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 1648;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 1648;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 1648;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 1648;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 1648;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 1648;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 1648;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 1648;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 1648;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 1648;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 1648;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 1648;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 1648;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 1648;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 1648;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 1648;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 1648;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 1648;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 1648;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 1648;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 1648;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 1648;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 1648;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 1648;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 1648;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 1648;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 1648;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 1648;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 1648;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 1648;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 1648;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 1648;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop if required from the callback.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1648; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1648; goto _out;}
		}
	}
	goto st1648;
tr866:
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 1648;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 1648;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 1648;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 1648;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 1648;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 1648;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 1648;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 1648;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 1648;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 1648;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 1648;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 1648;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 1648;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 1648;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 1648;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 1648;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 1648;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 1648;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 1648;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 1648;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 1648;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 1648;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 1648;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 1648;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 1648;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 1648;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 1648;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 1648;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 1648;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 1648;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 1648;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 1648;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 1648;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop if required from the callback.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1648; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1648; goto _out;}
		}
	}
	goto st1648;
st1648:
	if ( ++p == pe )
		goto _test_eof1648;
case 1648:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr4868;
		case 32: goto tr4868;
		case 36: goto tr4794;
		case 40: goto tr4869;
		case 41: goto tr4870;
		case 42: goto tr4797;
		case 58: goto tr75;
		case 92: goto tr4798;
		case 95: goto tr4797;
		case 2826: goto tr89;
		case 2875: goto tr90;
		case 3082: goto tr4866;
		case 3131: goto tr4871;
		case 3338: goto tr107;
		case 3387: goto tr108;
		case 3594: goto tr4866;
		case 3643: goto tr4872;
	}
	if ( _widec < 60 ) {
		if ( _widec < 11 ) {
			if ( _widec <= 8 )
				goto tr75;
		} else if ( _widec > 44 ) {
			if ( 45 <= _widec && _widec <= 57 )
				goto tr4797;
		} else
			goto tr75;
	} else if ( _widec > 63 ) {
		if ( _widec < 91 ) {
			if ( 64 <= _widec && _widec <= 90 )
				goto tr4797;
		} else if ( _widec > 96 ) {
			if ( _widec > 122 ) {
				if ( 123 <= _widec )
					goto tr75;
			} else if ( _widec >= 97 )
				goto tr4797;
		} else
			goto tr75;
	} else
		goto tr75;
	goto tr900;
tr884:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st219;
tr885:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st219;
tr1014:
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st219;
tr1015:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st219;
tr1016:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st219;
tr4868:
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	goto st219;
tr4869:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	goto st219;
tr4870:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	goto st219;
st219:
	if ( ++p == pe )
		goto _test_eof219;
case 219:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st219;
		case 32: goto st219;
		case 40: goto tr884;
		case 41: goto tr885;
		case 58: goto tr75;
		case 65: goto tr124;
		case 67: goto tr125;
		case 68: goto tr126;
		case 69: goto tr127;
		case 72: goto tr128;
		case 73: goto tr129;
		case 75: goto tr130;
		case 76: goto tr131;
		case 77: goto tr132;
		case 78: goto tr133;
		case 79: goto tr134;
		case 80: goto tr135;
		case 82: goto tr136;
		case 83: goto tr137;
		case 84: goto tr138;
		case 85: goto tr139;
		case 87: goto tr140;
		case 90: goto tr141;
		case 92: goto tr80;
		case 97: goto tr124;
		case 99: goto tr125;
		case 100: goto tr126;
		case 101: goto tr127;
		case 104: goto tr128;
		case 105: goto tr129;
		case 107: goto tr130;
		case 108: goto tr131;
		case 109: goto tr132;
		case 110: goto tr133;
		case 111: goto tr134;
		case 112: goto tr135;
		case 114: goto tr136;
		case 115: goto tr137;
		case 116: goto tr138;
		case 117: goto tr139;
		case 119: goto tr140;
		case 122: goto tr141;
		case 2826: goto tr95;
		case 2875: goto tr96;
		case 3082: goto tr870;
		case 3131: goto tr886;
		case 3338: goto tr114;
		case 3387: goto tr115;
		case 3594: goto tr870;
		case 3643: goto tr887;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr75;
	} else if ( _widec > 47 ) {
		if ( _widec > 57 ) {
			if ( 60 <= _widec )
				goto tr75;
		} else if ( _widec >= 48 )
			goto tr123;
	} else
		goto tr75;
	goto tr120;
tr125:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 220;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 220;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 220;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 220;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 220;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 220;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 220;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 220;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 220;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 220;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 220;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 220;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 220;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 220;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 220;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 220;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 220;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 220;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 220;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 220;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 220;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 220;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 220;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 220;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 220;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 220;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 220;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 220;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 220;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 220;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 220;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 220;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 220;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st220;
st220:
	if ( ++p == pe )
		goto _test_eof220;
case 220:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr86;
		case 32: goto tr86;
		case 40: goto tr87;
		case 41: goto tr88;
		case 65: goto st18;
		case 68: goto st22;
		case 69: goto st29;
		case 78: goto st32;
		case 83: goto st36;
		case 97: goto st18;
		case 100: goto st22;
		case 101: goto st29;
		case 110: goto st32;
		case 115: goto st36;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr89;
		case 2107: goto tr90;
	}
	goto tr852;
tr126:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 221;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 221;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 221;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 221;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 221;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 221;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 221;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 221;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 221;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 221;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 221;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 221;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 221;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 221;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 221;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 221;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 221;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 221;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 221;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 221;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 221;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 221;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 221;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 221;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 221;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 221;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 221;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 221;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 221;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 221;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 221;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 221;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 221;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st221;
st221:
	if ( ++p == pe )
		goto _test_eof221;
case 221:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr86;
		case 32: goto tr86;
		case 40: goto tr87;
		case 41: goto tr88;
		case 72: goto st41;
		case 78: goto st45;
		case 83: goto st53;
		case 104: goto st41;
		case 110: goto st45;
		case 115: goto st53;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr89;
		case 2107: goto tr90;
	}
	goto tr852;
tr127:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 222;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 222;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 222;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 222;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 222;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 222;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 222;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 222;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 222;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 222;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 222;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 222;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 222;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 222;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 222;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 222;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 222;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 222;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 222;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 222;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 222;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 222;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 222;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 222;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 222;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 222;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 222;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 222;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 222;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 222;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 222;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 222;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 222;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st222;
st222:
	if ( ++p == pe )
		goto _test_eof222;
case 222:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr86;
		case 32: goto tr86;
		case 40: goto tr87;
		case 41: goto tr88;
		case 85: goto st58;
		case 117: goto st58;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr89;
		case 2107: goto tr90;
	}
	goto tr852;
tr128:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 223;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 223;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 223;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 223;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 223;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 223;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 223;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 223;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 223;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 223;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 223;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 223;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 223;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 223;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 223;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 223;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 223;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 223;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 223;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 223;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 223;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 223;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 223;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 223;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 223;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 223;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 223;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 223;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 223;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 223;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 223;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 223;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 223;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st223;
st223:
	if ( ++p == pe )
		goto _test_eof223;
case 223:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr86;
		case 32: goto tr86;
		case 40: goto tr87;
		case 41: goto tr88;
		case 73: goto st65;
		case 84: goto st69;
		case 105: goto st65;
		case 116: goto st69;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr89;
		case 2107: goto tr90;
	}
	goto tr852;
tr129:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 224;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 224;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 224;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 224;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 224;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 224;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 224;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 224;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 224;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 224;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 224;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 224;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 224;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 224;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 224;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 224;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 224;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 224;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 224;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 224;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 224;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 224;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 224;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 224;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 224;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 224;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 224;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 224;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 224;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 224;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 224;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 224;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 224;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st224;
st224:
	if ( ++p == pe )
		goto _test_eof224;
case 224:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr86;
		case 32: goto tr86;
		case 40: goto tr87;
		case 41: goto tr88;
		case 78: goto st185;
		case 80: goto st77;
		case 110: goto st185;
		case 112: goto st77;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr89;
		case 2107: goto tr90;
	}
	goto tr852;
tr130:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 225;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 225;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 225;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 225;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 225;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 225;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 225;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 225;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 225;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 225;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 225;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 225;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 225;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 225;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 225;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 225;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 225;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 225;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 225;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 225;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 225;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 225;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 225;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 225;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 225;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 225;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 225;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 225;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 225;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 225;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 225;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 225;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 225;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st225;
st225:
	if ( ++p == pe )
		goto _test_eof225;
case 225:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr86;
		case 32: goto tr86;
		case 40: goto tr87;
		case 41: goto tr88;
		case 69: goto st85;
		case 88: goto st87;
		case 101: goto st85;
		case 120: goto st87;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr89;
		case 2107: goto tr90;
	}
	goto tr852;
tr131:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 226;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 226;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 226;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 226;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 226;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 226;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 226;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 226;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 226;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 226;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 226;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 226;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 226;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 226;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 226;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 226;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 226;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 226;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 226;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 226;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 226;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 226;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 226;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 226;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 226;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 226;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 226;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 226;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 226;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 226;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 226;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 226;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 226;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st226;
st226:
	if ( ++p == pe )
		goto _test_eof226;
case 226:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr86;
		case 32: goto tr86;
		case 40: goto tr87;
		case 41: goto tr88;
		case 51: goto st89;
		case 54: goto st91;
		case 79: goto st93;
		case 80: goto st95;
		case 111: goto st93;
		case 112: goto st95;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr89;
		case 2107: goto tr90;
	}
	goto tr852;
tr132:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 227;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 227;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 227;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 227;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 227;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 227;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 227;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 227;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 227;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 227;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 227;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 227;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 227;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 227;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 227;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 227;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 227;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 227;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 227;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 227;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 227;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 227;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 227;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 227;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 227;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 227;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 227;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 227;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 227;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 227;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 227;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 227;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 227;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st227;
st227:
	if ( ++p == pe )
		goto _test_eof227;
case 227:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr86;
		case 32: goto tr86;
		case 40: goto tr87;
		case 41: goto tr88;
		case 73: goto st97;
		case 88: goto st101;
		case 105: goto st97;
		case 120: goto st101;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr89;
		case 2107: goto tr90;
	}
	goto tr852;
tr133:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 228;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 228;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 228;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 228;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 228;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 228;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 228;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 228;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 228;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 228;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 228;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 228;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 228;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 228;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 228;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 228;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 228;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 228;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 228;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 228;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 228;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 228;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 228;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 228;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 228;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 228;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 228;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 228;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 228;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 228;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 228;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 228;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 228;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st228;
st228:
	if ( ++p == pe )
		goto _test_eof228;
case 228:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr86;
		case 32: goto tr86;
		case 40: goto tr87;
		case 41: goto tr88;
		case 65: goto st103;
		case 73: goto st107;
		case 83: goto st109;
		case 97: goto st103;
		case 105: goto st107;
		case 115: goto st109;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr89;
		case 2107: goto tr90;
	}
	goto tr852;
tr134:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 229;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 229;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 229;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 229;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 229;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 229;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 229;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 229;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 229;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 229;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 229;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 229;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 229;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 229;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 229;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 229;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 229;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 229;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 229;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 229;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 229;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 229;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 229;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 229;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 229;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 229;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 229;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 229;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 229;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 229;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 229;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 229;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 229;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st229;
st229:
	if ( ++p == pe )
		goto _test_eof229;
case 229:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr86;
		case 32: goto tr86;
		case 40: goto tr87;
		case 41: goto tr88;
		case 80: goto st119;
		case 112: goto st119;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr89;
		case 2107: goto tr90;
	}
	goto tr852;
tr135:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 230;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 230;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 230;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 230;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 230;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 230;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 230;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 230;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 230;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 230;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 230;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 230;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 230;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 230;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 230;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 230;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 230;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 230;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 230;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 230;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 230;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 230;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 230;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 230;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 230;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 230;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 230;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 230;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 230;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 230;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 230;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 230;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 230;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st230;
st230:
	if ( ++p == pe )
		goto _test_eof230;
case 230:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr86;
		case 32: goto tr86;
		case 40: goto tr87;
		case 41: goto tr88;
		case 84: goto st129;
		case 116: goto st129;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr89;
		case 2107: goto tr90;
	}
	goto tr852;
tr136:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 231;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 231;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 231;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 231;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 231;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 231;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 231;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 231;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 231;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 231;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 231;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 231;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 231;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 231;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 231;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 231;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 231;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 231;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 231;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 231;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 231;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 231;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 231;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 231;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 231;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 231;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 231;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 231;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 231;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 231;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 231;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 231;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 231;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st231;
st231:
	if ( ++p == pe )
		goto _test_eof231;
case 231:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr86;
		case 32: goto tr86;
		case 40: goto tr87;
		case 41: goto tr88;
		case 80: goto st132;
		case 82: goto st133;
		case 84: goto st137;
		case 112: goto st132;
		case 114: goto st133;
		case 116: goto st137;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr89;
		case 2107: goto tr90;
	}
	goto tr852;
tr137:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 232;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 232;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 232;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 232;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 232;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 232;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 232;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 232;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 232;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 232;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 232;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 232;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 232;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 232;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 232;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 232;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 232;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 232;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 232;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 232;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 232;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 232;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 232;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 232;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 232;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 232;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 232;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 232;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 232;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 232;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 232;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 232;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 232;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st232;
st232:
	if ( ++p == pe )
		goto _test_eof232;
case 232:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr86;
		case 32: goto tr86;
		case 40: goto tr87;
		case 41: goto tr88;
		case 77: goto st139;
		case 79: goto st144;
		case 80: goto st146;
		case 82: goto st148;
		case 83: goto st150;
		case 86: goto st154;
		case 109: goto st139;
		case 111: goto st144;
		case 112: goto st146;
		case 114: goto st148;
		case 115: goto st150;
		case 118: goto st154;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr89;
		case 2107: goto tr90;
	}
	goto tr852;
tr138:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 233;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 233;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 233;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 233;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 233;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 233;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 233;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 233;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 233;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 233;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 233;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 233;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 233;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 233;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 233;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 233;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 233;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 233;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 233;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 233;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 233;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 233;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 233;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 233;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 233;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 233;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 233;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 233;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 233;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 233;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 233;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 233;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 233;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st233;
st233:
	if ( ++p == pe )
		goto _test_eof233;
case 233:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr86;
		case 32: goto tr86;
		case 40: goto tr87;
		case 41: goto tr88;
		case 76: goto st158;
		case 88: goto st161;
		case 89: goto st163;
		case 108: goto st158;
		case 120: goto st161;
		case 121: goto st163;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr89;
		case 2107: goto tr90;
	}
	goto tr852;
tr139:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 234;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 234;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 234;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 234;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 234;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 234;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 234;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 234;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 234;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 234;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 234;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 234;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 234;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 234;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 234;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 234;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 234;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 234;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 234;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 234;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 234;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 234;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 234;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 234;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 234;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 234;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 234;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 234;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 234;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 234;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 234;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 234;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 234;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st234;
st234:
	if ( ++p == pe )
		goto _test_eof234;
case 234:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr86;
		case 32: goto tr86;
		case 40: goto tr87;
		case 41: goto tr88;
		case 82: goto st168;
		case 114: goto st168;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr89;
		case 2107: goto tr90;
	}
	goto tr852;
tr140:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 235;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 235;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 235;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 235;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 235;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 235;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 235;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 235;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 235;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 235;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 235;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 235;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 235;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 235;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 235;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 235;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 235;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 235;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 235;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 235;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 235;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 235;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 235;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 235;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 235;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 235;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 235;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 235;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 235;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 235;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 235;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 235;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 235;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st235;
st235:
	if ( ++p == pe )
		goto _test_eof235;
case 235:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr86;
		case 32: goto tr86;
		case 40: goto tr87;
		case 41: goto tr88;
		case 65: goto st171;
		case 97: goto st171;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr89;
		case 2107: goto tr90;
	}
	goto tr852;
tr141:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 236;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 236;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 236;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 236;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 236;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 236;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 236;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 236;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 236;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 236;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 236;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 236;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 236;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 236;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 236;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 236;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 236;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 236;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 236;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 236;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 236;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 236;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 236;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 236;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 236;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 236;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 236;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 236;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 236;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 236;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 236;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 236;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 236;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st236;
st236:
	if ( ++p == pe )
		goto _test_eof236;
case 236:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr86;
		case 32: goto tr86;
		case 40: goto tr87;
		case 41: goto tr88;
		case 79: goto st177;
		case 111: goto st177;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr89;
		case 2107: goto tr90;
	}
	goto tr852;
tr886:
	{
		s->buffer_length = 0;
	}
	goto st237;
tr888:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st237;
tr1017:
	{
		s->buffer_length = 0;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st237;
tr955:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		s->buffer_length = 0;
	}
	goto st237;
tr959:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st237;
tr924:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		s->buffer_length = 0;
	}
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st237;
tr4871:
	{
		s->buffer_length = 0;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	goto st237;
st237:
	if ( ++p == pe )
		goto _test_eof237;
case 237:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 1802: goto tr98;
		case 2058: goto tr889;
	}
	if ( _widec > 1919 ) {
		if ( 1920 <= _widec && _widec <= 2175 )
			goto tr888;
	} else if ( _widec >= 1664 )
		goto tr97;
	goto tr85;
tr142:
	{
		s->line_counter++;
	}
	goto st1649;
tr991:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1649; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1649;
tr889:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1649; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop if required from the callback.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1649; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1649; goto _out;}
		}
	}
	goto st1649;
tr930:
	{
		s->line_counter++;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop if required from the callback.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1649; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1649; goto _out;}
		}
	}
	goto st1649;
tr923:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop if required from the callback.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1649; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1649; goto _out;}
		}
	}
	goto st1649;
tr4799:
	{
		s->line_counter++;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st1649;
st1649:
	if ( ++p == pe )
		goto _test_eof1649;
case 1649:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr4793;
		case 32: goto tr4793;
		case 36: goto tr4794;
		case 40: goto tr4795;
		case 41: goto tr4796;
		case 42: goto tr4797;
		case 58: goto tr75;
		case 65: goto tr4875;
		case 67: goto tr4876;
		case 68: goto tr4877;
		case 69: goto tr4878;
		case 72: goto tr4879;
		case 73: goto tr4880;
		case 75: goto tr4881;
		case 76: goto tr4882;
		case 77: goto tr4883;
		case 78: goto tr4884;
		case 79: goto tr4885;
		case 80: goto tr4886;
		case 82: goto tr4887;
		case 83: goto tr4888;
		case 84: goto tr4889;
		case 85: goto tr4890;
		case 87: goto tr4891;
		case 90: goto tr4892;
		case 92: goto tr4798;
		case 95: goto tr4797;
		case 97: goto tr4875;
		case 99: goto tr4876;
		case 100: goto tr4877;
		case 101: goto tr4878;
		case 104: goto tr4879;
		case 105: goto tr4880;
		case 107: goto tr4881;
		case 108: goto tr4882;
		case 109: goto tr4883;
		case 110: goto tr4884;
		case 111: goto tr4885;
		case 112: goto tr4886;
		case 114: goto tr4887;
		case 115: goto tr4888;
		case 116: goto tr4889;
		case 117: goto tr4890;
		case 119: goto tr4891;
		case 122: goto tr4892;
		case 2826: goto tr4789;
		case 2875: goto tr4790;
		case 3082: goto tr4799;
		case 3131: goto tr4800;
		case 3338: goto tr4801;
		case 3387: goto tr4802;
		case 3594: goto tr4803;
		case 3643: goto tr4804;
	}
	if ( _widec < 60 ) {
		if ( _widec < 11 ) {
			if ( _widec <= 8 )
				goto tr75;
		} else if ( _widec > 44 ) {
			if ( _widec > 47 ) {
				if ( 48 <= _widec && _widec <= 57 )
					goto tr4874;
			} else if ( _widec >= 45 )
				goto tr4797;
		} else
			goto tr75;
	} else if ( _widec > 63 ) {
		if ( _widec < 91 ) {
			if ( 64 <= _widec && _widec <= 89 )
				goto tr4797;
		} else if ( _widec > 96 ) {
			if ( _widec > 121 ) {
				if ( 123 <= _widec )
					goto tr75;
			} else if ( _widec >= 98 )
				goto tr4797;
		} else
			goto tr75;
	} else
		goto tr75;
	goto tr4873;
tr4794:
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 238;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 238;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 238;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 238;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 238;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 238;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 238;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 238;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 238;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 238;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 238;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 238;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 238;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 238;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 238;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 238;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 238;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 238;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 238;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 238;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 238;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 238;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 238;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 238;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 238;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 238;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 238;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 238;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 238;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 238;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 238;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 238;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 238;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st238;
st238:
	if ( ++p == pe )
		goto _test_eof238;
case 238:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr86;
		case 32: goto tr86;
		case 40: goto tr87;
		case 41: goto tr88;
		case 73: goto tr785;
		case 79: goto tr786;
		case 84: goto tr787;
		case 105: goto tr785;
		case 111: goto tr786;
		case 116: goto tr787;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr89;
		case 2107: goto tr90;
	}
	goto tr890;
tr786:
	{
		ERR(ZS_OK);
	}
	goto st239;
st239:
	if ( ++p == pe )
		goto _test_eof239;
case 239:
	switch( (*p) ) {
		case 82: goto st240;
		case 114: goto st240;
	}
	goto tr784;
st240:
	if ( ++p == pe )
		goto _test_eof240;
case 240:
	switch( (*p) ) {
		case 73: goto st241;
		case 105: goto st241;
	}
	goto tr784;
st241:
	if ( ++p == pe )
		goto _test_eof241;
case 241:
	switch( (*p) ) {
		case 71: goto st242;
		case 103: goto st242;
	}
	goto tr784;
st242:
	if ( ++p == pe )
		goto _test_eof242;
case 242:
	switch( (*p) ) {
		case 73: goto st243;
		case 105: goto st243;
	}
	goto tr784;
st243:
	if ( ++p == pe )
		goto _test_eof243;
case 243:
	switch( (*p) ) {
		case 78: goto st244;
		case 110: goto st244;
	}
	goto tr784;
st244:
	if ( ++p == pe )
		goto _test_eof244;
case 244:
	switch( (*p) ) {
		case 32: goto tr896;
		case 59: goto tr896;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr896;
	} else if ( (*p) >= 9 )
		goto tr896;
	goto tr784;
tr787:
	{
		ERR(ZS_OK);
	}
	goto st245;
st245:
	if ( ++p == pe )
		goto _test_eof245;
case 245:
	switch( (*p) ) {
		case 84: goto st246;
		case 116: goto st246;
	}
	goto tr784;
st246:
	if ( ++p == pe )
		goto _test_eof246;
case 246:
	switch( (*p) ) {
		case 76: goto st247;
		case 108: goto st247;
	}
	goto tr784;
st247:
	if ( ++p == pe )
		goto _test_eof247;
case 247:
	switch( (*p) ) {
		case 32: goto tr899;
		case 59: goto tr899;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr899;
	} else if ( (*p) >= 9 )
		goto tr899;
	goto tr784;
tr4797:
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 248;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 248;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 248;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 248;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 248;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 248;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 248;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 248;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 248;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 248;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 248;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 248;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 248;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 248;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 248;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 248;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 248;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 248;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 248;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 248;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 248;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 248;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 248;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 248;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 248;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 248;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 248;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 248;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 248;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 248;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 248;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 248;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 248;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 248;goto st321;} }
	goto st248;
st248:
	if ( ++p == pe )
		goto _test_eof248;
case 248:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr901;
		case 32: goto tr901;
		case 40: goto tr902;
		case 41: goto tr903;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr904;
		case 2107: goto tr905;
	}
	goto tr900;
tr4874:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 249;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 249;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 249;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 249;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 249;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 249;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 249;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 249;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 249;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 249;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 249;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 249;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 249;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 249;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 249;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 249;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 249;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 249;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 249;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 249;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 249;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 249;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 249;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 249;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 249;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 249;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 249;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 249;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 249;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 249;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 249;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 249;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 249;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 249;goto st321;} }
	goto st249;
st249:
	if ( ++p == pe )
		goto _test_eof249;
case 249:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr907;
		case 32: goto tr907;
		case 40: goto tr908;
		case 41: goto tr909;
		case 68: goto tr32;
		case 72: goto tr33;
		case 77: goto tr34;
		case 83: goto st207;
		case 87: goto tr36;
		case 100: goto tr32;
		case 104: goto tr33;
		case 109: goto tr34;
		case 115: goto st207;
		case 119: goto tr36;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr910;
		case 2107: goto tr911;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr31;
	goto tr906;
tr913:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st250;
tr914:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st250;
tr907:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st250;
tr908:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st250;
tr909:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st250;
st250:
	if ( ++p == pe )
		goto _test_eof250;
case 250:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st250;
		case 32: goto st250;
		case 40: goto tr913;
		case 41: goto tr914;
		case 65: goto tr5;
		case 67: goto tr6;
		case 68: goto tr7;
		case 69: goto tr8;
		case 72: goto tr9;
		case 73: goto tr10;
		case 75: goto tr11;
		case 76: goto tr12;
		case 77: goto tr13;
		case 78: goto tr14;
		case 79: goto tr15;
		case 80: goto tr16;
		case 82: goto tr17;
		case 83: goto tr18;
		case 84: goto tr19;
		case 85: goto tr20;
		case 87: goto tr21;
		case 90: goto tr22;
		case 97: goto tr5;
		case 99: goto tr6;
		case 100: goto tr7;
		case 101: goto tr8;
		case 104: goto tr9;
		case 105: goto tr10;
		case 107: goto tr11;
		case 108: goto tr12;
		case 109: goto tr13;
		case 110: goto tr14;
		case 111: goto tr15;
		case 112: goto tr16;
		case 114: goto tr17;
		case 115: goto tr18;
		case 116: goto tr19;
		case 117: goto tr20;
		case 119: goto tr21;
		case 122: goto tr22;
		case 1802: goto tr95;
		case 1851: goto tr96;
		case 2058: goto tr915;
		case 2107: goto tr916;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4;
	goto tr0;
tr916:
	{
		s->buffer_length = 0;
	}
	goto st251;
tr917:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st251;
tr911:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		s->buffer_length = 0;
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st251;
st251:
	if ( ++p == pe )
		goto _test_eof251;
case 251:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 1802: goto tr98;
		case 2058: goto tr918;
	}
	if ( _widec > 1919 ) {
		if ( 1920 <= _widec && _widec <= 2175 )
			goto tr917;
	} else if ( _widec >= 1664 )
		goto tr97;
	goto tr154;
tr4875:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 252;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 252;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 252;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 252;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 252;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 252;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 252;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 252;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 252;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 252;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 252;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 252;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 252;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 252;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 252;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 252;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 252;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 252;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 252;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 252;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 252;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 252;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 252;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 252;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 252;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 252;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 252;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 252;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 252;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 252;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 252;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 252;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 252;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 252;goto st321;} }
	goto st252;
st252:
	if ( ++p == pe )
		goto _test_eof252;
case 252:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr920;
		case 32: goto tr920;
		case 40: goto tr921;
		case 41: goto tr922;
		case 65: goto st277;
		case 70: goto st280;
		case 80: goto st284;
		case 97: goto st277;
		case 102: goto st280;
		case 112: goto st284;
		case 2826: goto tr89;
		case 2875: goto tr90;
		case 3082: goto tr923;
		case 3131: goto tr924;
		case 3338: goto tr858;
		case 3387: goto tr859;
		case 3594: goto tr925;
		case 3643: goto tr926;
	}
	goto tr919;
tr928:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st253;
tr929:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st253;
tr920:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st253;
tr921:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st253;
tr922:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st253;
st253:
	if ( ++p == pe )
		goto _test_eof253;
case 253:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st253;
		case 32: goto st253;
		case 40: goto tr928;
		case 41: goto tr929;
		case 58: goto tr75;
		case 65: goto tr124;
		case 67: goto tr125;
		case 68: goto tr126;
		case 69: goto tr127;
		case 72: goto tr128;
		case 73: goto tr129;
		case 75: goto tr130;
		case 76: goto tr131;
		case 77: goto tr132;
		case 78: goto tr133;
		case 79: goto tr134;
		case 80: goto tr135;
		case 82: goto tr136;
		case 83: goto tr137;
		case 84: goto tr138;
		case 85: goto tr139;
		case 87: goto tr140;
		case 90: goto tr141;
		case 92: goto tr80;
		case 97: goto tr124;
		case 99: goto tr125;
		case 100: goto tr126;
		case 101: goto tr127;
		case 104: goto tr128;
		case 105: goto tr129;
		case 107: goto tr130;
		case 108: goto tr131;
		case 109: goto tr132;
		case 110: goto tr133;
		case 111: goto tr134;
		case 112: goto tr135;
		case 114: goto tr136;
		case 115: goto tr137;
		case 116: goto tr138;
		case 117: goto tr139;
		case 119: goto tr140;
		case 122: goto tr141;
		case 2826: goto tr95;
		case 2875: goto tr96;
		case 3082: goto tr930;
		case 3131: goto tr886;
		case 3338: goto tr114;
		case 3387: goto tr115;
		case 3594: goto tr931;
		case 3643: goto tr887;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr75;
	} else if ( _widec > 47 ) {
		if ( _widec > 57 ) {
			if ( 60 <= _widec )
				goto tr75;
		} else if ( _widec >= 48 )
			goto tr123;
	} else
		goto tr75;
	goto tr120;
tr146:
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 1650;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 1650;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 1650;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 1650;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 1650;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 1650;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 1650;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 1650;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 1650;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 1650;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 1650;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 1650;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 1650;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 1650;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 1650;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 1650;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 1650;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 1650;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 1650;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 1650;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 1650;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 1650;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 1650;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 1650;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 1650;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 1650;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 1650;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 1650;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 1650;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 1650;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 1650;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 1650;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 1650;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st1650;
tr931:
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 1650;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 1650;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 1650;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 1650;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 1650;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 1650;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 1650;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 1650;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 1650;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 1650;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 1650;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 1650;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 1650;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 1650;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 1650;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 1650;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 1650;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 1650;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 1650;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 1650;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 1650;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 1650;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 1650;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 1650;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 1650;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 1650;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 1650;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 1650;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 1650;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 1650;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 1650;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 1650;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 1650;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop if required from the callback.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1650; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1650; goto _out;}
		}
	}
	goto st1650;
tr925:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 1650;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 1650;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 1650;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 1650;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 1650;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 1650;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 1650;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 1650;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 1650;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 1650;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 1650;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 1650;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 1650;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 1650;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 1650;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 1650;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 1650;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 1650;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 1650;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 1650;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 1650;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 1650;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 1650;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 1650;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 1650;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 1650;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 1650;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 1650;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 1650;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 1650;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 1650;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 1650;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 1650;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (rdata_tail - s->r_data > UINT16_MAX) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->r_data_length = rdata_tail - s->r_data;

		s->state = ZS_STATE_DATA;

		// Execute the record callback.
		if (s->process.automatic) {
			if (s->process.record != NULL) {
				s->process.record(s);

				// Stop if required from the callback.
				if (s->state == ZS_STATE_STOP) {
					{p++; cs = 1650; goto _out;}
				}
			}
		} else {
			// Return if external processing.
			p--; {p++; cs = 1650; goto _out;}
		}
	}
	goto st1650;
tr4803:
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 1650;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 1650;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 1650;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 1650;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 1650;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 1650;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 1650;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 1650;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 1650;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 1650;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 1650;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 1650;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 1650;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 1650;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 1650;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 1650;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 1650;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 1650;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 1650;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 1650;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 1650;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 1650;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 1650;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 1650;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 1650;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 1650;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 1650;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 1650;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 1650;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 1650;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 1650;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 1650;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 1650;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st1650;
st1650:
	if ( ++p == pe )
		goto _test_eof1650;
case 1650:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr4868;
		case 32: goto tr4868;
		case 36: goto tr4794;
		case 40: goto tr4869;
		case 41: goto tr4870;
		case 42: goto tr4797;
		case 58: goto tr75;
		case 65: goto tr4875;
		case 67: goto tr4876;
		case 68: goto tr4877;
		case 69: goto tr4878;
		case 72: goto tr4879;
		case 73: goto tr4880;
		case 75: goto tr4881;
		case 76: goto tr4882;
		case 77: goto tr4883;
		case 78: goto tr4884;
		case 79: goto tr4885;
		case 80: goto tr4886;
		case 82: goto tr4887;
		case 83: goto tr4888;
		case 84: goto tr4889;
		case 85: goto tr4890;
		case 87: goto tr4891;
		case 90: goto tr4892;
		case 92: goto tr4798;
		case 95: goto tr4797;
		case 97: goto tr4875;
		case 99: goto tr4876;
		case 100: goto tr4877;
		case 101: goto tr4878;
		case 104: goto tr4879;
		case 105: goto tr4880;
		case 107: goto tr4881;
		case 108: goto tr4882;
		case 109: goto tr4883;
		case 110: goto tr4884;
		case 111: goto tr4885;
		case 112: goto tr4886;
		case 114: goto tr4887;
		case 115: goto tr4888;
		case 116: goto tr4889;
		case 117: goto tr4890;
		case 119: goto tr4891;
		case 122: goto tr4892;
		case 2826: goto tr89;
		case 2875: goto tr90;
		case 3082: goto tr4893;
		case 3131: goto tr4871;
		case 3338: goto tr107;
		case 3387: goto tr108;
		case 3594: goto tr4893;
		case 3643: goto tr4872;
	}
	if ( _widec < 60 ) {
		if ( _widec < 11 ) {
			if ( _widec <= 8 )
				goto tr75;
		} else if ( _widec > 44 ) {
			if ( _widec > 47 ) {
				if ( 48 <= _widec && _widec <= 57 )
					goto tr4874;
			} else if ( _widec >= 45 )
				goto tr4797;
		} else
			goto tr75;
	} else if ( _widec > 63 ) {
		if ( _widec < 91 ) {
			if ( 64 <= _widec && _widec <= 89 )
				goto tr4797;
		} else if ( _widec > 96 ) {
			if ( _widec > 121 ) {
				if ( 123 <= _widec )
					goto tr75;
			} else if ( _widec >= 98 )
				goto tr4797;
		} else
			goto tr75;
	} else
		goto tr75;
	goto tr4873;
tr4876:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 254;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 254;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 254;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 254;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 254;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 254;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 254;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 254;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 254;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 254;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 254;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 254;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 254;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 254;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 254;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 254;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 254;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 254;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 254;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 254;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 254;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 254;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 254;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 254;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 254;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 254;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 254;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 254;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 254;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 254;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 254;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 254;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 254;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 254;goto st321;} }
	goto st254;
st254:
	if ( ++p == pe )
		goto _test_eof254;
case 254:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr901;
		case 32: goto tr901;
		case 40: goto tr902;
		case 41: goto tr903;
		case 65: goto st18;
		case 68: goto st22;
		case 69: goto st29;
		case 78: goto st32;
		case 83: goto st36;
		case 97: goto st18;
		case 100: goto st22;
		case 101: goto st29;
		case 110: goto st32;
		case 115: goto st36;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr904;
		case 2107: goto tr905;
	}
	goto tr919;
tr4877:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 255;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 255;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 255;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 255;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 255;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 255;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 255;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 255;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 255;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 255;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 255;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 255;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 255;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 255;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 255;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 255;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 255;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 255;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 255;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 255;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 255;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 255;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 255;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 255;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 255;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 255;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 255;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 255;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 255;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 255;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 255;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 255;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 255;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 255;goto st321;} }
	goto st255;
st255:
	if ( ++p == pe )
		goto _test_eof255;
case 255:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr901;
		case 32: goto tr901;
		case 40: goto tr902;
		case 41: goto tr903;
		case 72: goto st41;
		case 78: goto st45;
		case 83: goto st53;
		case 104: goto st41;
		case 110: goto st45;
		case 115: goto st53;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr904;
		case 2107: goto tr905;
	}
	goto tr919;
tr4878:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 256;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 256;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 256;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 256;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 256;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 256;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 256;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 256;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 256;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 256;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 256;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 256;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 256;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 256;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 256;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 256;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 256;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 256;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 256;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 256;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 256;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 256;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 256;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 256;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 256;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 256;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 256;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 256;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 256;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 256;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 256;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 256;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 256;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 256;goto st321;} }
	goto st256;
st256:
	if ( ++p == pe )
		goto _test_eof256;
case 256:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr901;
		case 32: goto tr901;
		case 40: goto tr902;
		case 41: goto tr903;
		case 85: goto st58;
		case 117: goto st58;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr904;
		case 2107: goto tr905;
	}
	goto tr919;
tr4879:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 257;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 257;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 257;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 257;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 257;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 257;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 257;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 257;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 257;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 257;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 257;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 257;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 257;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 257;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 257;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 257;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 257;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 257;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 257;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 257;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 257;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 257;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 257;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 257;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 257;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 257;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 257;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 257;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 257;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 257;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 257;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 257;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 257;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 257;goto st321;} }
	goto st257;
st257:
	if ( ++p == pe )
		goto _test_eof257;
case 257:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr901;
		case 32: goto tr901;
		case 40: goto tr902;
		case 41: goto tr903;
		case 73: goto st65;
		case 84: goto st69;
		case 105: goto st65;
		case 116: goto st69;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr904;
		case 2107: goto tr905;
	}
	goto tr919;
tr4880:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 258;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 258;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 258;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 258;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 258;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 258;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 258;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 258;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 258;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 258;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 258;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 258;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 258;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 258;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 258;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 258;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 258;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 258;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 258;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 258;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 258;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 258;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 258;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 258;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 258;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 258;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 258;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 258;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 258;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 258;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 258;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 258;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 258;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 258;goto st321;} }
	goto st258;
st258:
	if ( ++p == pe )
		goto _test_eof258;
case 258:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr901;
		case 32: goto tr901;
		case 40: goto tr902;
		case 41: goto tr903;
		case 78: goto st185;
		case 80: goto st77;
		case 110: goto st185;
		case 112: goto st77;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr904;
		case 2107: goto tr905;
	}
	goto tr919;
tr4881:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 259;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 259;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 259;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 259;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 259;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 259;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 259;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 259;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 259;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 259;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 259;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 259;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 259;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 259;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 259;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 259;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 259;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 259;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 259;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 259;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 259;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 259;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 259;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 259;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 259;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 259;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 259;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 259;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 259;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 259;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 259;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 259;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 259;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 259;goto st321;} }
	goto st259;
st259:
	if ( ++p == pe )
		goto _test_eof259;
case 259:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr901;
		case 32: goto tr901;
		case 40: goto tr902;
		case 41: goto tr903;
		case 69: goto st85;
		case 88: goto st87;
		case 101: goto st85;
		case 120: goto st87;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr904;
		case 2107: goto tr905;
	}
	goto tr919;
tr4882:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 260;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 260;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 260;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 260;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 260;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 260;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 260;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 260;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 260;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 260;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 260;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 260;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 260;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 260;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 260;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 260;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 260;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 260;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 260;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 260;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 260;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 260;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 260;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 260;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 260;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 260;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 260;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 260;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 260;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 260;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 260;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 260;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 260;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 260;goto st321;} }
	goto st260;
st260:
	if ( ++p == pe )
		goto _test_eof260;
case 260:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr901;
		case 32: goto tr901;
		case 40: goto tr902;
		case 41: goto tr903;
		case 51: goto st89;
		case 54: goto st91;
		case 79: goto st93;
		case 80: goto st95;
		case 111: goto st93;
		case 112: goto st95;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr904;
		case 2107: goto tr905;
	}
	goto tr919;
tr4883:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 261;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 261;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 261;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 261;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 261;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 261;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 261;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 261;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 261;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 261;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 261;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 261;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 261;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 261;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 261;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 261;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 261;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 261;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 261;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 261;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 261;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 261;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 261;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 261;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 261;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 261;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 261;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 261;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 261;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 261;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 261;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 261;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 261;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 261;goto st321;} }
	goto st261;
st261:
	if ( ++p == pe )
		goto _test_eof261;
case 261:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr901;
		case 32: goto tr901;
		case 40: goto tr902;
		case 41: goto tr903;
		case 73: goto st97;
		case 88: goto st101;
		case 105: goto st97;
		case 120: goto st101;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr904;
		case 2107: goto tr905;
	}
	goto tr919;
tr4884:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 262;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 262;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 262;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 262;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 262;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 262;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 262;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 262;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 262;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 262;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 262;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 262;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 262;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 262;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 262;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 262;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 262;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 262;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 262;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 262;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 262;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 262;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 262;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 262;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 262;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 262;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 262;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 262;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 262;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 262;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 262;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 262;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 262;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 262;goto st321;} }
	goto st262;
st262:
	if ( ++p == pe )
		goto _test_eof262;
case 262:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr901;
		case 32: goto tr901;
		case 40: goto tr902;
		case 41: goto tr903;
		case 65: goto st103;
		case 73: goto st107;
		case 83: goto st109;
		case 97: goto st103;
		case 105: goto st107;
		case 115: goto st109;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr904;
		case 2107: goto tr905;
	}
	goto tr919;
tr4885:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 263;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 263;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 263;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 263;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 263;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 263;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 263;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 263;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 263;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 263;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 263;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 263;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 263;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 263;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 263;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 263;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 263;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 263;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 263;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 263;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 263;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 263;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 263;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 263;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 263;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 263;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 263;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 263;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 263;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 263;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 263;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 263;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 263;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 263;goto st321;} }
	goto st263;
st263:
	if ( ++p == pe )
		goto _test_eof263;
case 263:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr901;
		case 32: goto tr901;
		case 40: goto tr902;
		case 41: goto tr903;
		case 80: goto st119;
		case 112: goto st119;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr904;
		case 2107: goto tr905;
	}
	goto tr919;
tr4886:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 264;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 264;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 264;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 264;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 264;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 264;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 264;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 264;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 264;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 264;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 264;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 264;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 264;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 264;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 264;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 264;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 264;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 264;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 264;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 264;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 264;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 264;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 264;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 264;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 264;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 264;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 264;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 264;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 264;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 264;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 264;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 264;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 264;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 264;goto st321;} }
	goto st264;
st264:
	if ( ++p == pe )
		goto _test_eof264;
case 264:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr901;
		case 32: goto tr901;
		case 40: goto tr902;
		case 41: goto tr903;
		case 84: goto st129;
		case 116: goto st129;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr904;
		case 2107: goto tr905;
	}
	goto tr919;
tr4887:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 265;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 265;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 265;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 265;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 265;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 265;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 265;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 265;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 265;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 265;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 265;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 265;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 265;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 265;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 265;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 265;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 265;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 265;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 265;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 265;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 265;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 265;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 265;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 265;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 265;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 265;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 265;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 265;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 265;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 265;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 265;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 265;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 265;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 265;goto st321;} }
	goto st265;
st265:
	if ( ++p == pe )
		goto _test_eof265;
case 265:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr901;
		case 32: goto tr901;
		case 40: goto tr902;
		case 41: goto tr903;
		case 80: goto st132;
		case 82: goto st133;
		case 84: goto st137;
		case 112: goto st132;
		case 114: goto st133;
		case 116: goto st137;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr904;
		case 2107: goto tr905;
	}
	goto tr919;
tr4888:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 266;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 266;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 266;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 266;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 266;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 266;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 266;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 266;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 266;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 266;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 266;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 266;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 266;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 266;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 266;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 266;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 266;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 266;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 266;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 266;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 266;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 266;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 266;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 266;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 266;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 266;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 266;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 266;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 266;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 266;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 266;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 266;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 266;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 266;goto st321;} }
	goto st266;
st266:
	if ( ++p == pe )
		goto _test_eof266;
case 266:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr901;
		case 32: goto tr901;
		case 40: goto tr902;
		case 41: goto tr903;
		case 77: goto st139;
		case 79: goto st144;
		case 80: goto st146;
		case 82: goto st148;
		case 83: goto st150;
		case 86: goto st154;
		case 109: goto st139;
		case 111: goto st144;
		case 112: goto st146;
		case 114: goto st148;
		case 115: goto st150;
		case 118: goto st154;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr904;
		case 2107: goto tr905;
	}
	goto tr919;
tr4889:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 267;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 267;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 267;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 267;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 267;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 267;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 267;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 267;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 267;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 267;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 267;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 267;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 267;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 267;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 267;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 267;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 267;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 267;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 267;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 267;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 267;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 267;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 267;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 267;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 267;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 267;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 267;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 267;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 267;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 267;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 267;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 267;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 267;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 267;goto st321;} }
	goto st267;
st267:
	if ( ++p == pe )
		goto _test_eof267;
case 267:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr901;
		case 32: goto tr901;
		case 40: goto tr902;
		case 41: goto tr903;
		case 76: goto st158;
		case 88: goto st161;
		case 89: goto st163;
		case 108: goto st158;
		case 120: goto st161;
		case 121: goto st163;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr904;
		case 2107: goto tr905;
	}
	goto tr919;
tr4890:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 268;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 268;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 268;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 268;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 268;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 268;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 268;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 268;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 268;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 268;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 268;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 268;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 268;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 268;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 268;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 268;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 268;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 268;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 268;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 268;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 268;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 268;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 268;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 268;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 268;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 268;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 268;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 268;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 268;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 268;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 268;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 268;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 268;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 268;goto st321;} }
	goto st268;
st268:
	if ( ++p == pe )
		goto _test_eof268;
case 268:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr901;
		case 32: goto tr901;
		case 40: goto tr902;
		case 41: goto tr903;
		case 82: goto st168;
		case 114: goto st168;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr904;
		case 2107: goto tr905;
	}
	goto tr919;
tr4891:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 269;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 269;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 269;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 269;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 269;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 269;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 269;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 269;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 269;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 269;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 269;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 269;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 269;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 269;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 269;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 269;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 269;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 269;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 269;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 269;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 269;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 269;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 269;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 269;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 269;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 269;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 269;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 269;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 269;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 269;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 269;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 269;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 269;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 269;goto st321;} }
	goto st269;
st269:
	if ( ++p == pe )
		goto _test_eof269;
case 269:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr901;
		case 32: goto tr901;
		case 40: goto tr902;
		case 41: goto tr903;
		case 65: goto st171;
		case 97: goto st171;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr904;
		case 2107: goto tr905;
	}
	goto tr919;
tr4892:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 270;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 270;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 270;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 270;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 270;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 270;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 270;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 270;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 270;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 270;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 270;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 270;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 270;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 270;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 270;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 270;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 270;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 270;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 270;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 270;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 270;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 270;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 270;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 270;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 270;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 270;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 270;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 270;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 270;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 270;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 270;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 270;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 270;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 270;goto st321;} }
	goto st270;
st270:
	if ( ++p == pe )
		goto _test_eof270;
case 270:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr901;
		case 32: goto tr901;
		case 40: goto tr902;
		case 41: goto tr903;
		case 79: goto st177;
		case 111: goto st177;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr904;
		case 2107: goto tr905;
	}
	goto tr919;
tr4798:
	{
		if (pe - p == 1) {
			*wrap = WRAP_DETECTED;
		}
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 271;goto st321;} }
	goto st271;
st271:
	if ( ++p == pe )
		goto _test_eof271;
case 271:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr932;
		case 32: goto tr932;
		case 35: goto tr100;
		case 40: goto tr934;
		case 41: goto tr935;
		case 1802: goto tr99;
		case 1851: goto tr99;
		case 2058: goto tr936;
		case 2107: goto tr937;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr99;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr99;
	} else
		goto tr99;
	goto tr933;
tr932:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (*wrap == WRAP_NONE) {
			p--;
		}
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 272;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 272;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 272;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 272;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 272;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 272;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 272;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 272;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 272;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 272;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 272;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 272;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 272;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 272;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 272;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 272;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 272;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 272;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 272;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 272;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 272;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 272;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 272;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 272;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 272;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 272;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 272;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 272;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 272;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 272;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 272;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 272;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 272;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st272;
tr934:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	{
		if (*wrap == WRAP_NONE) {
			p--;
		}
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 272;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 272;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 272;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 272;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 272;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 272;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 272;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 272;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 272;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 272;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 272;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 272;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 272;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 272;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 272;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 272;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 272;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 272;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 272;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 272;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 272;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 272;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 272;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 272;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 272;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 272;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 272;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 272;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 272;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 272;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 272;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 272;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 272;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st272;
tr935:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	{
		if (*wrap == WRAP_NONE) {
			p--;
		}
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 272;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 272;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 272;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 272;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 272;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 272;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 272;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 272;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 272;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 272;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 272;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 272;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 272;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 272;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 272;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 272;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 272;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 272;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 272;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 272;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 272;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 272;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 272;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 272;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 272;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 272;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 272;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 272;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 272;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 272;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 272;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 272;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 272;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st272;
tr936:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	{
		if (*wrap == WRAP_NONE) {
			p--;
		}
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 272;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 272;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 272;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 272;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 272;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 272;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 272;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 272;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 272;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 272;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 272;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 272;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 272;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 272;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 272;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 272;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 272;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 272;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 272;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 272;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 272;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 272;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 272;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 272;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 272;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 272;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 272;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 272;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 272;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 272;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 272;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 272;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 272;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st272;
st272:
	if ( ++p == pe )
		goto _test_eof272;
case 272:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr938;
		case 32: goto tr938;
		case 40: goto tr939;
		case 41: goto tr940;
		case 65: goto tr5;
		case 67: goto tr6;
		case 68: goto tr7;
		case 69: goto tr8;
		case 72: goto tr9;
		case 73: goto tr10;
		case 75: goto tr11;
		case 76: goto tr12;
		case 77: goto tr13;
		case 78: goto tr14;
		case 79: goto tr15;
		case 80: goto tr16;
		case 82: goto tr17;
		case 83: goto tr18;
		case 84: goto tr19;
		case 85: goto tr20;
		case 87: goto tr21;
		case 90: goto tr22;
		case 97: goto tr5;
		case 99: goto tr6;
		case 100: goto tr7;
		case 101: goto tr8;
		case 104: goto tr9;
		case 105: goto tr10;
		case 107: goto tr11;
		case 108: goto tr12;
		case 109: goto tr13;
		case 110: goto tr14;
		case 111: goto tr15;
		case 112: goto tr16;
		case 114: goto tr17;
		case 115: goto tr18;
		case 116: goto tr19;
		case 117: goto tr20;
		case 119: goto tr21;
		case 122: goto tr22;
		case 1802: goto tr89;
		case 1851: goto tr90;
		case 2058: goto tr941;
		case 2107: goto tr942;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4;
	goto tr120;
tr937:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		s->buffer_length = 0;
	}
	{
		if (*wrap == WRAP_NONE) {
			p--;
		}
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 273;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 273;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 273;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 273;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 273;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 273;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 273;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 273;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 273;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 273;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 273;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 273;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 273;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 273;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 273;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 273;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 273;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 273;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 273;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 273;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 273;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 273;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 273;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 273;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 273;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 273;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 273;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 273;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 273;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 273;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 273;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 273;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 273;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st273;
st273:
	if ( ++p == pe )
		goto _test_eof273;
case 273:
	_widec = (*p);
	if ( (*p) < 11 ) {
		if ( (*p) > 9 ) {
			if ( 10 <= (*p) && (*p) <= 10 ) {
				_widec = (short)(1664 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 58 ) {
		if ( (*p) > 59 ) {
			if ( 60 <= (*p) )
 {				_widec = (short)(1664 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else if ( (*p) >= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 1801: goto tr86;
		case 1802: goto tr89;
		case 1824: goto tr86;
		case 1832: goto tr87;
		case 1833: goto tr88;
		case 1851: goto tr90;
		case 2057: goto tr943;
		case 2058: goto tr944;
		case 2080: goto tr943;
		case 2088: goto tr945;
		case 2089: goto tr946;
		case 2107: goto tr947;
	}
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr806;
	goto tr85;
tr948:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st274;
tr943:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st274;
tr945:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st274;
tr946:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st274;
tr949:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st274;
tr950:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st274;
st274:
	if ( ++p == pe )
		goto _test_eof274;
case 274:
	_widec = (*p);
	if ( (*p) < 11 ) {
		if ( (*p) > 9 ) {
			if ( 10 <= (*p) && (*p) <= 10 ) {
				_widec = (short)(1664 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 58 ) {
		if ( (*p) > 59 ) {
			if ( 60 <= (*p) )
 {				_widec = (short)(1664 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else if ( (*p) >= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 1801: goto st7;
		case 1802: goto tr95;
		case 1824: goto st7;
		case 1832: goto tr93;
		case 1833: goto tr94;
		case 1851: goto tr96;
		case 2057: goto tr948;
		case 2058: goto tr873;
		case 2080: goto tr948;
		case 2088: goto tr949;
		case 2089: goto tr950;
		case 2107: goto tr951;
	}
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr806;
	goto tr91;
tr887:
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 275;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 275;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 275;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 275;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 275;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 275;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 275;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 275;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 275;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 275;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 275;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 275;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 275;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 275;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 275;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 275;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 275;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 275;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 275;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 275;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 275;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 275;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 275;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 275;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 275;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 275;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 275;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 275;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 275;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 275;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 275;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 275;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 275;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st275;
tr1018:
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 275;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 275;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 275;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 275;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 275;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 275;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 275;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 275;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 275;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 275;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 275;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 275;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 275;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 275;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 275;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 275;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 275;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 275;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 275;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 275;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 275;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 275;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 275;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 275;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 275;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 275;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 275;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 275;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 275;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 275;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 275;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 275;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 275;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st275;
tr926:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		s->buffer_length = 0;
	}
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 275;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 275;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 275;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 275;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 275;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 275;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 275;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 275;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 275;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 275;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 275;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 275;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 275;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 275;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 275;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 275;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 275;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 275;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 275;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 275;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 275;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 275;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 275;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 275;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 275;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 275;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 275;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 275;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 275;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 275;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 275;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 275;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 275;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st275;
tr4872:
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 275;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 275;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 275;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 275;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 275;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 275;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 275;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 275;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 275;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 275;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 275;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 275;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 275;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 275;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 275;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 275;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 275;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 275;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 275;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 275;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 275;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 275;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 275;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 275;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 275;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 275;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 275;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 275;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 275;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 275;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 275;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 275;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 275;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	goto st275;
st275:
	if ( ++p == pe )
		goto _test_eof275;
case 275:
	_widec = (*p);
	if ( (*p) < 11 ) {
		if ( (*p) > 9 ) {
			if ( 10 <= (*p) && (*p) <= 10 ) {
				_widec = (short)(1664 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 58 ) {
		if ( (*p) > 59 ) {
			if ( 60 <= (*p) )
 {				_widec = (short)(1664 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else if ( (*p) >= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 1801: goto tr874;
		case 1802: goto tr877;
		case 1824: goto tr874;
		case 1832: goto tr875;
		case 1833: goto tr876;
		case 1851: goto tr878;
		case 2057: goto tr952;
		case 2058: goto tr944;
		case 2080: goto tr952;
		case 2088: goto tr953;
		case 2089: goto tr954;
		case 2107: goto tr955;
	}
	if ( _widec > 1919 ) {
		if ( 1920 <= _widec && _widec <= 2175 )
			goto tr888;
	} else if ( _widec >= 1664 )
		goto tr97;
	goto tr85;
tr956:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st276;
tr952:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st276;
tr953:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st276;
tr954:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st276;
tr957:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st276;
tr958:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st276;
st276:
	if ( ++p == pe )
		goto _test_eof276;
case 276:
	_widec = (*p);
	if ( (*p) < 11 ) {
		if ( (*p) > 9 ) {
			if ( 10 <= (*p) && (*p) <= 10 ) {
				_widec = (short)(1664 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 58 ) {
		if ( (*p) > 59 ) {
			if ( 60 <= (*p) )
 {				_widec = (short)(1664 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else if ( (*p) >= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 1801: goto tr879;
		case 1802: goto tr98;
		case 1824: goto tr879;
		case 1832: goto tr880;
		case 1833: goto tr881;
		case 1851: goto tr882;
		case 2057: goto tr956;
		case 2058: goto tr873;
		case 2080: goto tr956;
		case 2088: goto tr957;
		case 2089: goto tr958;
		case 2107: goto tr959;
	}
	if ( _widec > 1919 ) {
		if ( 1920 <= _widec && _widec <= 2175 )
			goto tr888;
	} else if ( _widec >= 1664 )
		goto tr97;
	goto tr85;
st277:
	if ( ++p == pe )
		goto _test_eof277;
case 277:
	switch( (*p) ) {
		case 65: goto st278;
		case 97: goto st278;
	}
	goto tr39;
st278:
	if ( ++p == pe )
		goto _test_eof278;
case 278:
	switch( (*p) ) {
		case 65: goto st279;
		case 97: goto st279;
	}
	goto tr39;
st279:
	if ( ++p == pe )
		goto _test_eof279;
case 279:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr962;
		case 32: goto tr962;
		case 40: goto tr963;
		case 41: goto tr964;
		case 3082: goto tr965;
		case 3131: goto tr966;
		case 3338: goto tr967;
		case 3387: goto tr967;
		case 3594: goto tr968;
		case 3643: goto tr969;
	}
	goto tr63;
st280:
	if ( ++p == pe )
		goto _test_eof280;
case 280:
	switch( (*p) ) {
		case 83: goto st281;
		case 115: goto st281;
	}
	goto tr39;
st281:
	if ( ++p == pe )
		goto _test_eof281;
case 281:
	switch( (*p) ) {
		case 68: goto st282;
		case 100: goto st282;
	}
	goto tr39;
st282:
	if ( ++p == pe )
		goto _test_eof282;
case 282:
	switch( (*p) ) {
		case 66: goto st283;
		case 98: goto st283;
	}
	goto tr39;
st283:
	if ( ++p == pe )
		goto _test_eof283;
case 283:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr973;
		case 32: goto tr973;
		case 40: goto tr974;
		case 41: goto tr975;
		case 3082: goto tr976;
		case 3131: goto tr977;
		case 3338: goto tr978;
		case 3387: goto tr978;
		case 3594: goto tr979;
		case 3643: goto tr980;
	}
	goto tr63;
st284:
	if ( ++p == pe )
		goto _test_eof284;
case 284:
	switch( (*p) ) {
		case 76: goto st285;
		case 108: goto st285;
	}
	goto tr39;
st285:
	if ( ++p == pe )
		goto _test_eof285;
case 285:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr982;
		case 32: goto tr982;
		case 40: goto tr983;
		case 41: goto tr984;
		case 3082: goto tr985;
		case 3131: goto tr986;
		case 3338: goto tr987;
		case 3387: goto tr987;
		case 3594: goto tr988;
		case 3643: goto tr989;
	}
	goto tr63;
tr143:
	{
		s->buffer_length = 0;
	}
	goto st286;
tr990:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st286;
tr4800:
	{
		s->buffer_length = 0;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st286;
st286:
	if ( ++p == pe )
		goto _test_eof286;
case 286:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 1802: goto tr783;
		case 2058: goto tr991;
	}
	if ( _widec > 1919 ) {
		if ( 1920 <= _widec && _widec <= 2175 )
			goto tr990;
	} else if ( _widec >= 1664 )
		goto tr782;
	goto tr85;
tr4802:
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 287;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 287;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 287;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 287;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 287;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 287;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 287;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 287;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 287;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 287;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 287;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 287;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 287;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 287;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 287;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 287;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 287;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 287;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 287;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 287;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 287;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 287;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 287;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 287;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 287;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 287;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 287;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 287;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 287;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 287;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 287;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 287;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 287;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		s->buffer_length = 0;
	}
	goto st287;
tr145:
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 287;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 287;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 287;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 287;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 287;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 287;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 287;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 287;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 287;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 287;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 287;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 287;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 287;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 287;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 287;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 287;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 287;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 287;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 287;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 287;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 287;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 287;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 287;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 287;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 287;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 287;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 287;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 287;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 287;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 287;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 287;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 287;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 287;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st287;
st287:
	if ( ++p == pe )
		goto _test_eof287;
case 287:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr992;
		case 32: goto tr992;
		case 40: goto tr993;
		case 41: goto tr994;
		case 1802: goto tr995;
		case 1851: goto tr878;
		case 2058: goto tr995;
		case 2107: goto tr878;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr782;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr782;
	} else
		goto tr782;
	goto tr85;
tr996:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st288;
tr992:
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st288;
tr993:
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st288;
tr994:
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st288;
tr997:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st288;
tr998:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st288;
st288:
	if ( ++p == pe )
		goto _test_eof288;
case 288:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr996;
		case 32: goto tr996;
		case 40: goto tr997;
		case 41: goto tr998;
		case 1802: goto tr999;
		case 1851: goto tr882;
		case 2058: goto tr999;
		case 2107: goto tr882;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr782;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr782;
	} else
		goto tr782;
	goto tr91;
tr147:
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 289;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 289;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 289;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 289;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 289;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 289;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 289;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 289;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 289;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 289;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 289;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 289;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 289;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 289;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 289;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 289;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 289;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 289;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 289;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 289;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 289;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 289;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 289;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 289;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 289;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 289;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 289;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 289;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 289;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 289;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 289;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 289;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 289;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st289;
tr4804:
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 289;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 289;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 289;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 289;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 289;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 289;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 289;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 289;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 289;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 289;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 289;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 289;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 289;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 289;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 289;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 289;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 289;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 289;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 289;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 289;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 289;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 289;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 289;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 289;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 289;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 289;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 289;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 289;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 289;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 289;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 289;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 289;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 289;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st289;
st289:
	if ( ++p == pe )
		goto _test_eof289;
case 289:
	_widec = (*p);
	if ( (*p) < 11 ) {
		if ( (*p) > 9 ) {
			if ( 10 <= (*p) && (*p) <= 10 ) {
				_widec = (short)(1664 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 58 ) {
		if ( (*p) > 59 ) {
			if ( 60 <= (*p) )
 {				_widec = (short)(1664 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else if ( (*p) >= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 1801: goto tr992;
		case 1802: goto tr995;
		case 1824: goto tr992;
		case 1832: goto tr993;
		case 1833: goto tr994;
		case 1851: goto tr878;
		case 2057: goto tr1000;
		case 2058: goto tr944;
		case 2080: goto tr1000;
		case 2088: goto tr1001;
		case 2089: goto tr1002;
		case 2107: goto tr955;
	}
	if ( _widec > 1919 ) {
		if ( 1920 <= _widec && _widec <= 2175 )
			goto tr990;
	} else if ( _widec >= 1664 )
		goto tr782;
	goto tr85;
tr1003:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st290;
tr1000:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st290;
tr1001:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st290;
tr1002:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st290;
tr1004:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st290;
tr1005:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st290;
st290:
	if ( ++p == pe )
		goto _test_eof290;
case 290:
	_widec = (*p);
	if ( (*p) < 11 ) {
		if ( (*p) > 9 ) {
			if ( 10 <= (*p) && (*p) <= 10 ) {
				_widec = (short)(1664 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 58 ) {
		if ( (*p) > 59 ) {
			if ( 60 <= (*p) )
 {				_widec = (short)(1664 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else if ( (*p) >= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 1801: goto tr996;
		case 1802: goto tr999;
		case 1824: goto tr996;
		case 1832: goto tr997;
		case 1833: goto tr998;
		case 1851: goto tr882;
		case 2057: goto tr1003;
		case 2058: goto tr873;
		case 2080: goto tr1003;
		case 2088: goto tr1004;
		case 2089: goto tr1005;
		case 2107: goto tr959;
	}
	if ( _widec > 1919 ) {
		if ( 1920 <= _widec && _widec <= 2175 )
			goto tr990;
	} else if ( _widec >= 1664 )
		goto tr782;
	goto tr85;
tr116:
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 291;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 291;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 291;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 291;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 291;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 291;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 291;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 291;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 291;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 291;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 291;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 291;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 291;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 291;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 291;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 291;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 291;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 291;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 291;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 291;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 291;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 291;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 291;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 291;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 291;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 291;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 291;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 291;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 291;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 291;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 291;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 291;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 291;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st291;
tr109:
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 291;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 291;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 291;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 291;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 291;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 291;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 291;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 291;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 291;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 291;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 291;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 291;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 291;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 291;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 291;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 291;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 291;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 291;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 291;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 291;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 291;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 291;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 291;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 291;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 291;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 291;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 291;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 291;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 291;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 291;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 291;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 291;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 291;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st291;
tr861:
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 291;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 291;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 291;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 291;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 291;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 291;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 291;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 291;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 291;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 291;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 291;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 291;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 291;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 291;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 291;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 291;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 291;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 291;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 291;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 291;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 291;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 291;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 291;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 291;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 291;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 291;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 291;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 291;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 291;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 291;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 291;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 291;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 291;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st291;
st291:
	if ( ++p == pe )
		goto _test_eof291;
case 291:
	_widec = (*p);
	if ( (*p) < 11 ) {
		if ( (*p) > 9 ) {
			if ( 10 <= (*p) && (*p) <= 10 ) {
				_widec = (short)(1664 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 58 ) {
		if ( (*p) > 59 ) {
			if ( 60 <= (*p) )
 {				_widec = (short)(1664 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else if ( (*p) >= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 1801: goto tr874;
		case 1802: goto tr877;
		case 1824: goto tr874;
		case 1832: goto tr875;
		case 1833: goto tr876;
		case 1851: goto tr878;
		case 2057: goto tr1006;
		case 2058: goto tr877;
		case 2080: goto tr1006;
		case 2088: goto tr1007;
		case 2089: goto tr1008;
		case 2107: goto tr177;
	}
	if ( _widec > 1919 ) {
		if ( 1920 <= _widec && _widec <= 2175 )
			goto tr117;
	} else if ( _widec >= 1664 )
		goto tr97;
	goto tr85;
tr1009:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st292;
tr1006:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st292;
tr1007:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st292;
tr1008:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st292;
tr1010:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st292;
tr1011:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st292;
st292:
	if ( ++p == pe )
		goto _test_eof292;
case 292:
	_widec = (*p);
	if ( (*p) < 11 ) {
		if ( (*p) > 9 ) {
			if ( 10 <= (*p) && (*p) <= 10 ) {
				_widec = (short)(1664 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 58 ) {
		if ( (*p) > 59 ) {
			if ( 60 <= (*p) )
 {				_widec = (short)(1664 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else if ( (*p) >= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 1801: goto tr879;
		case 1802: goto tr98;
		case 1824: goto tr879;
		case 1832: goto tr880;
		case 1833: goto tr881;
		case 1851: goto tr882;
		case 2057: goto tr1009;
		case 2058: goto tr98;
		case 2080: goto tr1009;
		case 2088: goto tr1010;
		case 2089: goto tr1011;
		case 2107: goto tr181;
	}
	if ( _widec > 1919 ) {
		if ( 1920 <= _widec && _widec <= 2175 )
			goto tr117;
	} else if ( _widec >= 1664 )
		goto tr97;
	goto tr85;
tr849:
	{
		s->buffer_length = 0;
	}
	goto st293;
tr1012:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st293;
tr842:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		s->buffer_length = 0;
	}
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	goto st293;
st293:
	if ( ++p == pe )
		goto _test_eof293;
case 293:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr1013;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr1012;
	goto tr77;
tr850:
	{
		s->line_counter++;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 294;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 294;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 294;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 294;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 294;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 294;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 294;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 294;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 294;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 294;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 294;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 294;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 294;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 294;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 294;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 294;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 294;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 294;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 294;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 294;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 294;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 294;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 294;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 294;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 294;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 294;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 294;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 294;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 294;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 294;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 294;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 294;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 294;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st294;
tr843:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 294;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 294;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 294;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 294;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 294;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 294;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 294;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 294;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 294;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 294;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 294;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 294;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 294;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 294;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 294;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 294;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 294;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 294;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 294;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 294;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 294;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 294;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 294;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 294;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 294;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 294;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 294;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 294;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 294;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 294;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 294;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 294;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 294;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st294;
st294:
	if ( ++p == pe )
		goto _test_eof294;
case 294:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1014;
		case 32: goto tr1014;
		case 40: goto tr1015;
		case 41: goto tr1016;
		case 58: goto tr75;
		case 65: goto tr124;
		case 67: goto tr125;
		case 68: goto tr126;
		case 69: goto tr127;
		case 72: goto tr128;
		case 73: goto tr129;
		case 75: goto tr130;
		case 76: goto tr131;
		case 77: goto tr132;
		case 78: goto tr133;
		case 79: goto tr134;
		case 80: goto tr135;
		case 82: goto tr136;
		case 83: goto tr137;
		case 84: goto tr138;
		case 85: goto tr139;
		case 87: goto tr140;
		case 90: goto tr141;
		case 92: goto tr80;
		case 97: goto tr124;
		case 99: goto tr125;
		case 100: goto tr126;
		case 101: goto tr127;
		case 104: goto tr128;
		case 105: goto tr129;
		case 107: goto tr130;
		case 108: goto tr131;
		case 109: goto tr132;
		case 110: goto tr133;
		case 111: goto tr134;
		case 112: goto tr135;
		case 114: goto tr136;
		case 115: goto tr137;
		case 116: goto tr138;
		case 117: goto tr139;
		case 119: goto tr140;
		case 122: goto tr141;
		case 2826: goto tr89;
		case 2875: goto tr90;
		case 3082: goto tr941;
		case 3131: goto tr1017;
		case 3338: goto tr107;
		case 3387: goto tr108;
		case 3594: goto tr941;
		case 3643: goto tr1018;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr75;
	} else if ( _widec > 47 ) {
		if ( _widec > 57 ) {
			if ( 60 <= _widec )
				goto tr75;
		} else if ( _widec >= 48 )
			goto tr123;
	} else
		goto tr75;
	goto tr120;
tr851:
	{
		s->buffer_length = 0;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 295;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 295;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 295;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 295;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 295;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 295;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 295;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 295;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 295;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 295;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 295;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 295;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 295;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 295;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 295;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 295;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 295;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 295;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 295;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 295;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 295;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 295;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 295;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 295;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 295;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 295;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 295;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 295;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 295;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 295;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 295;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 295;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 295;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st295;
tr844:
	{
		s->r_owner_length = s->dname_tmp_length;
	}
	{
		s->buffer_length = 0;
	}
	{ s->r_type = KNOT_RRTYPE_A; }
	{
		rdata_tail = s->r_data;
	}
	{
		p--;
		switch (s->r_type) {
		case KNOT_RRTYPE_A:
			{stack[top++] = 295;goto st900;}
		case KNOT_RRTYPE_NS:
		case KNOT_RRTYPE_CNAME:
		case KNOT_RRTYPE_PTR:
		case KNOT_RRTYPE_DNAME:
			{stack[top++] = 295;goto st902;}
		case KNOT_RRTYPE_SOA:
			{stack[top++] = 295;goto st904;}
		case KNOT_RRTYPE_HINFO:
			{stack[top++] = 295;goto st936;}
		case KNOT_RRTYPE_MINFO:
		case KNOT_RRTYPE_RP:
			{stack[top++] = 295;goto st941;}
		case KNOT_RRTYPE_MX:
		case KNOT_RRTYPE_AFSDB:
		case KNOT_RRTYPE_RT:
		case KNOT_RRTYPE_KX:
		case KNOT_RRTYPE_LP:
			{stack[top++] = 295;goto st946;}
		case KNOT_RRTYPE_TXT:
		case KNOT_RRTYPE_SPF:
		case KNOT_RRTYPE_WALLET:
			{stack[top++] = 295;goto st951;}
		case KNOT_RRTYPE_AAAA:
			{stack[top++] = 295;goto st955;}
		case KNOT_RRTYPE_LOC:
			{stack[top++] = 295;goto st957;}
		case KNOT_RRTYPE_SRV:
			{stack[top++] = 295;goto st1012;}
		case KNOT_RRTYPE_NAPTR:
			{stack[top++] = 295;goto st1023;}
		case KNOT_RRTYPE_CERT:
			{stack[top++] = 295;goto st1040;}
		case KNOT_RRTYPE_APL:
			{stack[top++] = 295;goto st1051;}
		case KNOT_RRTYPE_DS:
		case KNOT_RRTYPE_CDS:
			{stack[top++] = 295;goto st1062;}
		case KNOT_RRTYPE_SSHFP:
			{stack[top++] = 295;goto st1075;}
		case KNOT_RRTYPE_IPSECKEY:
			{stack[top++] = 295;goto st1085;}
		case KNOT_RRTYPE_RRSIG:
			{stack[top++] = 295;goto st1124;}
		case KNOT_RRTYPE_NSEC:
			{stack[top++] = 295;goto st1319;}
		case KNOT_RRTYPE_KEY:
		case KNOT_RRTYPE_DNSKEY:
		case KNOT_RRTYPE_CDNSKEY:
			{stack[top++] = 295;goto st1322;}
		case KNOT_RRTYPE_DHCID:
		case KNOT_RRTYPE_OPENPGPKEY:
			{stack[top++] = 295;goto st1333;}
		case KNOT_RRTYPE_NSEC3:
			{stack[top++] = 295;goto st1335;}
		case KNOT_RRTYPE_NSEC3PARAM:
			{stack[top++] = 295;goto st1364;}
		case KNOT_RRTYPE_TLSA:
		case KNOT_RRTYPE_SMIMEA:
			{stack[top++] = 295;goto st1377;}
		case KNOT_RRTYPE_CSYNC:
			{stack[top++] = 295;goto st1390;}
		case KNOT_RRTYPE_ZONEMD:
			{stack[top++] = 295;goto st1396;}
		case KNOT_RRTYPE_NID:
		case KNOT_RRTYPE_L64:
			{stack[top++] = 295;goto st1414;}
		case KNOT_RRTYPE_L32:
			{stack[top++] = 295;goto st1409;}
		case KNOT_RRTYPE_EUI48:
			{stack[top++] = 295;goto st1427;}
		case KNOT_RRTYPE_EUI64:
			{stack[top++] = 295;goto st1433;}
		case KNOT_RRTYPE_URI:
			{stack[top++] = 295;goto st1439;}
		case KNOT_RRTYPE_CAA:
			{stack[top++] = 295;goto st1447;}
		case KNOT_RRTYPE_SVCB:
		case KNOT_RRTYPE_HTTPS:
			{stack[top++] = 295;goto st1455;}
		case KNOT_RRTYPE_DSYNC:
			{stack[top++] = 295;goto st1461;}
		default:
			WARN(ZS_CANNOT_TEXT_DATA);
			{goto st319;}
		}
	}
	goto st295;
st295:
	if ( ++p == pe )
		goto _test_eof295;
case 295:
	_widec = (*p);
	if ( (*p) < 11 ) {
		if ( (*p) > 9 ) {
			if ( 10 <= (*p) && (*p) <= 10 ) {
				_widec = (short)(1664 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 58 ) {
		if ( (*p) > 59 ) {
			if ( 60 <= (*p) )
 {				_widec = (short)(1664 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else if ( (*p) >= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 1801: goto tr86;
		case 1802: goto tr89;
		case 1824: goto tr86;
		case 1832: goto tr87;
		case 1833: goto tr88;
		case 1851: goto tr90;
		case 2057: goto tr1019;
		case 2058: goto tr944;
		case 2080: goto tr1019;
		case 2088: goto tr1020;
		case 2089: goto tr1021;
		case 2107: goto tr955;
	}
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr1012;
	goto tr85;
tr1022:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st296;
tr1019:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st296;
tr1020:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st296;
tr1021:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st296;
tr1023:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st296;
tr1024:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st296;
st296:
	if ( ++p == pe )
		goto _test_eof296;
case 296:
	_widec = (*p);
	if ( (*p) < 11 ) {
		if ( (*p) > 9 ) {
			if ( 10 <= (*p) && (*p) <= 10 ) {
				_widec = (short)(1664 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 58 ) {
		if ( (*p) > 59 ) {
			if ( 60 <= (*p) )
 {				_widec = (short)(1664 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
			}
		} else if ( (*p) >= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 1801: goto st7;
		case 1802: goto tr95;
		case 1824: goto st7;
		case 1832: goto tr93;
		case 1833: goto tr94;
		case 1851: goto tr96;
		case 2057: goto tr1022;
		case 2058: goto tr873;
		case 2080: goto tr1022;
		case 2088: goto tr1023;
		case 2089: goto tr1024;
		case 2107: goto tr959;
	}
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr1012;
	goto tr85;
tr4810:
	{
		s->r_class = s->default_class;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 297;goto st321;} }
	goto st297;
tr4832:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 297;goto st321;} }
	goto st297;
st297:
	if ( ++p == pe )
		goto _test_eof297;
case 297:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr796;
		case 32: goto tr796;
		case 40: goto tr797;
		case 41: goto tr798;
		case 65: goto st18;
		case 68: goto st22;
		case 69: goto st29;
		case 78: goto st32;
		case 83: goto st36;
		case 97: goto st18;
		case 100: goto st22;
		case 101: goto st29;
		case 110: goto st32;
		case 115: goto st36;
		case 2058: goto tr799;
		case 2107: goto tr800;
	}
	goto tr1025;
tr4811:
	{
		s->r_class = s->default_class;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 298;goto st321;} }
	goto st298;
tr4833:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 298;goto st321;} }
	goto st298;
st298:
	if ( ++p == pe )
		goto _test_eof298;
case 298:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr796;
		case 32: goto tr796;
		case 40: goto tr797;
		case 41: goto tr798;
		case 72: goto st41;
		case 78: goto st45;
		case 83: goto st53;
		case 104: goto st41;
		case 110: goto st45;
		case 115: goto st53;
		case 2058: goto tr799;
		case 2107: goto tr800;
	}
	goto tr1025;
tr4812:
	{
		s->r_class = s->default_class;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 299;goto st321;} }
	goto st299;
tr4834:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 299;goto st321;} }
	goto st299;
st299:
	if ( ++p == pe )
		goto _test_eof299;
case 299:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr796;
		case 32: goto tr796;
		case 40: goto tr797;
		case 41: goto tr798;
		case 85: goto st58;
		case 117: goto st58;
		case 2058: goto tr799;
		case 2107: goto tr800;
	}
	goto tr1025;
tr4813:
	{
		s->r_class = s->default_class;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 300;goto st321;} }
	goto st300;
tr4835:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 300;goto st321;} }
	goto st300;
st300:
	if ( ++p == pe )
		goto _test_eof300;
case 300:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr796;
		case 32: goto tr796;
		case 40: goto tr797;
		case 41: goto tr798;
		case 73: goto st65;
		case 84: goto st69;
		case 105: goto st65;
		case 116: goto st69;
		case 2058: goto tr799;
		case 2107: goto tr800;
	}
	goto tr1025;
tr4836:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 301;goto st321;} }
	goto st301;
st301:
	if ( ++p == pe )
		goto _test_eof301;
case 301:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr796;
		case 32: goto tr796;
		case 40: goto tr797;
		case 41: goto tr798;
		case 78: goto st185;
		case 80: goto st77;
		case 110: goto st185;
		case 112: goto st77;
		case 2058: goto tr799;
		case 2107: goto tr800;
	}
	goto tr1025;
tr4815:
	{
		s->r_class = s->default_class;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 302;goto st321;} }
	goto st302;
tr4837:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 302;goto st321;} }
	goto st302;
st302:
	if ( ++p == pe )
		goto _test_eof302;
case 302:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr796;
		case 32: goto tr796;
		case 40: goto tr797;
		case 41: goto tr798;
		case 69: goto st85;
		case 88: goto st87;
		case 101: goto st85;
		case 120: goto st87;
		case 2058: goto tr799;
		case 2107: goto tr800;
	}
	goto tr1025;
tr4816:
	{
		s->r_class = s->default_class;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 303;goto st321;} }
	goto st303;
tr4838:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 303;goto st321;} }
	goto st303;
st303:
	if ( ++p == pe )
		goto _test_eof303;
case 303:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr796;
		case 32: goto tr796;
		case 40: goto tr797;
		case 41: goto tr798;
		case 51: goto st89;
		case 54: goto st91;
		case 79: goto st93;
		case 80: goto st95;
		case 111: goto st93;
		case 112: goto st95;
		case 2058: goto tr799;
		case 2107: goto tr800;
	}
	goto tr1025;
tr4817:
	{
		s->r_class = s->default_class;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 304;goto st321;} }
	goto st304;
tr4839:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 304;goto st321;} }
	goto st304;
st304:
	if ( ++p == pe )
		goto _test_eof304;
case 304:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr796;
		case 32: goto tr796;
		case 40: goto tr797;
		case 41: goto tr798;
		case 73: goto st97;
		case 88: goto st101;
		case 105: goto st97;
		case 120: goto st101;
		case 2058: goto tr799;
		case 2107: goto tr800;
	}
	goto tr1025;
tr4818:
	{
		s->r_class = s->default_class;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 305;goto st321;} }
	goto st305;
tr4840:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 305;goto st321;} }
	goto st305;
st305:
	if ( ++p == pe )
		goto _test_eof305;
case 305:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr796;
		case 32: goto tr796;
		case 40: goto tr797;
		case 41: goto tr798;
		case 65: goto st103;
		case 73: goto st107;
		case 83: goto st109;
		case 97: goto st103;
		case 105: goto st107;
		case 115: goto st109;
		case 2058: goto tr799;
		case 2107: goto tr800;
	}
	goto tr1025;
tr4819:
	{
		s->r_class = s->default_class;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 306;goto st321;} }
	goto st306;
tr4841:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 306;goto st321;} }
	goto st306;
st306:
	if ( ++p == pe )
		goto _test_eof306;
case 306:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr796;
		case 32: goto tr796;
		case 40: goto tr797;
		case 41: goto tr798;
		case 80: goto st119;
		case 112: goto st119;
		case 2058: goto tr799;
		case 2107: goto tr800;
	}
	goto tr1025;
tr4820:
	{
		s->r_class = s->default_class;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 307;goto st321;} }
	goto st307;
tr4842:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 307;goto st321;} }
	goto st307;
st307:
	if ( ++p == pe )
		goto _test_eof307;
case 307:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr796;
		case 32: goto tr796;
		case 40: goto tr797;
		case 41: goto tr798;
		case 84: goto st129;
		case 116: goto st129;
		case 2058: goto tr799;
		case 2107: goto tr800;
	}
	goto tr1025;
tr4821:
	{
		s->r_class = s->default_class;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 308;goto st321;} }
	goto st308;
tr4843:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 308;goto st321;} }
	goto st308;
st308:
	if ( ++p == pe )
		goto _test_eof308;
case 308:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr796;
		case 32: goto tr796;
		case 40: goto tr797;
		case 41: goto tr798;
		case 80: goto st132;
		case 82: goto st133;
		case 84: goto st137;
		case 112: goto st132;
		case 114: goto st133;
		case 116: goto st137;
		case 2058: goto tr799;
		case 2107: goto tr800;
	}
	goto tr1025;
tr4822:
	{
		s->r_class = s->default_class;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 309;goto st321;} }
	goto st309;
tr4844:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 309;goto st321;} }
	goto st309;
st309:
	if ( ++p == pe )
		goto _test_eof309;
case 309:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr796;
		case 32: goto tr796;
		case 40: goto tr797;
		case 41: goto tr798;
		case 77: goto st139;
		case 79: goto st144;
		case 80: goto st146;
		case 82: goto st148;
		case 83: goto st150;
		case 86: goto st154;
		case 109: goto st139;
		case 111: goto st144;
		case 112: goto st146;
		case 114: goto st148;
		case 115: goto st150;
		case 118: goto st154;
		case 2058: goto tr799;
		case 2107: goto tr800;
	}
	goto tr1025;
tr4823:
	{
		s->r_class = s->default_class;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 310;goto st321;} }
	goto st310;
tr4845:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 310;goto st321;} }
	goto st310;
st310:
	if ( ++p == pe )
		goto _test_eof310;
case 310:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr796;
		case 32: goto tr796;
		case 40: goto tr797;
		case 41: goto tr798;
		case 76: goto st158;
		case 88: goto st161;
		case 89: goto st163;
		case 108: goto st158;
		case 120: goto st161;
		case 121: goto st163;
		case 2058: goto tr799;
		case 2107: goto tr800;
	}
	goto tr1025;
tr4824:
	{
		s->r_class = s->default_class;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 311;goto st321;} }
	goto st311;
tr4846:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 311;goto st321;} }
	goto st311;
st311:
	if ( ++p == pe )
		goto _test_eof311;
case 311:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr796;
		case 32: goto tr796;
		case 40: goto tr797;
		case 41: goto tr798;
		case 82: goto st168;
		case 114: goto st168;
		case 2058: goto tr799;
		case 2107: goto tr800;
	}
	goto tr1025;
tr4825:
	{
		s->r_class = s->default_class;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 312;goto st321;} }
	goto st312;
tr4847:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 312;goto st321;} }
	goto st312;
st312:
	if ( ++p == pe )
		goto _test_eof312;
case 312:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr796;
		case 32: goto tr796;
		case 40: goto tr797;
		case 41: goto tr798;
		case 65: goto st171;
		case 97: goto st171;
		case 2058: goto tr799;
		case 2107: goto tr800;
	}
	goto tr1025;
tr4826:
	{
		s->r_class = s->default_class;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 313;goto st321;} }
	goto st313;
tr4848:
	{
		s->r_class = s->default_class;
	}
	{
		s->r_ttl = s->default_ttl;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 313;goto st321;} }
	goto st313;
st313:
	if ( ++p == pe )
		goto _test_eof313;
case 313:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr796;
		case 32: goto tr796;
		case 40: goto tr797;
		case 41: goto tr798;
		case 79: goto st177;
		case 111: goto st177;
		case 2058: goto tr799;
		case 2107: goto tr800;
	}
	goto tr1025;
tr26:
	{
		s->buffer_length = 0;
	}
	goto st314;
tr1026:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st314;
tr4792:
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st314;
tr4862:
	{
		s->buffer_length = 0;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st314;
tr4858:
	{
		NOERR;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st314;
st314:
	if ( ++p == pe )
		goto _test_eof314;
case 314:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 1802: goto tr783;
		case 2058: goto tr1027;
	}
	if ( _widec > 1919 ) {
		if ( 1920 <= _widec && _widec <= 2175 )
			goto tr1026;
	} else if ( _widec >= 1664 )
		goto tr782;
	goto tr91;
tr725:
	{
		s->buffer_length = 0;
	}
	goto st315;
tr1028:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st315;
tr4828:
	{
		s->buffer_length = 0;
	}
	{
		if (s->r_owner_length == 0) {
			WARN(ZS_BAD_PREVIOUS_OWNER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st315;
st315:
	if ( ++p == pe )
		goto _test_eof315;
case 315:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 1802: goto tr783;
		case 2058: goto tr1029;
	}
	if ( _widec > 1919 ) {
		if ( 1920 <= _widec && _widec <= 2175 )
			goto tr1028;
	} else if ( _widec >= 1664 )
		goto tr782;
	goto tr154;
tr4814:
	{
		s->r_class = s->default_class;
	}
	{
		s->dname = s->r_owner;
		s->r_owner_length = 0;
	}
	{ p--; {stack[top++] = 316;goto st321;} }
	goto st316;
st316:
	if ( ++p == pe )
		goto _test_eof316;
case 316:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr796;
		case 32: goto tr796;
		case 40: goto tr797;
		case 41: goto tr798;
		case 78: goto st74;
		case 80: goto st77;
		case 110: goto st74;
		case 112: goto st77;
		case 2058: goto tr799;
		case 2107: goto tr800;
	}
	goto tr1025;
tr159:
	{
		s->buffer_length = 0;
	}
	goto st317;
tr1030:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st317;
tr153:
	{
		if (s->number64 <= UINT32_MAX) {
			s->r_ttl = (uint32_t)(s->number64);
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st317;
st317:
	if ( ++p == pe )
		goto _test_eof317;
case 317:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 1802: goto tr98;
		case 2058: goto tr1031;
	}
	if ( _widec > 1919 ) {
		if ( 1920 <= _widec && _widec <= 2175 )
			goto tr1030;
	} else if ( _widec >= 1664 )
		goto tr97;
	goto tr154;
tr1035:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st318;
tr1034:
	{
		s->line_counter++;
	}
	goto st318;
st318:
	if ( ++p == pe )
		goto _test_eof318;
case 318:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 41 <= (*p) && (*p) <= 41 ) {
			_widec = (short)(640 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(128 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 266: goto tr1033;
		case 522: goto tr1034;
		case 1065: goto tr1035;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 9 )
			goto st318;
	} else if ( _widec > 40 ) {
		if ( 42 <= _widec )
			goto st318;
	} else
		goto st318;
	goto st0;
tr1033:
	{ p--; {stack[top++] = 1651;goto st1641;} }
	{
		s->line_counter++;
	}
	goto st1651;
st1651:
	if ( ++p == pe )
		goto _test_eof1651;
case 1651:
	goto st0;
st319:
	if ( ++p == pe )
		goto _test_eof319;
case 319:
	if ( (*p) == 10 )
		goto tr1037;
	goto tr1036;
tr1036:
	{
		s->buffer_length = 0;
	}
	{
		if ((*p) == '\r') {
			ERR(ZS_DOS_NEWLINE);
		}

		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st320;
tr1038:
	{
		if ((*p) == '\r') {
			ERR(ZS_DOS_NEWLINE);
		}

		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st320;
st320:
	if ( ++p == pe )
		goto _test_eof320;
case 320:
	if ( (*p) == 10 )
		goto tr1039;
	goto tr1038;
tr1037:
	cs = 1652;
	{
		s->buffer_length = 0;
	}
	{
		// Terminate the error context string.
		s->buffer[s->buffer_length++] = 0;

		// Error counter incrementation.
		s->error.counter++;

		// Initialize the fcall stack.
		top = 0;

		// Reset per-record contexts.
		s->long_string = false;
		s->comma_list = false;
		s->pending_backslash = false;

		s->state = ZS_STATE_ERROR;

		// Execute the error callback.
		if (s->process.automatic) {
			p--;
			if (s->process.error != NULL) {
				s->process.error(s);

				// Stop if required from the callback.
				if (s->state == ZS_STATE_STOP) {
					{p++; goto _out;}
				}
			}

			// Stop the scanner if fatal error.
			if (s->error.fatal) {
				{p++; goto _out;}
			}
			{goto st318;}
		} else {
			// Return if external processing.
			p--; cs = 318; {p++; goto _out;}
		}
	}
	{
		s->line_counter++;
	}
	goto _again;
tr1039:
	cs = 1652;
	{
		// Terminate the error context string.
		s->buffer[s->buffer_length++] = 0;

		// Error counter incrementation.
		s->error.counter++;

		// Initialize the fcall stack.
		top = 0;

		// Reset per-record contexts.
		s->long_string = false;
		s->comma_list = false;
		s->pending_backslash = false;

		s->state = ZS_STATE_ERROR;

		// Execute the error callback.
		if (s->process.automatic) {
			p--;
			if (s->process.error != NULL) {
				s->process.error(s);

				// Stop if required from the callback.
				if (s->state == ZS_STATE_STOP) {
					{p++; goto _out;}
				}
			}

			// Stop the scanner if fatal error.
			if (s->error.fatal) {
				{p++; goto _out;}
			}
			{goto st318;}
		} else {
			// Return if external processing.
			p--; cs = 318; {p++; goto _out;}
		}
	}
	{
		s->line_counter++;
	}
	goto _again;
st1652:
	if ( ++p == pe )
		goto _test_eof1652;
case 1652:
	goto st0;
st321:
	if ( ++p == pe )
		goto _test_eof321;
case 321:
	switch( (*p) ) {
		case 42: goto tr1041;
		case 46: goto tr1042;
		case 64: goto st329;
		case 92: goto tr1044;
		case 95: goto tr1041;
	}
	if ( (*p) < 65 ) {
		if ( 45 <= (*p) && (*p) <= 57 )
			goto tr1041;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr1041;
	} else
		goto tr1041;
	goto tr1040;
tr1041:
	{
		s->item_length_position = 0;
		s->dname_tmp_length = 0;
	}
	{
		s->item_length = 0;
		s->item_length_position = s->dname_tmp_length++;
	}
	{
		// Check for maximum dname label length.
		if (s->item_length < ZS_MAX_LABEL_LENGTH) {
			(s->dname)[s->dname_tmp_length++] = (*p);
			s->item_length++;
		} else {
			WARN(ZS_LABEL_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st322;
tr1046:
	{
		// Check for maximum dname label length.
		if (s->item_length < ZS_MAX_LABEL_LENGTH) {
			(s->dname)[s->dname_tmp_length++] = (*p);
			s->item_length++;
		} else {
			WARN(ZS_LABEL_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st322;
tr1050:
	{
		s->item_length = 0;
		s->item_length_position = s->dname_tmp_length++;
	}
	{
		// Check for maximum dname label length.
		if (s->item_length < ZS_MAX_LABEL_LENGTH) {
			(s->dname)[s->dname_tmp_length++] = (*p);
			s->item_length++;
		} else {
			WARN(ZS_LABEL_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st322;
tr1057:
	{
		s->dname_tmp_length++;
	}
	{
		// Check for maximum dname label length.
		if (s->item_length < ZS_MAX_LABEL_LENGTH) {
			(s->dname)[s->dname_tmp_length++] = (*p);
			s->item_length++;
		} else {
			WARN(ZS_LABEL_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st322;
st322:
	if ( ++p == pe )
		goto _test_eof322;
case 322:
	switch( (*p) ) {
		case 32: goto tr1045;
		case 42: goto tr1046;
		case 46: goto tr1047;
		case 59: goto tr1045;
		case 92: goto st324;
		case 95: goto tr1046;
	}
	if ( (*p) < 45 ) {
		if ( (*p) > 10 ) {
			if ( 40 <= (*p) && (*p) <= 41 )
				goto tr1045;
		} else if ( (*p) >= 9 )
			goto tr1045;
	} else if ( (*p) > 57 ) {
		if ( (*p) > 90 ) {
			if ( 97 <= (*p) && (*p) <= 122 )
				goto tr1046;
		} else if ( (*p) >= 65 )
			goto tr1046;
	} else
		goto tr1046;
	goto tr1040;
tr1045:
	{
		// Check for maximum dname length overflow after each label.
		// (at least the next label length must follow).
		if (s->dname_tmp_length < ZS_MAX_DNAME_LENGTH) {
			(s->dname)[s->item_length_position] =
				(uint8_t)(s->item_length);
		} else {
			WARN(ZS_DNAME_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		// Check for (relative + origin) dname length overflow.
		if (s->dname_tmp_length + s->zone_origin_length <= ZS_MAX_DNAME_LENGTH) {
			memcpy(s->dname + s->dname_tmp_length,
			       s->zone_origin,
			       s->zone_origin_length);

			s->dname_tmp_length += s->zone_origin_length;
		} else {
			WARN(ZS_DNAME_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1653;
tr1049:
	{
		// Enough room for the terminal label is guaranteed (_label_exit).
		(s->dname)[s->dname_tmp_length++] = 0;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1653;
tr1056:
	{
		s->dname_tmp_length++;
	}
	{
		// Check for maximum dname length overflow after each label.
		// (at least the next label length must follow).
		if (s->dname_tmp_length < ZS_MAX_DNAME_LENGTH) {
			(s->dname)[s->item_length_position] =
				(uint8_t)(s->item_length);
		} else {
			WARN(ZS_DNAME_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		// Check for (relative + origin) dname length overflow.
		if (s->dname_tmp_length + s->zone_origin_length <= ZS_MAX_DNAME_LENGTH) {
			memcpy(s->dname + s->dname_tmp_length,
			       s->zone_origin,
			       s->zone_origin_length);

			s->dname_tmp_length += s->zone_origin_length;
		} else {
			WARN(ZS_DNAME_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1653;
tr1060:
	{
		// Copy already verified zone origin.
		memcpy(s->dname,
		       s->zone_origin,
		       s->zone_origin_length);

		s->dname_tmp_length = s->zone_origin_length;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1653;
st1653:
	if ( ++p == pe )
		goto _test_eof1653;
case 1653:
	goto st0;
tr1047:
	{
		// Check for maximum dname length overflow after each label.
		// (at least the next label length must follow).
		if (s->dname_tmp_length < ZS_MAX_DNAME_LENGTH) {
			(s->dname)[s->item_length_position] =
				(uint8_t)(s->item_length);
		} else {
			WARN(ZS_DNAME_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st323;
tr1058:
	{
		s->dname_tmp_length++;
	}
	{
		// Check for maximum dname length overflow after each label.
		// (at least the next label length must follow).
		if (s->dname_tmp_length < ZS_MAX_DNAME_LENGTH) {
			(s->dname)[s->item_length_position] =
				(uint8_t)(s->item_length);
		} else {
			WARN(ZS_DNAME_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st323;
st323:
	if ( ++p == pe )
		goto _test_eof323;
case 323:
	switch( (*p) ) {
		case 32: goto tr1049;
		case 42: goto tr1050;
		case 45: goto tr1050;
		case 59: goto tr1049;
		case 92: goto tr1051;
		case 95: goto tr1050;
	}
	if ( (*p) < 47 ) {
		if ( (*p) > 10 ) {
			if ( 40 <= (*p) && (*p) <= 41 )
				goto tr1049;
		} else if ( (*p) >= 9 )
			goto tr1049;
	} else if ( (*p) > 57 ) {
		if ( (*p) > 90 ) {
			if ( 97 <= (*p) && (*p) <= 122 )
				goto tr1050;
		} else if ( (*p) >= 65 )
			goto tr1050;
	} else
		goto tr1050;
	goto tr1040;
tr1044:
	{
		s->item_length_position = 0;
		s->dname_tmp_length = 0;
	}
	{
		s->item_length = 0;
		s->item_length_position = s->dname_tmp_length++;
	}
	goto st324;
tr1051:
	{
		s->item_length = 0;
		s->item_length_position = s->dname_tmp_length++;
	}
	goto st324;
tr1059:
	{
		s->dname_tmp_length++;
	}
	goto st324;
st324:
	if ( ++p == pe )
		goto _test_eof324;
case 324:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr1052;
	goto tr1046;
tr1052:
	{
		if (s->item_length < ZS_MAX_LABEL_LENGTH) {
			(s->dname)[s->dname_tmp_length] = 0;
			s->item_length++;
		} else {
			WARN(ZS_LABEL_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		(s->dname)[s->dname_tmp_length] *= 10;
		(s->dname)[s->dname_tmp_length] += digit_to_num[(uint8_t)(*p)];
	}
	goto st325;
st325:
	if ( ++p == pe )
		goto _test_eof325;
case 325:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr1054;
	goto tr1053;
tr1054:
	{
		(s->dname)[s->dname_tmp_length] *= 10;
		(s->dname)[s->dname_tmp_length] += digit_to_num[(uint8_t)(*p)];
	}
	goto st326;
st326:
	if ( ++p == pe )
		goto _test_eof326;
case 326:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr1055;
	goto tr1053;
tr1055:
	{
		(s->dname)[s->dname_tmp_length] *= 10;
		(s->dname)[s->dname_tmp_length] += digit_to_num[(uint8_t)(*p)];
	}
	goto st327;
st327:
	if ( ++p == pe )
		goto _test_eof327;
case 327:
	switch( (*p) ) {
		case 32: goto tr1056;
		case 42: goto tr1057;
		case 46: goto tr1058;
		case 59: goto tr1056;
		case 92: goto tr1059;
		case 95: goto tr1057;
	}
	if ( (*p) < 45 ) {
		if ( (*p) > 10 ) {
			if ( 40 <= (*p) && (*p) <= 41 )
				goto tr1056;
		} else if ( (*p) >= 9 )
			goto tr1056;
	} else if ( (*p) > 57 ) {
		if ( (*p) > 90 ) {
			if ( 97 <= (*p) && (*p) <= 122 )
				goto tr1057;
		} else if ( (*p) >= 65 )
			goto tr1057;
	} else
		goto tr1057;
	goto tr1053;
tr1042:
	{
		s->item_length_position = 0;
		s->dname_tmp_length = 0;
	}
	goto st328;
st328:
	if ( ++p == pe )
		goto _test_eof328;
case 328:
	switch( (*p) ) {
		case 32: goto tr1049;
		case 59: goto tr1049;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1049;
	} else if ( (*p) >= 9 )
		goto tr1049;
	goto tr1040;
st329:
	if ( ++p == pe )
		goto _test_eof329;
case 329:
	switch( (*p) ) {
		case 32: goto tr1060;
		case 59: goto tr1060;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1060;
	} else if ( (*p) >= 9 )
		goto tr1060;
	goto tr1040;
st330:
	if ( ++p == pe )
		goto _test_eof330;
case 330:
	switch( (*p) ) {
		case 34: goto st336;
		case 92: goto st332;
	}
	if ( (*p) > 58 ) {
		if ( 60 <= (*p) && (*p) <= 126 )
			goto tr1062;
	} else if ( (*p) >= 33 )
		goto tr1062;
	goto tr1061;
tr1062:
	{
		if (rdata_tail <= rdata_stop) {
			// Split long string.
			if (s->long_string &&
			    rdata_tail - s->item_length_location == 1 + MAX_ITEM_LENGTH) {
				// _item_length_exit equivalent.
				*(s->item_length_location) = MAX_ITEM_LENGTH;
				// _item_length_init equivalent.
				s->item_length_location = rdata_tail++;

				if (rdata_tail > rdata_stop) {
					WARN(ZS_TEXT_OVERFLOW);
					p--; {goto st319;}
				}
			}

			*(rdata_tail++) = (*p);
		} else {
			WARN(ZS_TEXT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st331;
tr1066:
	{
		if (s->comma_list) {
			uint8_t *last_two = rdata_tail - 2;
			uint16_t current_len = rdata_tail - s->item_length_location - 2;
			if (last_two[1] == ',') {
				if (current_len <= 1) {
					WARN(ZS_EMPTY_LIST_ITEM);
					p--; {goto st319;}
				} else if (last_two[0] != '\\' || !s->pending_backslash) { // Start a new item.
					*(s->item_length_location) = current_len;
					s->item_length_location = rdata_tail - 1;
				} else { // Remove backslash.
					last_two[0] = ',';
					rdata_tail--;
					s->pending_backslash = false;
				}
			} else if (last_two[1] == '\\') {
				if (s->pending_backslash) { // Remove backslash.
					rdata_tail--;
					s->pending_backslash = false;
				} else {
					s->pending_backslash = true;
				}
			} else if (s->pending_backslash) {
				WARN(ZS_BAD_ALPN_BACKSLASH);
				p--; {goto st319;}
			}
		}
	}
	{
		if (rdata_tail <= rdata_stop) {
			// Split long string.
			if (s->long_string &&
			    rdata_tail - s->item_length_location == 1 + MAX_ITEM_LENGTH) {
				// _item_length_exit equivalent.
				*(s->item_length_location) = MAX_ITEM_LENGTH;
				// _item_length_init equivalent.
				s->item_length_location = rdata_tail++;

				if (rdata_tail > rdata_stop) {
					WARN(ZS_TEXT_OVERFLOW);
					p--; {goto st319;}
				}
			}

			*(rdata_tail++) = (*p);
		} else {
			WARN(ZS_TEXT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st331;
tr1074:
	{
		rdata_tail++;
	}
	{
		if (s->comma_list) {
			uint8_t *last_two = rdata_tail - 2;
			uint16_t current_len = rdata_tail - s->item_length_location - 2;
			if (last_two[1] == ',') {
				if (current_len <= 1) {
					WARN(ZS_EMPTY_LIST_ITEM);
					p--; {goto st319;}
				} else if (last_two[0] != '\\' || !s->pending_backslash) { // Start a new item.
					*(s->item_length_location) = current_len;
					s->item_length_location = rdata_tail - 1;
				} else { // Remove backslash.
					last_two[0] = ',';
					rdata_tail--;
					s->pending_backslash = false;
				}
			} else if (last_two[1] == '\\') {
				if (s->pending_backslash) { // Remove backslash.
					rdata_tail--;
					s->pending_backslash = false;
				} else {
					s->pending_backslash = true;
				}
			} else if (s->pending_backslash) {
				WARN(ZS_BAD_ALPN_BACKSLASH);
				p--; {goto st319;}
			}
		}
	}
	{
		if (rdata_tail <= rdata_stop) {
			// Split long string.
			if (s->long_string &&
			    rdata_tail - s->item_length_location == 1 + MAX_ITEM_LENGTH) {
				// _item_length_exit equivalent.
				*(s->item_length_location) = MAX_ITEM_LENGTH;
				// _item_length_init equivalent.
				s->item_length_location = rdata_tail++;

				if (rdata_tail > rdata_stop) {
					WARN(ZS_TEXT_OVERFLOW);
					p--; {goto st319;}
				}
			}

			*(rdata_tail++) = (*p);
		} else {
			WARN(ZS_TEXT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st331;
st331:
	if ( ++p == pe )
		goto _test_eof331;
case 331:
	switch( (*p) ) {
		case 32: goto tr1065;
		case 33: goto tr1066;
		case 59: goto tr1065;
		case 92: goto tr1068;
	}
	if ( (*p) < 35 ) {
		if ( 9 <= (*p) && (*p) <= 10 )
			goto tr1065;
	} else if ( (*p) > 39 ) {
		if ( (*p) > 41 ) {
			if ( 42 <= (*p) && (*p) <= 126 )
				goto tr1066;
		} else if ( (*p) >= 40 )
			goto tr1067;
	} else
		goto tr1066;
	goto tr1061;
tr1065:
	{
		if (s->comma_list) {
			uint8_t *last_two = rdata_tail - 2;
			uint16_t current_len = rdata_tail - s->item_length_location - 2;
			if (last_two[1] == ',') {
				if (current_len <= 1) {
					WARN(ZS_EMPTY_LIST_ITEM);
					p--; {goto st319;}
				} else if (last_two[0] != '\\' || !s->pending_backslash) { // Start a new item.
					*(s->item_length_location) = current_len;
					s->item_length_location = rdata_tail - 1;
				} else { // Remove backslash.
					last_two[0] = ',';
					rdata_tail--;
					s->pending_backslash = false;
				}
			} else if (last_two[1] == '\\') {
				if (s->pending_backslash) { // Remove backslash.
					rdata_tail--;
					s->pending_backslash = false;
				} else {
					s->pending_backslash = true;
				}
			} else if (s->pending_backslash) {
				WARN(ZS_BAD_ALPN_BACKSLASH);
				p--; {goto st319;}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1654;
tr1073:
	{
		rdata_tail++;
	}
	{
		if (s->comma_list) {
			uint8_t *last_two = rdata_tail - 2;
			uint16_t current_len = rdata_tail - s->item_length_location - 2;
			if (last_two[1] == ',') {
				if (current_len <= 1) {
					WARN(ZS_EMPTY_LIST_ITEM);
					p--; {goto st319;}
				} else if (last_two[0] != '\\' || !s->pending_backslash) { // Start a new item.
					*(s->item_length_location) = current_len;
					s->item_length_location = rdata_tail - 1;
				} else { // Remove backslash.
					last_two[0] = ',';
					rdata_tail--;
					s->pending_backslash = false;
				}
			} else if (last_two[1] == '\\') {
				if (s->pending_backslash) { // Remove backslash.
					rdata_tail--;
					s->pending_backslash = false;
				} else {
					s->pending_backslash = true;
				}
			} else if (s->pending_backslash) {
				WARN(ZS_BAD_ALPN_BACKSLASH);
				p--; {goto st319;}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1654;
tr1086:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1654;
st1654:
	if ( ++p == pe )
		goto _test_eof1654;
case 1654:
	goto st0;
tr1067:
	{
		if (s->comma_list) {
			uint8_t *last_two = rdata_tail - 2;
			uint16_t current_len = rdata_tail - s->item_length_location - 2;
			if (last_two[1] == ',') {
				if (current_len <= 1) {
					WARN(ZS_EMPTY_LIST_ITEM);
					p--; {goto st319;}
				} else if (last_two[0] != '\\' || !s->pending_backslash) { // Start a new item.
					*(s->item_length_location) = current_len;
					s->item_length_location = rdata_tail - 1;
				} else { // Remove backslash.
					last_two[0] = ',';
					rdata_tail--;
					s->pending_backslash = false;
				}
			} else if (last_two[1] == '\\') {
				if (s->pending_backslash) { // Remove backslash.
					rdata_tail--;
					s->pending_backslash = false;
				} else {
					s->pending_backslash = true;
				}
			} else if (s->pending_backslash) {
				WARN(ZS_BAD_ALPN_BACKSLASH);
				p--; {goto st319;}
			}
		}
	}
	{
		if (rdata_tail <= rdata_stop) {
			// Split long string.
			if (s->long_string &&
			    rdata_tail - s->item_length_location == 1 + MAX_ITEM_LENGTH) {
				// _item_length_exit equivalent.
				*(s->item_length_location) = MAX_ITEM_LENGTH;
				// _item_length_init equivalent.
				s->item_length_location = rdata_tail++;

				if (rdata_tail > rdata_stop) {
					WARN(ZS_TEXT_OVERFLOW);
					p--; {goto st319;}
				}
			}

			*(rdata_tail++) = (*p);
		} else {
			WARN(ZS_TEXT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1655;
tr1075:
	{
		rdata_tail++;
	}
	{
		if (s->comma_list) {
			uint8_t *last_two = rdata_tail - 2;
			uint16_t current_len = rdata_tail - s->item_length_location - 2;
			if (last_two[1] == ',') {
				if (current_len <= 1) {
					WARN(ZS_EMPTY_LIST_ITEM);
					p--; {goto st319;}
				} else if (last_two[0] != '\\' || !s->pending_backslash) { // Start a new item.
					*(s->item_length_location) = current_len;
					s->item_length_location = rdata_tail - 1;
				} else { // Remove backslash.
					last_two[0] = ',';
					rdata_tail--;
					s->pending_backslash = false;
				}
			} else if (last_two[1] == '\\') {
				if (s->pending_backslash) { // Remove backslash.
					rdata_tail--;
					s->pending_backslash = false;
				} else {
					s->pending_backslash = true;
				}
			} else if (s->pending_backslash) {
				WARN(ZS_BAD_ALPN_BACKSLASH);
				p--; {goto st319;}
			}
		}
	}
	{
		if (rdata_tail <= rdata_stop) {
			// Split long string.
			if (s->long_string &&
			    rdata_tail - s->item_length_location == 1 + MAX_ITEM_LENGTH) {
				// _item_length_exit equivalent.
				*(s->item_length_location) = MAX_ITEM_LENGTH;
				// _item_length_init equivalent.
				s->item_length_location = rdata_tail++;

				if (rdata_tail > rdata_stop) {
					WARN(ZS_TEXT_OVERFLOW);
					p--; {goto st319;}
				}
			}

			*(rdata_tail++) = (*p);
		} else {
			WARN(ZS_TEXT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1655;
st1655:
	if ( ++p == pe )
		goto _test_eof1655;
case 1655:
	switch( (*p) ) {
		case 32: goto tr1065;
		case 33: goto tr1066;
		case 59: goto tr1065;
		case 92: goto tr1068;
	}
	if ( (*p) < 35 ) {
		if ( 9 <= (*p) && (*p) <= 10 )
			goto tr1065;
	} else if ( (*p) > 39 ) {
		if ( (*p) > 41 ) {
			if ( 42 <= (*p) && (*p) <= 126 )
				goto tr1066;
		} else if ( (*p) >= 40 )
			goto tr1067;
	} else
		goto tr1066;
	goto tr1061;
tr1068:
	{
		if (s->comma_list) {
			uint8_t *last_two = rdata_tail - 2;
			uint16_t current_len = rdata_tail - s->item_length_location - 2;
			if (last_two[1] == ',') {
				if (current_len <= 1) {
					WARN(ZS_EMPTY_LIST_ITEM);
					p--; {goto st319;}
				} else if (last_two[0] != '\\' || !s->pending_backslash) { // Start a new item.
					*(s->item_length_location) = current_len;
					s->item_length_location = rdata_tail - 1;
				} else { // Remove backslash.
					last_two[0] = ',';
					rdata_tail--;
					s->pending_backslash = false;
				}
			} else if (last_two[1] == '\\') {
				if (s->pending_backslash) { // Remove backslash.
					rdata_tail--;
					s->pending_backslash = false;
				} else {
					s->pending_backslash = true;
				}
			} else if (s->pending_backslash) {
				WARN(ZS_BAD_ALPN_BACKSLASH);
				p--; {goto st319;}
			}
		}
	}
	goto st332;
tr1076:
	{
		rdata_tail++;
	}
	{
		if (s->comma_list) {
			uint8_t *last_two = rdata_tail - 2;
			uint16_t current_len = rdata_tail - s->item_length_location - 2;
			if (last_two[1] == ',') {
				if (current_len <= 1) {
					WARN(ZS_EMPTY_LIST_ITEM);
					p--; {goto st319;}
				} else if (last_two[0] != '\\' || !s->pending_backslash) { // Start a new item.
					*(s->item_length_location) = current_len;
					s->item_length_location = rdata_tail - 1;
				} else { // Remove backslash.
					last_two[0] = ',';
					rdata_tail--;
					s->pending_backslash = false;
				}
			} else if (last_two[1] == '\\') {
				if (s->pending_backslash) { // Remove backslash.
					rdata_tail--;
					s->pending_backslash = false;
				} else {
					s->pending_backslash = true;
				}
			} else if (s->pending_backslash) {
				WARN(ZS_BAD_ALPN_BACKSLASH);
				p--; {goto st319;}
			}
		}
	}
	goto st332;
st332:
	if ( ++p == pe )
		goto _test_eof332;
case 332:
	if ( (*p) < 48 ) {
		if ( 32 <= (*p) && (*p) <= 47 )
			goto tr1062;
	} else if ( (*p) > 57 ) {
		if ( 58 <= (*p) && (*p) <= 126 )
			goto tr1062;
	} else
		goto tr1070;
	goto tr1069;
tr1070:
	{
		if (rdata_tail <= rdata_stop) {
			// Split long string.
			if (s->long_string &&
			    rdata_tail - s->item_length_location == 1 + MAX_ITEM_LENGTH) {
				// _item_length_exit equivalent.
				*(s->item_length_location) = MAX_ITEM_LENGTH;
				// _item_length_init equivalent.
				s->item_length_location = rdata_tail++;

				if (rdata_tail > rdata_stop) {
					WARN(ZS_TEXT_OVERFLOW);
					p--; {goto st319;}
				}
			}

			*rdata_tail = 0;
			s->item_length++;
		} else {
			WARN(ZS_TEXT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if ((*rdata_tail < (UINT8_MAX / 10)) ||   // Dominant fast check.
			((*rdata_tail == (UINT8_MAX / 10)) && // Marginal case.
			 ((*p) <= (UINT8_MAX % 10) + '0')
			)
		   ) {
			*rdata_tail *= 10;
			*rdata_tail += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st333;
st333:
	if ( ++p == pe )
		goto _test_eof333;
case 333:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr1071;
	goto tr1069;
tr1071:
	{
		if ((*rdata_tail < (UINT8_MAX / 10)) ||   // Dominant fast check.
			((*rdata_tail == (UINT8_MAX / 10)) && // Marginal case.
			 ((*p) <= (UINT8_MAX % 10) + '0')
			)
		   ) {
			*rdata_tail *= 10;
			*rdata_tail += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st334;
st334:
	if ( ++p == pe )
		goto _test_eof334;
case 334:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr1072;
	goto tr1069;
tr1072:
	{
		if ((*rdata_tail < (UINT8_MAX / 10)) ||   // Dominant fast check.
			((*rdata_tail == (UINT8_MAX / 10)) && // Marginal case.
			 ((*p) <= (UINT8_MAX % 10) + '0')
			)
		   ) {
			*rdata_tail *= 10;
			*rdata_tail += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st335;
st335:
	if ( ++p == pe )
		goto _test_eof335;
case 335:
	switch( (*p) ) {
		case 32: goto tr1073;
		case 33: goto tr1074;
		case 59: goto tr1073;
		case 92: goto tr1076;
	}
	if ( (*p) < 35 ) {
		if ( 9 <= (*p) && (*p) <= 10 )
			goto tr1073;
	} else if ( (*p) > 39 ) {
		if ( (*p) > 41 ) {
			if ( 42 <= (*p) && (*p) <= 126 )
				goto tr1074;
		} else if ( (*p) >= 40 )
			goto tr1075;
	} else
		goto tr1074;
	goto tr1069;
tr1077:
	{
		if (rdata_tail <= rdata_stop) {
			// Split long string.
			if (s->long_string &&
			    rdata_tail - s->item_length_location == 1 + MAX_ITEM_LENGTH) {
				// _item_length_exit equivalent.
				*(s->item_length_location) = MAX_ITEM_LENGTH;
				// _item_length_init equivalent.
				s->item_length_location = rdata_tail++;

				if (rdata_tail > rdata_stop) {
					WARN(ZS_TEXT_OVERFLOW);
					p--; {goto st319;}
				}
			}

			*(rdata_tail++) = (*p);
		} else {
			WARN(ZS_TEXT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st336;
tr1081:
	{
		if (s->comma_list) {
			uint8_t *last_two = rdata_tail - 2;
			uint16_t current_len = rdata_tail - s->item_length_location - 2;
			if (last_two[1] == ',') {
				if (current_len <= 1) {
					WARN(ZS_EMPTY_LIST_ITEM);
					p--; {goto st319;}
				} else if (last_two[0] != '\\' || !s->pending_backslash) { // Start a new item.
					*(s->item_length_location) = current_len;
					s->item_length_location = rdata_tail - 1;
				} else { // Remove backslash.
					last_two[0] = ',';
					rdata_tail--;
					s->pending_backslash = false;
				}
			} else if (last_two[1] == '\\') {
				if (s->pending_backslash) { // Remove backslash.
					rdata_tail--;
					s->pending_backslash = false;
				} else {
					s->pending_backslash = true;
				}
			} else if (s->pending_backslash) {
				WARN(ZS_BAD_ALPN_BACKSLASH);
				p--; {goto st319;}
			}
		}
	}
	{
		if (rdata_tail <= rdata_stop) {
			// Split long string.
			if (s->long_string &&
			    rdata_tail - s->item_length_location == 1 + MAX_ITEM_LENGTH) {
				// _item_length_exit equivalent.
				*(s->item_length_location) = MAX_ITEM_LENGTH;
				// _item_length_init equivalent.
				s->item_length_location = rdata_tail++;

				if (rdata_tail > rdata_stop) {
					WARN(ZS_TEXT_OVERFLOW);
					p--; {goto st319;}
				}
			}

			*(rdata_tail++) = (*p);
		} else {
			WARN(ZS_TEXT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st336;
tr1090:
	{
		rdata_tail++;
	}
	{
		if (s->comma_list) {
			uint8_t *last_two = rdata_tail - 2;
			uint16_t current_len = rdata_tail - s->item_length_location - 2;
			if (last_two[1] == ',') {
				if (current_len <= 1) {
					WARN(ZS_EMPTY_LIST_ITEM);
					p--; {goto st319;}
				} else if (last_two[0] != '\\' || !s->pending_backslash) { // Start a new item.
					*(s->item_length_location) = current_len;
					s->item_length_location = rdata_tail - 1;
				} else { // Remove backslash.
					last_two[0] = ',';
					rdata_tail--;
					s->pending_backslash = false;
				}
			} else if (last_two[1] == '\\') {
				if (s->pending_backslash) { // Remove backslash.
					rdata_tail--;
					s->pending_backslash = false;
				} else {
					s->pending_backslash = true;
				}
			} else if (s->pending_backslash) {
				WARN(ZS_BAD_ALPN_BACKSLASH);
				p--; {goto st319;}
			}
		}
	}
	{
		if (rdata_tail <= rdata_stop) {
			// Split long string.
			if (s->long_string &&
			    rdata_tail - s->item_length_location == 1 + MAX_ITEM_LENGTH) {
				// _item_length_exit equivalent.
				*(s->item_length_location) = MAX_ITEM_LENGTH;
				// _item_length_init equivalent.
				s->item_length_location = rdata_tail++;

				if (rdata_tail > rdata_stop) {
					WARN(ZS_TEXT_OVERFLOW);
					p--; {goto st319;}
				}
			}

			*(rdata_tail++) = (*p);
		} else {
			WARN(ZS_TEXT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st336;
st336:
	if ( ++p == pe )
		goto _test_eof336;
case 336:
	_widec = (*p);
	if ( 10 <= (*p) && (*p) <= 10 ) {
		_widec = (short)(1152 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1077;
		case 32: goto tr1077;
		case 34: goto st338;
		case 59: goto tr1077;
		case 92: goto st339;
		case 1546: goto tr1077;
	}
	if ( 33 <= _widec && _widec <= 126 )
		goto tr1078;
	goto tr1061;
tr1078:
	{
		if (rdata_tail <= rdata_stop) {
			// Split long string.
			if (s->long_string &&
			    rdata_tail - s->item_length_location == 1 + MAX_ITEM_LENGTH) {
				// _item_length_exit equivalent.
				*(s->item_length_location) = MAX_ITEM_LENGTH;
				// _item_length_init equivalent.
				s->item_length_location = rdata_tail++;

				if (rdata_tail > rdata_stop) {
					WARN(ZS_TEXT_OVERFLOW);
					p--; {goto st319;}
				}
			}

			*(rdata_tail++) = (*p);
		} else {
			WARN(ZS_TEXT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st337;
tr1082:
	{
		if (s->comma_list) {
			uint8_t *last_two = rdata_tail - 2;
			uint16_t current_len = rdata_tail - s->item_length_location - 2;
			if (last_two[1] == ',') {
				if (current_len <= 1) {
					WARN(ZS_EMPTY_LIST_ITEM);
					p--; {goto st319;}
				} else if (last_two[0] != '\\' || !s->pending_backslash) { // Start a new item.
					*(s->item_length_location) = current_len;
					s->item_length_location = rdata_tail - 1;
				} else { // Remove backslash.
					last_two[0] = ',';
					rdata_tail--;
					s->pending_backslash = false;
				}
			} else if (last_two[1] == '\\') {
				if (s->pending_backslash) { // Remove backslash.
					rdata_tail--;
					s->pending_backslash = false;
				} else {
					s->pending_backslash = true;
				}
			} else if (s->pending_backslash) {
				WARN(ZS_BAD_ALPN_BACKSLASH);
				p--; {goto st319;}
			}
		}
	}
	{
		if (rdata_tail <= rdata_stop) {
			// Split long string.
			if (s->long_string &&
			    rdata_tail - s->item_length_location == 1 + MAX_ITEM_LENGTH) {
				// _item_length_exit equivalent.
				*(s->item_length_location) = MAX_ITEM_LENGTH;
				// _item_length_init equivalent.
				s->item_length_location = rdata_tail++;

				if (rdata_tail > rdata_stop) {
					WARN(ZS_TEXT_OVERFLOW);
					p--; {goto st319;}
				}
			}

			*(rdata_tail++) = (*p);
		} else {
			WARN(ZS_TEXT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st337;
tr1091:
	{
		rdata_tail++;
	}
	{
		if (s->comma_list) {
			uint8_t *last_two = rdata_tail - 2;
			uint16_t current_len = rdata_tail - s->item_length_location - 2;
			if (last_two[1] == ',') {
				if (current_len <= 1) {
					WARN(ZS_EMPTY_LIST_ITEM);
					p--; {goto st319;}
				} else if (last_two[0] != '\\' || !s->pending_backslash) { // Start a new item.
					*(s->item_length_location) = current_len;
					s->item_length_location = rdata_tail - 1;
				} else { // Remove backslash.
					last_two[0] = ',';
					rdata_tail--;
					s->pending_backslash = false;
				}
			} else if (last_two[1] == '\\') {
				if (s->pending_backslash) { // Remove backslash.
					rdata_tail--;
					s->pending_backslash = false;
				} else {
					s->pending_backslash = true;
				}
			} else if (s->pending_backslash) {
				WARN(ZS_BAD_ALPN_BACKSLASH);
				p--; {goto st319;}
			}
		}
	}
	{
		if (rdata_tail <= rdata_stop) {
			// Split long string.
			if (s->long_string &&
			    rdata_tail - s->item_length_location == 1 + MAX_ITEM_LENGTH) {
				// _item_length_exit equivalent.
				*(s->item_length_location) = MAX_ITEM_LENGTH;
				// _item_length_init equivalent.
				s->item_length_location = rdata_tail++;

				if (rdata_tail > rdata_stop) {
					WARN(ZS_TEXT_OVERFLOW);
					p--; {goto st319;}
				}
			}

			*(rdata_tail++) = (*p);
		} else {
			WARN(ZS_TEXT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st337;
st337:
	if ( ++p == pe )
		goto _test_eof337;
case 337:
	_widec = (*p);
	if ( 10 <= (*p) && (*p) <= 10 ) {
		_widec = (short)(1152 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1081;
		case 32: goto tr1081;
		case 34: goto tr1083;
		case 59: goto tr1081;
		case 92: goto tr1084;
		case 1546: goto tr1081;
	}
	if ( 33 <= _widec && _widec <= 126 )
		goto tr1082;
	goto tr1061;
tr1083:
	{
		if (s->comma_list) {
			uint8_t *last_two = rdata_tail - 2;
			uint16_t current_len = rdata_tail - s->item_length_location - 2;
			if (last_two[1] == ',') {
				if (current_len <= 1) {
					WARN(ZS_EMPTY_LIST_ITEM);
					p--; {goto st319;}
				} else if (last_two[0] != '\\' || !s->pending_backslash) { // Start a new item.
					*(s->item_length_location) = current_len;
					s->item_length_location = rdata_tail - 1;
				} else { // Remove backslash.
					last_two[0] = ',';
					rdata_tail--;
					s->pending_backslash = false;
				}
			} else if (last_two[1] == '\\') {
				if (s->pending_backslash) { // Remove backslash.
					rdata_tail--;
					s->pending_backslash = false;
				} else {
					s->pending_backslash = true;
				}
			} else if (s->pending_backslash) {
				WARN(ZS_BAD_ALPN_BACKSLASH);
				p--; {goto st319;}
			}
		}
	}
	goto st338;
tr1092:
	{
		rdata_tail++;
	}
	{
		if (s->comma_list) {
			uint8_t *last_two = rdata_tail - 2;
			uint16_t current_len = rdata_tail - s->item_length_location - 2;
			if (last_two[1] == ',') {
				if (current_len <= 1) {
					WARN(ZS_EMPTY_LIST_ITEM);
					p--; {goto st319;}
				} else if (last_two[0] != '\\' || !s->pending_backslash) { // Start a new item.
					*(s->item_length_location) = current_len;
					s->item_length_location = rdata_tail - 1;
				} else { // Remove backslash.
					last_two[0] = ',';
					rdata_tail--;
					s->pending_backslash = false;
				}
			} else if (last_two[1] == '\\') {
				if (s->pending_backslash) { // Remove backslash.
					rdata_tail--;
					s->pending_backslash = false;
				} else {
					s->pending_backslash = true;
				}
			} else if (s->pending_backslash) {
				WARN(ZS_BAD_ALPN_BACKSLASH);
				p--; {goto st319;}
			}
		}
	}
	goto st338;
st338:
	if ( ++p == pe )
		goto _test_eof338;
case 338:
	switch( (*p) ) {
		case 32: goto tr1086;
		case 59: goto tr1086;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1086;
	} else if ( (*p) >= 9 )
		goto tr1086;
	goto tr1085;
tr1084:
	{
		if (s->comma_list) {
			uint8_t *last_two = rdata_tail - 2;
			uint16_t current_len = rdata_tail - s->item_length_location - 2;
			if (last_two[1] == ',') {
				if (current_len <= 1) {
					WARN(ZS_EMPTY_LIST_ITEM);
					p--; {goto st319;}
				} else if (last_two[0] != '\\' || !s->pending_backslash) { // Start a new item.
					*(s->item_length_location) = current_len;
					s->item_length_location = rdata_tail - 1;
				} else { // Remove backslash.
					last_two[0] = ',';
					rdata_tail--;
					s->pending_backslash = false;
				}
			} else if (last_two[1] == '\\') {
				if (s->pending_backslash) { // Remove backslash.
					rdata_tail--;
					s->pending_backslash = false;
				} else {
					s->pending_backslash = true;
				}
			} else if (s->pending_backslash) {
				WARN(ZS_BAD_ALPN_BACKSLASH);
				p--; {goto st319;}
			}
		}
	}
	goto st339;
tr1093:
	{
		rdata_tail++;
	}
	{
		if (s->comma_list) {
			uint8_t *last_two = rdata_tail - 2;
			uint16_t current_len = rdata_tail - s->item_length_location - 2;
			if (last_two[1] == ',') {
				if (current_len <= 1) {
					WARN(ZS_EMPTY_LIST_ITEM);
					p--; {goto st319;}
				} else if (last_two[0] != '\\' || !s->pending_backslash) { // Start a new item.
					*(s->item_length_location) = current_len;
					s->item_length_location = rdata_tail - 1;
				} else { // Remove backslash.
					last_two[0] = ',';
					rdata_tail--;
					s->pending_backslash = false;
				}
			} else if (last_two[1] == '\\') {
				if (s->pending_backslash) { // Remove backslash.
					rdata_tail--;
					s->pending_backslash = false;
				} else {
					s->pending_backslash = true;
				}
			} else if (s->pending_backslash) {
				WARN(ZS_BAD_ALPN_BACKSLASH);
				p--; {goto st319;}
			}
		}
	}
	goto st339;
st339:
	if ( ++p == pe )
		goto _test_eof339;
case 339:
	if ( (*p) < 48 ) {
		if ( 32 <= (*p) && (*p) <= 47 )
			goto tr1078;
	} else if ( (*p) > 57 ) {
		if ( 58 <= (*p) && (*p) <= 126 )
			goto tr1078;
	} else
		goto tr1087;
	goto tr1069;
tr1087:
	{
		if (rdata_tail <= rdata_stop) {
			// Split long string.
			if (s->long_string &&
			    rdata_tail - s->item_length_location == 1 + MAX_ITEM_LENGTH) {
				// _item_length_exit equivalent.
				*(s->item_length_location) = MAX_ITEM_LENGTH;
				// _item_length_init equivalent.
				s->item_length_location = rdata_tail++;

				if (rdata_tail > rdata_stop) {
					WARN(ZS_TEXT_OVERFLOW);
					p--; {goto st319;}
				}
			}

			*rdata_tail = 0;
			s->item_length++;
		} else {
			WARN(ZS_TEXT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if ((*rdata_tail < (UINT8_MAX / 10)) ||   // Dominant fast check.
			((*rdata_tail == (UINT8_MAX / 10)) && // Marginal case.
			 ((*p) <= (UINT8_MAX % 10) + '0')
			)
		   ) {
			*rdata_tail *= 10;
			*rdata_tail += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st340;
st340:
	if ( ++p == pe )
		goto _test_eof340;
case 340:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr1088;
	goto tr1069;
tr1088:
	{
		if ((*rdata_tail < (UINT8_MAX / 10)) ||   // Dominant fast check.
			((*rdata_tail == (UINT8_MAX / 10)) && // Marginal case.
			 ((*p) <= (UINT8_MAX % 10) + '0')
			)
		   ) {
			*rdata_tail *= 10;
			*rdata_tail += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st341;
st341:
	if ( ++p == pe )
		goto _test_eof341;
case 341:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr1089;
	goto tr1069;
tr1089:
	{
		if ((*rdata_tail < (UINT8_MAX / 10)) ||   // Dominant fast check.
			((*rdata_tail == (UINT8_MAX / 10)) && // Marginal case.
			 ((*p) <= (UINT8_MAX % 10) + '0')
			)
		   ) {
			*rdata_tail *= 10;
			*rdata_tail += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st342;
st342:
	if ( ++p == pe )
		goto _test_eof342;
case 342:
	_widec = (*p);
	if ( 10 <= (*p) && (*p) <= 10 ) {
		_widec = (short)(1152 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1090;
		case 32: goto tr1090;
		case 34: goto tr1092;
		case 59: goto tr1090;
		case 92: goto tr1093;
		case 1546: goto tr1090;
	}
	if ( 33 <= _widec && _widec <= 126 )
		goto tr1091;
	goto tr1069;
st343:
	if ( ++p == pe )
		goto _test_eof343;
case 343:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st344;
		case 32: goto st344;
		case 40: goto tr1096;
		case 41: goto tr1097;
		case 2058: goto tr1098;
		case 2107: goto tr1099;
	}
	goto tr1094;
tr1096:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st344;
tr1097:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st344;
tr1098:
	{
		s->line_counter++;
	}
	goto st344;
tr1137:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 344; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st344;
st344:
	if ( ++p == pe )
		goto _test_eof344;
case 344:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st344;
		case 32: goto st344;
		case 40: goto tr1096;
		case 41: goto tr1097;
		case 2058: goto tr1098;
		case 2107: goto tr1099;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1101;
	goto tr1100;
tr1101:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st345;
tr1106:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st345;
st345:
	if ( ++p == pe )
		goto _test_eof345;
case 345:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1103;
		case 32: goto tr1103;
		case 40: goto tr1104;
		case 41: goto tr1105;
		case 68: goto tr1107;
		case 72: goto tr1108;
		case 77: goto tr1109;
		case 83: goto st348;
		case 87: goto tr1111;
		case 100: goto tr1107;
		case 104: goto tr1108;
		case 109: goto tr1109;
		case 115: goto st348;
		case 119: goto tr1111;
		case 1802: goto tr1112;
		case 1851: goto tr1113;
		case 2058: goto tr1112;
		case 2107: goto tr1113;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1106;
	goto tr1102;
tr1116:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st346;
tr1117:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st346;
tr1103:
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st346;
tr1104:
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st346;
tr1105:
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st346;
tr1130:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st346;
tr1131:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st346;
tr1132:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st346;
st346:
	if ( ++p == pe )
		goto _test_eof346;
case 346:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st346;
		case 32: goto st346;
		case 40: goto tr1116;
		case 41: goto tr1117;
		case 1802: goto tr1118;
		case 1851: goto tr1119;
		case 2058: goto tr1118;
		case 2107: goto tr1119;
	}
	goto tr1114;
tr1112:
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->default_ttl = (uint32_t)(s->number64);
		} else {
			ERR(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	{
		s->line_counter++;
	}
	goto st1656;
tr1118:
	{
		if (s->number64 <= UINT32_MAX) {
			s->default_ttl = (uint32_t)(s->number64);
		} else {
			ERR(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	{
		s->line_counter++;
	}
	goto st1656;
tr1121:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1656; goto _out;}
			}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->default_ttl = (uint32_t)(s->number64);
		} else {
			ERR(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	{
		s->line_counter++;
	}
	goto st1656;
tr1134:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->number64 <= UINT32_MAX) {
			s->default_ttl = (uint32_t)(s->number64);
		} else {
			ERR(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	{
		s->line_counter++;
	}
	goto st1656;
st1656:
	if ( ++p == pe )
		goto _test_eof1656;
case 1656:
	goto st0;
tr1119:
	{
		s->buffer_length = 0;
	}
	goto st347;
tr1113:
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		s->buffer_length = 0;
	}
	goto st347;
tr1120:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st347;
tr1135:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		s->buffer_length = 0;
	}
	goto st347;
st347:
	if ( ++p == pe )
		goto _test_eof347;
case 347:
	if ( (*p) == 10 )
		goto tr1121;
	goto tr1120;
tr1107:
	{ if (s->number64 <= (UINT32_MAX / 86400)) {
	                  s->number64 *= 86400;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st348;
tr1108:
	{ if (s->number64 <= (UINT32_MAX / 3600)) {
	                  s->number64 *= 3600;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st348;
tr1109:
	{ if (s->number64 <= (UINT32_MAX / 60)) {
	                  s->number64 *= 60;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st348;
tr1111:
	{ if (s->number64 <= (UINT32_MAX / 604800)) {
	                  s->number64 *= 604800;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st348;
st348:
	if ( ++p == pe )
		goto _test_eof348;
case 348:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1103;
		case 32: goto tr1103;
		case 40: goto tr1104;
		case 41: goto tr1105;
		case 1802: goto tr1112;
		case 1851: goto tr1113;
		case 2058: goto tr1112;
		case 2107: goto tr1113;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1122;
	goto tr1102;
tr1124:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st349;
tr1122:
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st349;
tr1133:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st349;
st349:
	if ( ++p == pe )
		goto _test_eof349;
case 349:
	switch( (*p) ) {
		case 68: goto tr1125;
		case 72: goto tr1126;
		case 77: goto tr1127;
		case 83: goto st350;
		case 87: goto tr1129;
		case 100: goto tr1125;
		case 104: goto tr1126;
		case 109: goto tr1127;
		case 115: goto st350;
		case 119: goto tr1129;
	}
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr1124;
	goto tr1123;
tr1125:
	{ if (s->number64 <= (UINT32_MAX / 86400)) {
	                  s->number64 *= 86400;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st350;
tr1126:
	{ if (s->number64 <= (UINT32_MAX / 3600)) {
	                  s->number64 *= 3600;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st350;
tr1127:
	{ if (s->number64 <= (UINT32_MAX / 60)) {
	                  s->number64 *= 60;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st350;
tr1129:
	{ if (s->number64 <= (UINT32_MAX / 604800)) {
	                  s->number64 *= 604800;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st350;
st350:
	if ( ++p == pe )
		goto _test_eof350;
case 350:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1130;
		case 32: goto tr1130;
		case 40: goto tr1131;
		case 41: goto tr1132;
		case 1802: goto tr1134;
		case 1851: goto tr1135;
		case 2058: goto tr1134;
		case 2107: goto tr1135;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1133;
	goto tr1102;
tr1099:
	{
		s->buffer_length = 0;
	}
	goto st351;
tr1136:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st351;
st351:
	if ( ++p == pe )
		goto _test_eof351;
case 351:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr1137;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr1136;
	goto tr1094;
st352:
	if ( ++p == pe )
		goto _test_eof352;
case 352:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st353;
		case 32: goto st353;
		case 40: goto tr1140;
		case 41: goto tr1141;
		case 2058: goto tr1142;
		case 2107: goto tr1143;
	}
	goto tr1138;
tr1140:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st353;
tr1141:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st353;
tr1142:
	{
		s->line_counter++;
	}
	goto st353;
tr1173:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 353; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st353;
st353:
	if ( ++p == pe )
		goto _test_eof353;
case 353:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st353;
		case 32: goto st353;
		case 40: goto tr1140;
		case 41: goto tr1141;
		case 42: goto tr1144;
		case 46: goto tr1145;
		case 92: goto tr1146;
		case 95: goto tr1144;
		case 2058: goto tr1142;
		case 2107: goto tr1143;
	}
	if ( _widec < 65 ) {
		if ( 45 <= _widec && _widec <= 57 )
			goto tr1144;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr1144;
	} else
		goto tr1144;
	goto tr1138;
tr1147:
	{
		// Check for maximum dname label length.
		if (s->item_length < ZS_MAX_LABEL_LENGTH) {
			(s->dname)[s->dname_tmp_length++] = (*p);
			s->item_length++;
		} else {
			WARN(ZS_LABEL_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st354;
tr1154:
	{
		s->item_length = 0;
		s->item_length_position = s->dname_tmp_length++;
	}
	{
		// Check for maximum dname label length.
		if (s->item_length < ZS_MAX_LABEL_LENGTH) {
			(s->dname)[s->dname_tmp_length++] = (*p);
			s->item_length++;
		} else {
			WARN(ZS_LABEL_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st354;
tr1169:
	{
		s->dname_tmp_length++;
	}
	{
		// Check for maximum dname label length.
		if (s->item_length < ZS_MAX_LABEL_LENGTH) {
			(s->dname)[s->dname_tmp_length++] = (*p);
			s->item_length++;
		} else {
			WARN(ZS_LABEL_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st354;
tr1144:
	{
		s->dname = s->zone_origin;
	}
	{
		s->item_length_position = 0;
		s->dname_tmp_length = 0;
	}
	{
		s->item_length = 0;
		s->item_length_position = s->dname_tmp_length++;
	}
	{
		// Check for maximum dname label length.
		if (s->item_length < ZS_MAX_LABEL_LENGTH) {
			(s->dname)[s->dname_tmp_length++] = (*p);
			s->item_length++;
		} else {
			WARN(ZS_LABEL_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st354;
st354:
	if ( ++p == pe )
		goto _test_eof354;
case 354:
	switch( (*p) ) {
		case 42: goto tr1147;
		case 46: goto tr1148;
		case 92: goto st358;
		case 95: goto tr1147;
	}
	if ( (*p) < 65 ) {
		if ( 45 <= (*p) && (*p) <= 57 )
			goto tr1147;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr1147;
	} else
		goto tr1147;
	goto tr1138;
tr1148:
	{
		// Check for maximum dname length overflow after each label.
		// (at least the next label length must follow).
		if (s->dname_tmp_length < ZS_MAX_DNAME_LENGTH) {
			(s->dname)[s->item_length_position] =
				(uint8_t)(s->item_length);
		} else {
			WARN(ZS_DNAME_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st355;
tr1170:
	{
		s->dname_tmp_length++;
	}
	{
		// Check for maximum dname length overflow after each label.
		// (at least the next label length must follow).
		if (s->dname_tmp_length < ZS_MAX_DNAME_LENGTH) {
			(s->dname)[s->item_length_position] =
				(uint8_t)(s->item_length);
		} else {
			WARN(ZS_DNAME_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st355;
st355:
	if ( ++p == pe )
		goto _test_eof355;
case 355:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1151;
		case 32: goto tr1151;
		case 40: goto tr1152;
		case 41: goto tr1153;
		case 42: goto tr1154;
		case 45: goto tr1154;
		case 92: goto tr1155;
		case 95: goto tr1154;
		case 1802: goto tr1156;
		case 1851: goto tr1157;
		case 2058: goto tr1156;
		case 2107: goto tr1157;
	}
	if ( _widec < 65 ) {
		if ( 47 <= _widec && _widec <= 57 )
			goto tr1154;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr1154;
	} else
		goto tr1154;
	goto tr1150;
tr1159:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st356;
tr1160:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st356;
tr1151:
	{
		// Enough room for the terminal label is guaranteed (_label_exit).
		(s->dname)[s->dname_tmp_length++] = 0;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st356;
tr1152:
	{
		// Enough room for the terminal label is guaranteed (_label_exit).
		(s->dname)[s->dname_tmp_length++] = 0;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st356;
tr1153:
	{
		// Enough room for the terminal label is guaranteed (_label_exit).
		(s->dname)[s->dname_tmp_length++] = 0;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st356;
st356:
	if ( ++p == pe )
		goto _test_eof356;
case 356:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st356;
		case 32: goto st356;
		case 40: goto tr1159;
		case 41: goto tr1160;
		case 1802: goto tr1161;
		case 1851: goto tr1162;
		case 2058: goto tr1161;
		case 2107: goto tr1162;
	}
	goto tr1150;
tr1156:
	{
		// Enough room for the terminal label is guaranteed (_label_exit).
		(s->dname)[s->dname_tmp_length++] = 0;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		s->zone_origin_length = s->dname_tmp_length;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	{
		s->line_counter++;
	}
	goto st1657;
tr1161:
	{
		s->zone_origin_length = s->dname_tmp_length;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	{
		s->line_counter++;
	}
	goto st1657;
tr1164:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1657; goto _out;}
			}
		}
	}
	{
		s->zone_origin_length = s->dname_tmp_length;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	{
		s->line_counter++;
	}
	goto st1657;
st1657:
	if ( ++p == pe )
		goto _test_eof1657;
case 1657:
	goto st0;
tr1162:
	{
		s->buffer_length = 0;
	}
	goto st357;
tr1163:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st357;
tr1157:
	{
		// Enough room for the terminal label is guaranteed (_label_exit).
		(s->dname)[s->dname_tmp_length++] = 0;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		s->buffer_length = 0;
	}
	goto st357;
st357:
	if ( ++p == pe )
		goto _test_eof357;
case 357:
	if ( (*p) == 10 )
		goto tr1164;
	goto tr1163;
tr1155:
	{
		s->item_length = 0;
		s->item_length_position = s->dname_tmp_length++;
	}
	goto st358;
tr1171:
	{
		s->dname_tmp_length++;
	}
	goto st358;
tr1146:
	{
		s->dname = s->zone_origin;
	}
	{
		s->item_length_position = 0;
		s->dname_tmp_length = 0;
	}
	{
		s->item_length = 0;
		s->item_length_position = s->dname_tmp_length++;
	}
	goto st358;
st358:
	if ( ++p == pe )
		goto _test_eof358;
case 358:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr1165;
	goto tr1147;
tr1165:
	{
		if (s->item_length < ZS_MAX_LABEL_LENGTH) {
			(s->dname)[s->dname_tmp_length] = 0;
			s->item_length++;
		} else {
			WARN(ZS_LABEL_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		(s->dname)[s->dname_tmp_length] *= 10;
		(s->dname)[s->dname_tmp_length] += digit_to_num[(uint8_t)(*p)];
	}
	goto st359;
st359:
	if ( ++p == pe )
		goto _test_eof359;
case 359:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr1167;
	goto tr1166;
tr1167:
	{
		(s->dname)[s->dname_tmp_length] *= 10;
		(s->dname)[s->dname_tmp_length] += digit_to_num[(uint8_t)(*p)];
	}
	goto st360;
st360:
	if ( ++p == pe )
		goto _test_eof360;
case 360:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr1168;
	goto tr1166;
tr1168:
	{
		(s->dname)[s->dname_tmp_length] *= 10;
		(s->dname)[s->dname_tmp_length] += digit_to_num[(uint8_t)(*p)];
	}
	goto st361;
st361:
	if ( ++p == pe )
		goto _test_eof361;
case 361:
	switch( (*p) ) {
		case 42: goto tr1169;
		case 46: goto tr1170;
		case 92: goto tr1171;
		case 95: goto tr1169;
	}
	if ( (*p) < 65 ) {
		if ( 45 <= (*p) && (*p) <= 57 )
			goto tr1169;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr1169;
	} else
		goto tr1169;
	goto tr1166;
tr1145:
	{
		s->dname = s->zone_origin;
	}
	{
		s->item_length_position = 0;
		s->dname_tmp_length = 0;
	}
	goto st362;
st362:
	if ( ++p == pe )
		goto _test_eof362;
case 362:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1151;
		case 32: goto tr1151;
		case 40: goto tr1152;
		case 41: goto tr1153;
		case 1802: goto tr1156;
		case 1851: goto tr1157;
		case 2058: goto tr1156;
		case 2107: goto tr1157;
	}
	goto tr1150;
tr1143:
	{
		s->buffer_length = 0;
	}
	goto st363;
tr1172:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st363;
st363:
	if ( ++p == pe )
		goto _test_eof363;
case 363:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr1173;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr1172;
	goto tr1138;
st364:
	if ( ++p == pe )
		goto _test_eof364;
case 364:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st365;
		case 32: goto st365;
		case 40: goto tr1175;
		case 41: goto tr1176;
		case 2058: goto tr1177;
		case 2107: goto tr1178;
	}
	goto st0;
tr1175:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st365;
tr1176:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st365;
tr1177:
	{
		s->line_counter++;
	}
	goto st365;
tr1231:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 365; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st365;
st365:
	if ( ++p == pe )
		goto _test_eof365;
case 365:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st365;
		case 32: goto st365;
		case 40: goto tr1175;
		case 41: goto tr1176;
		case 2058: goto tr1177;
		case 2107: goto tr1178;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr1179;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr1179;
	} else
		goto tr1179;
	goto tr1180;
tr1179:
	{
		rdata_tail = s->r_data;
	}
	{ p--; {stack[top++] = 366;goto st330;} }
	goto st366;
st366:
	if ( ++p == pe )
		goto _test_eof366;
case 366:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1182;
		case 32: goto tr1182;
		case 40: goto tr1183;
		case 41: goto tr1184;
		case 1802: goto tr1185;
		case 1851: goto tr1186;
		case 2058: goto tr1185;
		case 2107: goto tr1187;
	}
	goto tr1181;
tr1190:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st367;
tr1191:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st367;
tr1182:
	{
		size_t len = rdata_tail - s->r_data;
		if (len >= sizeof(s->include_filename)) {
			ERR(ZS_BAD_INCLUDE_FILENAME);
			p--; {goto st319;}
		}

		// Store zero terminated include filename.
		memcpy(s->include_filename, s->r_data, len);
		s->include_filename[len] = '\0';

		// For detection whether origin is not present.
		s->dname = NULL;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st367;
tr1183:
	{
		size_t len = rdata_tail - s->r_data;
		if (len >= sizeof(s->include_filename)) {
			ERR(ZS_BAD_INCLUDE_FILENAME);
			p--; {goto st319;}
		}

		// Store zero terminated include filename.
		memcpy(s->include_filename, s->r_data, len);
		s->include_filename[len] = '\0';

		// For detection whether origin is not present.
		s->dname = NULL;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st367;
tr1184:
	{
		size_t len = rdata_tail - s->r_data;
		if (len >= sizeof(s->include_filename)) {
			ERR(ZS_BAD_INCLUDE_FILENAME);
			p--; {goto st319;}
		}

		// Store zero terminated include filename.
		memcpy(s->include_filename, s->r_data, len);
		s->include_filename[len] = '\0';

		// For detection whether origin is not present.
		s->dname = NULL;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st367;
st367:
	if ( ++p == pe )
		goto _test_eof367;
case 367:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st367;
		case 32: goto st367;
		case 40: goto tr1190;
		case 41: goto tr1191;
		case 42: goto tr1192;
		case 46: goto tr1193;
		case 92: goto tr1194;
		case 95: goto tr1192;
		case 1802: goto tr1195;
		case 1851: goto tr1196;
		case 2058: goto tr1195;
		case 2107: goto tr1197;
	}
	if ( _widec < 65 ) {
		if ( 45 <= _widec && _widec <= 57 )
			goto tr1192;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr1192;
	} else
		goto tr1192;
	goto tr1188;
tr1199:
	{
		// Check for maximum dname label length.
		if (s->item_length < ZS_MAX_LABEL_LENGTH) {
			(s->dname)[s->dname_tmp_length++] = (*p);
			s->item_length++;
		} else {
			WARN(ZS_LABEL_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st368;
tr1205:
	{
		s->item_length = 0;
		s->item_length_position = s->dname_tmp_length++;
	}
	{
		// Check for maximum dname label length.
		if (s->item_length < ZS_MAX_LABEL_LENGTH) {
			(s->dname)[s->dname_tmp_length++] = (*p);
			s->item_length++;
		} else {
			WARN(ZS_LABEL_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st368;
tr1218:
	{
		s->dname_tmp_length++;
	}
	{
		// Check for maximum dname label length.
		if (s->item_length < ZS_MAX_LABEL_LENGTH) {
			(s->dname)[s->dname_tmp_length++] = (*p);
			s->item_length++;
		} else {
			WARN(ZS_LABEL_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st368;
tr1192:
	{
		s->dname = s->r_data;
	}
	{
		s->item_length_position = 0;
		s->dname_tmp_length = 0;
	}
	{
		s->item_length = 0;
		s->item_length_position = s->dname_tmp_length++;
	}
	{
		// Check for maximum dname label length.
		if (s->item_length < ZS_MAX_LABEL_LENGTH) {
			(s->dname)[s->dname_tmp_length++] = (*p);
			s->item_length++;
		} else {
			WARN(ZS_LABEL_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st368;
st368:
	if ( ++p == pe )
		goto _test_eof368;
case 368:
	switch( (*p) ) {
		case 42: goto tr1199;
		case 46: goto tr1200;
		case 92: goto st372;
		case 95: goto tr1199;
	}
	if ( (*p) < 65 ) {
		if ( 45 <= (*p) && (*p) <= 57 )
			goto tr1199;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr1199;
	} else
		goto tr1199;
	goto tr1198;
tr1200:
	{
		// Check for maximum dname length overflow after each label.
		// (at least the next label length must follow).
		if (s->dname_tmp_length < ZS_MAX_DNAME_LENGTH) {
			(s->dname)[s->item_length_position] =
				(uint8_t)(s->item_length);
		} else {
			WARN(ZS_DNAME_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st369;
tr1219:
	{
		s->dname_tmp_length++;
	}
	{
		// Check for maximum dname length overflow after each label.
		// (at least the next label length must follow).
		if (s->dname_tmp_length < ZS_MAX_DNAME_LENGTH) {
			(s->dname)[s->item_length_position] =
				(uint8_t)(s->item_length);
		} else {
			WARN(ZS_DNAME_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st369;
st369:
	if ( ++p == pe )
		goto _test_eof369;
case 369:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1202;
		case 32: goto tr1202;
		case 40: goto tr1203;
		case 41: goto tr1204;
		case 42: goto tr1205;
		case 45: goto tr1205;
		case 92: goto tr1206;
		case 95: goto tr1205;
		case 1802: goto tr1207;
		case 1851: goto tr1208;
		case 2058: goto tr1207;
		case 2107: goto tr1208;
	}
	if ( _widec < 65 ) {
		if ( 47 <= _widec && _widec <= 57 )
			goto tr1205;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr1205;
	} else
		goto tr1205;
	goto tr1188;
tr1210:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st370;
tr1211:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st370;
tr1202:
	{
		// Enough room for the terminal label is guaranteed (_label_exit).
		(s->dname)[s->dname_tmp_length++] = 0;
	}
	{
		s->r_data_length = s->dname_tmp_length;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st370;
tr1203:
	{
		// Enough room for the terminal label is guaranteed (_label_exit).
		(s->dname)[s->dname_tmp_length++] = 0;
	}
	{
		s->r_data_length = s->dname_tmp_length;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st370;
tr1204:
	{
		// Enough room for the terminal label is guaranteed (_label_exit).
		(s->dname)[s->dname_tmp_length++] = 0;
	}
	{
		s->r_data_length = s->dname_tmp_length;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st370;
st370:
	if ( ++p == pe )
		goto _test_eof370;
case 370:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st370;
		case 32: goto st370;
		case 40: goto tr1210;
		case 41: goto tr1211;
		case 1802: goto tr1195;
		case 1851: goto tr1196;
		case 2058: goto tr1195;
		case 2107: goto tr1196;
	}
	goto tr91;
tr1185:
	cs = 1658;
	{
		size_t len = rdata_tail - s->r_data;
		if (len >= sizeof(s->include_filename)) {
			ERR(ZS_BAD_INCLUDE_FILENAME);
			p--; {goto st319;}
		}

		// Store zero terminated include filename.
		memcpy(s->include_filename, s->r_data, len);
		s->include_filename[len] = '\0';

		// For detection whether origin is not present.
		s->dname = NULL;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		// Extend relative file path.
		if (s->include_filename[0] != '/') {
			int ret = snprintf((char *)(s->buffer), sizeof(s->buffer),
			                   "%s/%s", s->path, s->include_filename);
			if (ret <= 0 || ret >= sizeof(s->buffer)) {
				ERR(ZS_BAD_INCLUDE_FILENAME);
				p--; {goto st319;}
			}
			memcpy(s->include_filename, s->buffer, ret + 1);
		}

		// Origin conversion from wire to text form in \DDD notation.
		if (s->dname == NULL) { // Use current origin.
			dname_to_str(s->zone_origin, s->zone_origin_length,
			             (char *)s->buffer);
		} else { // Use specified origin.
			dname_to_str(s->r_data, s->r_data_length,
			             (char *)s->buffer);
		}

		// Let the caller to solve the include.
		if (s->process.automatic) {
			// Create new scanner for included zone file.
			zs_scanner_t *ss = malloc(sizeof(zs_scanner_t));
			if (ss == NULL) {
				ERR(ZS_UNPROCESSED_INCLUDE);
				p--; {goto st319;}
			}

			// Parse included zone file.
			if (zs_init(ss, (char *)s->buffer, s->default_class,
			            s->default_ttl) != 0 ||
			    zs_set_input_file(ss, (char *)(s->include_filename)) != 0 ||
			    zs_set_processing(ss, s->process.record, s->process.error,
			                      s->process.data) != 0 ||
			    zs_parse_all(ss) != 0) {
				// File internal errors are handled by error callback.
				if (ss->error.counter > 0) {
					s->error.counter += ss->error.counter;
					ERR(ZS_UNPROCESSED_INCLUDE);
				// General include file error.
				} else {
					ERR(ss->error.code);
				}
				zs_deinit(ss);
				free(ss);
				p--; {goto st319;}
			}
			zs_deinit(ss);
			free(ss);
		} else {
			s->state = ZS_STATE_INCLUDE;
			p--; cs = 1641; {p++; goto _out;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	{
		s->line_counter++;
	}
	goto _again;
tr1195:
	cs = 1658;
	{
		// Extend relative file path.
		if (s->include_filename[0] != '/') {
			int ret = snprintf((char *)(s->buffer), sizeof(s->buffer),
			                   "%s/%s", s->path, s->include_filename);
			if (ret <= 0 || ret >= sizeof(s->buffer)) {
				ERR(ZS_BAD_INCLUDE_FILENAME);
				p--; {goto st319;}
			}
			memcpy(s->include_filename, s->buffer, ret + 1);
		}

		// Origin conversion from wire to text form in \DDD notation.
		if (s->dname == NULL) { // Use current origin.
			dname_to_str(s->zone_origin, s->zone_origin_length,
			             (char *)s->buffer);
		} else { // Use specified origin.
			dname_to_str(s->r_data, s->r_data_length,
			             (char *)s->buffer);
		}

		// Let the caller to solve the include.
		if (s->process.automatic) {
			// Create new scanner for included zone file.
			zs_scanner_t *ss = malloc(sizeof(zs_scanner_t));
			if (ss == NULL) {
				ERR(ZS_UNPROCESSED_INCLUDE);
				p--; {goto st319;}
			}

			// Parse included zone file.
			if (zs_init(ss, (char *)s->buffer, s->default_class,
			            s->default_ttl) != 0 ||
			    zs_set_input_file(ss, (char *)(s->include_filename)) != 0 ||
			    zs_set_processing(ss, s->process.record, s->process.error,
			                      s->process.data) != 0 ||
			    zs_parse_all(ss) != 0) {
				// File internal errors are handled by error callback.
				if (ss->error.counter > 0) {
					s->error.counter += ss->error.counter;
					ERR(ZS_UNPROCESSED_INCLUDE);
				// General include file error.
				} else {
					ERR(ss->error.code);
				}
				zs_deinit(ss);
				free(ss);
				p--; {goto st319;}
			}
			zs_deinit(ss);
			free(ss);
		} else {
			s->state = ZS_STATE_INCLUDE;
			p--; cs = 1641; {p++; goto _out;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	{
		s->line_counter++;
	}
	goto _again;
tr1207:
	cs = 1658;
	{
		// Enough room for the terminal label is guaranteed (_label_exit).
		(s->dname)[s->dname_tmp_length++] = 0;
	}
	{
		s->r_data_length = s->dname_tmp_length;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		// Extend relative file path.
		if (s->include_filename[0] != '/') {
			int ret = snprintf((char *)(s->buffer), sizeof(s->buffer),
			                   "%s/%s", s->path, s->include_filename);
			if (ret <= 0 || ret >= sizeof(s->buffer)) {
				ERR(ZS_BAD_INCLUDE_FILENAME);
				p--; {goto st319;}
			}
			memcpy(s->include_filename, s->buffer, ret + 1);
		}

		// Origin conversion from wire to text form in \DDD notation.
		if (s->dname == NULL) { // Use current origin.
			dname_to_str(s->zone_origin, s->zone_origin_length,
			             (char *)s->buffer);
		} else { // Use specified origin.
			dname_to_str(s->r_data, s->r_data_length,
			             (char *)s->buffer);
		}

		// Let the caller to solve the include.
		if (s->process.automatic) {
			// Create new scanner for included zone file.
			zs_scanner_t *ss = malloc(sizeof(zs_scanner_t));
			if (ss == NULL) {
				ERR(ZS_UNPROCESSED_INCLUDE);
				p--; {goto st319;}
			}

			// Parse included zone file.
			if (zs_init(ss, (char *)s->buffer, s->default_class,
			            s->default_ttl) != 0 ||
			    zs_set_input_file(ss, (char *)(s->include_filename)) != 0 ||
			    zs_set_processing(ss, s->process.record, s->process.error,
			                      s->process.data) != 0 ||
			    zs_parse_all(ss) != 0) {
				// File internal errors are handled by error callback.
				if (ss->error.counter > 0) {
					s->error.counter += ss->error.counter;
					ERR(ZS_UNPROCESSED_INCLUDE);
				// General include file error.
				} else {
					ERR(ss->error.code);
				}
				zs_deinit(ss);
				free(ss);
				p--; {goto st319;}
			}
			zs_deinit(ss);
			free(ss);
		} else {
			s->state = ZS_STATE_INCLUDE;
			p--; cs = 1641; {p++; goto _out;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	{
		s->line_counter++;
	}
	goto _again;
tr1213:
	cs = 1658;
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; goto _out;}
			}
		}
	}
	{
		// Extend relative file path.
		if (s->include_filename[0] != '/') {
			int ret = snprintf((char *)(s->buffer), sizeof(s->buffer),
			                   "%s/%s", s->path, s->include_filename);
			if (ret <= 0 || ret >= sizeof(s->buffer)) {
				ERR(ZS_BAD_INCLUDE_FILENAME);
				p--; {goto st319;}
			}
			memcpy(s->include_filename, s->buffer, ret + 1);
		}

		// Origin conversion from wire to text form in \DDD notation.
		if (s->dname == NULL) { // Use current origin.
			dname_to_str(s->zone_origin, s->zone_origin_length,
			             (char *)s->buffer);
		} else { // Use specified origin.
			dname_to_str(s->r_data, s->r_data_length,
			             (char *)s->buffer);
		}

		// Let the caller to solve the include.
		if (s->process.automatic) {
			// Create new scanner for included zone file.
			zs_scanner_t *ss = malloc(sizeof(zs_scanner_t));
			if (ss == NULL) {
				ERR(ZS_UNPROCESSED_INCLUDE);
				p--; {goto st319;}
			}

			// Parse included zone file.
			if (zs_init(ss, (char *)s->buffer, s->default_class,
			            s->default_ttl) != 0 ||
			    zs_set_input_file(ss, (char *)(s->include_filename)) != 0 ||
			    zs_set_processing(ss, s->process.record, s->process.error,
			                      s->process.data) != 0 ||
			    zs_parse_all(ss) != 0) {
				// File internal errors are handled by error callback.
				if (ss->error.counter > 0) {
					s->error.counter += ss->error.counter;
					ERR(ZS_UNPROCESSED_INCLUDE);
				// General include file error.
				} else {
					ERR(ss->error.code);
				}
				zs_deinit(ss);
				free(ss);
				p--; {goto st319;}
			}
			zs_deinit(ss);
			free(ss);
		} else {
			s->state = ZS_STATE_INCLUDE;
			p--; cs = 1641; {p++; goto _out;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	{
		s->line_counter++;
	}
	goto _again;
st1658:
	if ( ++p == pe )
		goto _test_eof1658;
case 1658:
	goto st0;
tr1196:
	{
		s->buffer_length = 0;
	}
	goto st371;
tr1212:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st371;
tr1186:
	{
		size_t len = rdata_tail - s->r_data;
		if (len >= sizeof(s->include_filename)) {
			ERR(ZS_BAD_INCLUDE_FILENAME);
			p--; {goto st319;}
		}

		// Store zero terminated include filename.
		memcpy(s->include_filename, s->r_data, len);
		s->include_filename[len] = '\0';

		// For detection whether origin is not present.
		s->dname = NULL;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		s->buffer_length = 0;
	}
	goto st371;
tr1208:
	{
		// Enough room for the terminal label is guaranteed (_label_exit).
		(s->dname)[s->dname_tmp_length++] = 0;
	}
	{
		s->r_data_length = s->dname_tmp_length;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	{
		s->buffer_length = 0;
	}
	goto st371;
st371:
	if ( ++p == pe )
		goto _test_eof371;
case 371:
	if ( (*p) == 10 )
		goto tr1213;
	goto tr1212;
tr1206:
	{
		s->item_length = 0;
		s->item_length_position = s->dname_tmp_length++;
	}
	goto st372;
tr1220:
	{
		s->dname_tmp_length++;
	}
	goto st372;
tr1194:
	{
		s->dname = s->r_data;
	}
	{
		s->item_length_position = 0;
		s->dname_tmp_length = 0;
	}
	{
		s->item_length = 0;
		s->item_length_position = s->dname_tmp_length++;
	}
	goto st372;
st372:
	if ( ++p == pe )
		goto _test_eof372;
case 372:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr1214;
	goto tr1199;
tr1214:
	{
		if (s->item_length < ZS_MAX_LABEL_LENGTH) {
			(s->dname)[s->dname_tmp_length] = 0;
			s->item_length++;
		} else {
			WARN(ZS_LABEL_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		(s->dname)[s->dname_tmp_length] *= 10;
		(s->dname)[s->dname_tmp_length] += digit_to_num[(uint8_t)(*p)];
	}
	goto st373;
st373:
	if ( ++p == pe )
		goto _test_eof373;
case 373:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr1216;
	goto tr1215;
tr1216:
	{
		(s->dname)[s->dname_tmp_length] *= 10;
		(s->dname)[s->dname_tmp_length] += digit_to_num[(uint8_t)(*p)];
	}
	goto st374;
st374:
	if ( ++p == pe )
		goto _test_eof374;
case 374:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr1217;
	goto tr1215;
tr1217:
	{
		(s->dname)[s->dname_tmp_length] *= 10;
		(s->dname)[s->dname_tmp_length] += digit_to_num[(uint8_t)(*p)];
	}
	goto st375;
st375:
	if ( ++p == pe )
		goto _test_eof375;
case 375:
	switch( (*p) ) {
		case 42: goto tr1218;
		case 46: goto tr1219;
		case 92: goto tr1220;
		case 95: goto tr1218;
	}
	if ( (*p) < 65 ) {
		if ( 45 <= (*p) && (*p) <= 57 )
			goto tr1218;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr1218;
	} else
		goto tr1218;
	goto tr1215;
tr1193:
	{
		s->dname = s->r_data;
	}
	{
		s->item_length_position = 0;
		s->dname_tmp_length = 0;
	}
	goto st376;
st376:
	if ( ++p == pe )
		goto _test_eof376;
case 376:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1202;
		case 32: goto tr1202;
		case 40: goto tr1203;
		case 41: goto tr1204;
		case 1802: goto tr1207;
		case 1851: goto tr1208;
		case 2058: goto tr1207;
		case 2107: goto tr1208;
	}
	goto tr1188;
tr1197:
	{
		s->buffer_length = 0;
	}
	goto st377;
tr1221:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st377;
tr1187:
	{
		size_t len = rdata_tail - s->r_data;
		if (len >= sizeof(s->include_filename)) {
			ERR(ZS_BAD_INCLUDE_FILENAME);
			p--; {goto st319;}
		}

		// Store zero terminated include filename.
		memcpy(s->include_filename, s->r_data, len);
		s->include_filename[len] = '\0';

		// For detection whether origin is not present.
		s->dname = NULL;
	}
	{
		s->buffer_length = 0;
	}
	{
		s->buffer[0] = 0;
		s->buffer_length = 0;
	}
	goto st377;
st377:
	if ( ++p == pe )
		goto _test_eof377;
case 377:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 1802: goto tr1213;
		case 2058: goto tr1222;
	}
	if ( _widec > 1919 ) {
		if ( 1920 <= _widec && _widec <= 2175 )
			goto tr1221;
	} else if ( _widec >= 1664 )
		goto tr1212;
	goto tr91;
tr1222:
	cs = 1659;
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	{
		// Extend relative file path.
		if (s->include_filename[0] != '/') {
			int ret = snprintf((char *)(s->buffer), sizeof(s->buffer),
			                   "%s/%s", s->path, s->include_filename);
			if (ret <= 0 || ret >= sizeof(s->buffer)) {
				ERR(ZS_BAD_INCLUDE_FILENAME);
				p--; {goto st319;}
			}
			memcpy(s->include_filename, s->buffer, ret + 1);
		}

		// Origin conversion from wire to text form in \DDD notation.
		if (s->dname == NULL) { // Use current origin.
			dname_to_str(s->zone_origin, s->zone_origin_length,
			             (char *)s->buffer);
		} else { // Use specified origin.
			dname_to_str(s->r_data, s->r_data_length,
			             (char *)s->buffer);
		}

		// Let the caller to solve the include.
		if (s->process.automatic) {
			// Create new scanner for included zone file.
			zs_scanner_t *ss = malloc(sizeof(zs_scanner_t));
			if (ss == NULL) {
				ERR(ZS_UNPROCESSED_INCLUDE);
				p--; {goto st319;}
			}

			// Parse included zone file.
			if (zs_init(ss, (char *)s->buffer, s->default_class,
			            s->default_ttl) != 0 ||
			    zs_set_input_file(ss, (char *)(s->include_filename)) != 0 ||
			    zs_set_processing(ss, s->process.record, s->process.error,
			                      s->process.data) != 0 ||
			    zs_parse_all(ss) != 0) {
				// File internal errors are handled by error callback.
				if (ss->error.counter > 0) {
					s->error.counter += ss->error.counter;
					ERR(ZS_UNPROCESSED_INCLUDE);
				// General include file error.
				} else {
					ERR(ss->error.code);
				}
				zs_deinit(ss);
				free(ss);
				p--; {goto st319;}
			}
			zs_deinit(ss);
			free(ss);
		} else {
			s->state = ZS_STATE_INCLUDE;
			p--; cs = 1641; {p++; goto _out;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto _again;
st1659:
	if ( ++p == pe )
		goto _test_eof1659;
case 1659:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st378;
		case 32: goto st378;
		case 40: goto tr1224;
		case 41: goto tr1225;
		case 42: goto tr1192;
		case 46: goto tr1193;
		case 92: goto tr1194;
		case 95: goto tr1192;
		case 2058: goto tr1226;
		case 2107: goto tr1227;
	}
	if ( _widec < 65 ) {
		if ( 45 <= _widec && _widec <= 57 )
			goto tr1192;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr1192;
	} else
		goto tr1192;
	goto tr1198;
tr1224:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st378;
tr1225:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st378;
tr1226:
	{
		s->line_counter++;
	}
	goto st378;
tr1229:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 378; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st378;
st378:
	if ( ++p == pe )
		goto _test_eof378;
case 378:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st378;
		case 32: goto st378;
		case 40: goto tr1224;
		case 41: goto tr1225;
		case 42: goto tr1192;
		case 46: goto tr1193;
		case 92: goto tr1194;
		case 95: goto tr1192;
		case 2058: goto tr1226;
		case 2107: goto tr1227;
	}
	if ( _widec < 65 ) {
		if ( 45 <= _widec && _widec <= 57 )
			goto tr1192;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr1192;
	} else
		goto tr1192;
	goto tr1198;
tr1227:
	{
		s->buffer_length = 0;
	}
	goto st379;
tr1228:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st379;
st379:
	if ( ++p == pe )
		goto _test_eof379;
case 379:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr1229;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr1228;
	goto st0;
tr1178:
	{
		s->buffer_length = 0;
	}
	goto st380;
tr1230:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st380;
st380:
	if ( ++p == pe )
		goto _test_eof380;
case 380:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr1231;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr1230;
	goto st0;
st381:
	if ( ++p == pe )
		goto _test_eof381;
case 381:
	if ( (*p) == 43 )
		goto tr1233;
	if ( (*p) < 65 ) {
		if ( 47 <= (*p) && (*p) <= 57 )
			goto tr1233;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr1233;
	} else
		goto tr1233;
	goto tr1232;
tr1233:
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_base64_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st382;
st382:
	if ( ++p == pe )
		goto _test_eof382;
case 382:
	if ( (*p) == 43 )
		goto tr1234;
	if ( (*p) < 65 ) {
		if ( 47 <= (*p) && (*p) <= 57 )
			goto tr1234;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr1234;
	} else
		goto tr1234;
	goto tr1232;
tr1234:
	{
		*(rdata_tail++) += second_left_base64_to_num[(uint8_t)(*p)];

		if (rdata_tail <= rdata_stop) {
			*rdata_tail = second_right_base64_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st383;
st383:
	if ( ++p == pe )
		goto _test_eof383;
case 383:
	switch( (*p) ) {
		case 43: goto tr1235;
		case 61: goto st387;
	}
	if ( (*p) < 65 ) {
		if ( 47 <= (*p) && (*p) <= 57 )
			goto tr1235;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr1235;
	} else
		goto tr1235;
	goto tr1232;
tr1235:
	{
		*(rdata_tail++) += third_left_base64_to_num[(uint8_t)(*p)];

		if (rdata_tail <= rdata_stop) {
			*rdata_tail = third_right_base64_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st384;
st384:
	if ( ++p == pe )
		goto _test_eof384;
case 384:
	switch( (*p) ) {
		case 43: goto tr1237;
		case 61: goto st385;
	}
	if ( (*p) < 65 ) {
		if ( 47 <= (*p) && (*p) <= 57 )
			goto tr1237;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr1237;
	} else
		goto tr1237;
	goto tr1232;
tr1239:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st385;
tr1240:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st385;
tr1241:
	{
		s->line_counter++;
	}
	goto st385;
tr1247:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 385; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st385;
tr1237:
	{
		*(rdata_tail++) += fourth_base64_to_num[(uint8_t)(*p)];
	}
	goto st385;
st385:
	if ( ++p == pe )
		goto _test_eof385;
case 385:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st385;
		case 32: goto st385;
		case 40: goto tr1239;
		case 41: goto tr1240;
		case 43: goto tr1233;
		case 3082: goto tr1241;
		case 3131: goto tr1242;
		case 3338: goto tr1243;
		case 3387: goto tr1243;
		case 3594: goto tr1244;
		case 3643: goto tr1245;
	}
	if ( _widec < 65 ) {
		if ( 47 <= _widec && _widec <= 57 )
			goto tr1233;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr1233;
	} else
		goto tr1233;
	goto tr1232;
tr1242:
	{
		s->buffer_length = 0;
	}
	goto st386;
tr1246:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st386;
st386:
	if ( ++p == pe )
		goto _test_eof386;
case 386:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr1247;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr1246;
	goto tr1232;
tr1243:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1660;
st1660:
	if ( ++p == pe )
		goto _test_eof1660;
case 1660:
	goto st0;
tr1244:
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1661;
st1661:
	if ( ++p == pe )
		goto _test_eof1661;
case 1661:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st385;
		case 32: goto st385;
		case 40: goto tr1239;
		case 41: goto tr1240;
		case 43: goto tr1233;
		case 3082: goto tr1241;
		case 3131: goto tr1242;
		case 3338: goto tr1243;
		case 3387: goto tr1243;
		case 3594: goto tr1244;
		case 3643: goto tr1245;
	}
	if ( _widec < 65 ) {
		if ( 47 <= _widec && _widec <= 57 )
			goto tr1233;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr1233;
	} else
		goto tr1233;
	goto tr1232;
tr1245:
	{
		s->buffer_length = 0;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1662;
st1662:
	if ( ++p == pe )
		goto _test_eof1662;
case 1662:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr1247;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr1246;
	goto tr1232;
st387:
	if ( ++p == pe )
		goto _test_eof387;
case 387:
	if ( (*p) == 61 )
		goto st385;
	goto tr1232;
st388:
	if ( ++p == pe )
		goto _test_eof388;
case 388:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1249;
		case 32: goto tr1249;
		case 40: goto tr1250;
		case 41: goto tr1251;
		case 3082: goto tr1252;
		case 3131: goto tr1253;
		case 3338: goto tr1254;
		case 3387: goto tr1254;
		case 3594: goto tr1255;
		case 3643: goto tr1256;
	}
	goto tr1248;
tr1258:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1259:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1278:
	{
		s->line_counter++;
	}
	goto st389;
tr1305:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 389; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st389;
tr1249:
	{
		memset(s->windows, 0, sizeof(s->windows));
		s->last_window = -1;
	}
	goto st389;
tr1250:
	{
		memset(s->windows, 0, sizeof(s->windows));
		s->last_window = -1;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1251:
	{
		memset(s->windows, 0, sizeof(s->windows));
		s->last_window = -1;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1252:
	{
		memset(s->windows, 0, sizeof(s->windows));
		s->last_window = -1;
	}
	{
		s->line_counter++;
	}
	goto st389;
tr1283:
	{ window_add_bit(KNOT_RRTYPE_A, s); }
	goto st389;
tr1284:
	{ window_add_bit(KNOT_RRTYPE_A, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1285:
	{ window_add_bit(KNOT_RRTYPE_A, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1289:
	{ window_add_bit(KNOT_RRTYPE_A, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1296:
	{ window_add_bit(KNOT_RRTYPE_AAAA, s); }
	goto st389;
tr1297:
	{ window_add_bit(KNOT_RRTYPE_AAAA, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1298:
	{ window_add_bit(KNOT_RRTYPE_AAAA, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1299:
	{ window_add_bit(KNOT_RRTYPE_AAAA, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1312:
	{ window_add_bit(KNOT_RRTYPE_CAA, s); }
	goto st389;
tr1313:
	{ window_add_bit(KNOT_RRTYPE_CAA, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1314:
	{ window_add_bit(KNOT_RRTYPE_CAA, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1315:
	{ window_add_bit(KNOT_RRTYPE_CAA, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1326:
	{ window_add_bit(KNOT_RRTYPE_CDNSKEY, s); }
	goto st389;
tr1327:
	{ window_add_bit(KNOT_RRTYPE_CDNSKEY, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1328:
	{ window_add_bit(KNOT_RRTYPE_CDNSKEY, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1329:
	{ window_add_bit(KNOT_RRTYPE_CDNSKEY, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1334:
	{ window_add_bit(KNOT_RRTYPE_CDS, s); }
	goto st389;
tr1335:
	{ window_add_bit(KNOT_RRTYPE_CDS, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1336:
	{ window_add_bit(KNOT_RRTYPE_CDS, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1337:
	{ window_add_bit(KNOT_RRTYPE_CDS, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1344:
	{ window_add_bit(KNOT_RRTYPE_CERT, s); }
	goto st389;
tr1345:
	{ window_add_bit(KNOT_RRTYPE_CERT, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1346:
	{ window_add_bit(KNOT_RRTYPE_CERT, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1347:
	{ window_add_bit(KNOT_RRTYPE_CERT, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1355:
	{ window_add_bit(KNOT_RRTYPE_CNAME, s); }
	goto st389;
tr1356:
	{ window_add_bit(KNOT_RRTYPE_CNAME, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1357:
	{ window_add_bit(KNOT_RRTYPE_CNAME, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1358:
	{ window_add_bit(KNOT_RRTYPE_CNAME, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1366:
	{ window_add_bit(KNOT_RRTYPE_CSYNC, s); }
	goto st389;
tr1367:
	{ window_add_bit(KNOT_RRTYPE_CSYNC, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1368:
	{ window_add_bit(KNOT_RRTYPE_CSYNC, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1369:
	{ window_add_bit(KNOT_RRTYPE_CSYNC, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1380:
	{ window_add_bit(KNOT_RRTYPE_DHCID, s); }
	goto st389;
tr1381:
	{ window_add_bit(KNOT_RRTYPE_DHCID, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1382:
	{ window_add_bit(KNOT_RRTYPE_DHCID, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1383:
	{ window_add_bit(KNOT_RRTYPE_DHCID, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1392:
	{ window_add_bit(KNOT_RRTYPE_DNAME, s); }
	goto st389;
tr1393:
	{ window_add_bit(KNOT_RRTYPE_DNAME, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1394:
	{ window_add_bit(KNOT_RRTYPE_DNAME, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1395:
	{ window_add_bit(KNOT_RRTYPE_DNAME, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1403:
	{ window_add_bit(KNOT_RRTYPE_DNSKEY, s); }
	goto st389;
tr1404:
	{ window_add_bit(KNOT_RRTYPE_DNSKEY, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1405:
	{ window_add_bit(KNOT_RRTYPE_DNSKEY, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1406:
	{ window_add_bit(KNOT_RRTYPE_DNSKEY, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1411:
	{ window_add_bit(KNOT_RRTYPE_DS, s); }
	goto st389;
tr1412:
	{ window_add_bit(KNOT_RRTYPE_DS, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1413:
	{ window_add_bit(KNOT_RRTYPE_DS, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1415:
	{ window_add_bit(KNOT_RRTYPE_DS, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1422:
	{ window_add_bit(KNOT_RRTYPE_DSYNC, s); }
	goto st389;
tr1423:
	{ window_add_bit(KNOT_RRTYPE_DSYNC, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1424:
	{ window_add_bit(KNOT_RRTYPE_DSYNC, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1425:
	{ window_add_bit(KNOT_RRTYPE_DSYNC, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1435:
	{ window_add_bit(KNOT_RRTYPE_EUI48, s); }
	goto st389;
tr1436:
	{ window_add_bit(KNOT_RRTYPE_EUI48, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1437:
	{ window_add_bit(KNOT_RRTYPE_EUI48, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1438:
	{ window_add_bit(KNOT_RRTYPE_EUI48, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1444:
	{ window_add_bit(KNOT_RRTYPE_EUI64, s); }
	goto st389;
tr1445:
	{ window_add_bit(KNOT_RRTYPE_EUI64, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1446:
	{ window_add_bit(KNOT_RRTYPE_EUI64, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1447:
	{ window_add_bit(KNOT_RRTYPE_EUI64, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1457:
	{ window_add_bit(KNOT_RRTYPE_HINFO, s); }
	goto st389;
tr1458:
	{ window_add_bit(KNOT_RRTYPE_HINFO, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1459:
	{ window_add_bit(KNOT_RRTYPE_HINFO, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1460:
	{ window_add_bit(KNOT_RRTYPE_HINFO, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1468:
	{ window_add_bit(KNOT_RRTYPE_HTTPS, s); }
	goto st389;
tr1469:
	{ window_add_bit(KNOT_RRTYPE_HTTPS, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1470:
	{ window_add_bit(KNOT_RRTYPE_HTTPS, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1471:
	{ window_add_bit(KNOT_RRTYPE_HTTPS, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1483:
	{ window_add_bit(KNOT_RRTYPE_IPSECKEY, s); }
	goto st389;
tr1484:
	{ window_add_bit(KNOT_RRTYPE_IPSECKEY, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1485:
	{ window_add_bit(KNOT_RRTYPE_IPSECKEY, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1486:
	{ window_add_bit(KNOT_RRTYPE_IPSECKEY, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1494:
	{ window_add_bit(KNOT_RRTYPE_KEY, s); }
	goto st389;
tr1495:
	{ window_add_bit(KNOT_RRTYPE_KEY, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1496:
	{ window_add_bit(KNOT_RRTYPE_KEY, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1497:
	{ window_add_bit(KNOT_RRTYPE_KEY, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1502:
	{ window_add_bit(KNOT_RRTYPE_KX, s); }
	goto st389;
tr1503:
	{ window_add_bit(KNOT_RRTYPE_KX, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1504:
	{ window_add_bit(KNOT_RRTYPE_KX, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1505:
	{ window_add_bit(KNOT_RRTYPE_KX, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1515:
	{ window_add_bit(KNOT_RRTYPE_L32, s); }
	goto st389;
tr1516:
	{ window_add_bit(KNOT_RRTYPE_L32, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1517:
	{ window_add_bit(KNOT_RRTYPE_L32, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1518:
	{ window_add_bit(KNOT_RRTYPE_L32, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1524:
	{ window_add_bit(KNOT_RRTYPE_L64, s); }
	goto st389;
tr1525:
	{ window_add_bit(KNOT_RRTYPE_L64, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1526:
	{ window_add_bit(KNOT_RRTYPE_L64, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1527:
	{ window_add_bit(KNOT_RRTYPE_L64, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1533:
	{ window_add_bit(KNOT_RRTYPE_LOC, s); }
	goto st389;
tr1534:
	{ window_add_bit(KNOT_RRTYPE_LOC, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1535:
	{ window_add_bit(KNOT_RRTYPE_LOC, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1536:
	{ window_add_bit(KNOT_RRTYPE_LOC, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1541:
	{ window_add_bit(KNOT_RRTYPE_LP, s); }
	goto st389;
tr1542:
	{ window_add_bit(KNOT_RRTYPE_LP, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1543:
	{ window_add_bit(KNOT_RRTYPE_LP, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1544:
	{ window_add_bit(KNOT_RRTYPE_LP, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1554:
	{ window_add_bit(KNOT_RRTYPE_MINFO, s); }
	goto st389;
tr1555:
	{ window_add_bit(KNOT_RRTYPE_MINFO, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1556:
	{ window_add_bit(KNOT_RRTYPE_MINFO, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1557:
	{ window_add_bit(KNOT_RRTYPE_MINFO, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1562:
	{ window_add_bit(KNOT_RRTYPE_MX, s); }
	goto st389;
tr1563:
	{ window_add_bit(KNOT_RRTYPE_MX, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1564:
	{ window_add_bit(KNOT_RRTYPE_MX, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1565:
	{ window_add_bit(KNOT_RRTYPE_MX, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1576:
	{ window_add_bit(KNOT_RRTYPE_NAPTR, s); }
	goto st389;
tr1577:
	{ window_add_bit(KNOT_RRTYPE_NAPTR, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1578:
	{ window_add_bit(KNOT_RRTYPE_NAPTR, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1579:
	{ window_add_bit(KNOT_RRTYPE_NAPTR, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1585:
	{ window_add_bit(KNOT_RRTYPE_NID, s); }
	goto st389;
tr1586:
	{ window_add_bit(KNOT_RRTYPE_NID, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1587:
	{ window_add_bit(KNOT_RRTYPE_NID, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1588:
	{ window_add_bit(KNOT_RRTYPE_NID, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1593:
	{ window_add_bit(KNOT_RRTYPE_NS, s); }
	goto st389;
tr1594:
	{ window_add_bit(KNOT_RRTYPE_NS, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1595:
	{ window_add_bit(KNOT_RRTYPE_NS, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1597:
	{ window_add_bit(KNOT_RRTYPE_NS, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1603:
	{ window_add_bit(KNOT_RRTYPE_NSEC, s); }
	goto st389;
tr1604:
	{ window_add_bit(KNOT_RRTYPE_NSEC, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1605:
	{ window_add_bit(KNOT_RRTYPE_NSEC, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1607:
	{ window_add_bit(KNOT_RRTYPE_NSEC, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1612:
	{ window_add_bit(KNOT_RRTYPE_NSEC3, s); }
	goto st389;
tr1613:
	{ window_add_bit(KNOT_RRTYPE_NSEC3, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1614:
	{ window_add_bit(KNOT_RRTYPE_NSEC3, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1616:
	{ window_add_bit(KNOT_RRTYPE_NSEC3, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1625:
	{ window_add_bit(KNOT_RRTYPE_NSEC3PARAM, s); }
	goto st389;
tr1626:
	{ window_add_bit(KNOT_RRTYPE_NSEC3PARAM, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1627:
	{ window_add_bit(KNOT_RRTYPE_NSEC3PARAM, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1628:
	{ window_add_bit(KNOT_RRTYPE_NSEC3PARAM, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1642:
	{ window_add_bit(KNOT_RRTYPE_OPENPGPKEY, s); }
	goto st389;
tr1643:
	{ window_add_bit(KNOT_RRTYPE_OPENPGPKEY, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1644:
	{ window_add_bit(KNOT_RRTYPE_OPENPGPKEY, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1645:
	{ window_add_bit(KNOT_RRTYPE_OPENPGPKEY, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1652:
	{ window_add_bit(KNOT_RRTYPE_PTR, s); }
	goto st389;
tr1653:
	{ window_add_bit(KNOT_RRTYPE_PTR, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1654:
	{ window_add_bit(KNOT_RRTYPE_PTR, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1655:
	{ window_add_bit(KNOT_RRTYPE_PTR, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1663:
	{ window_add_bit(KNOT_RRTYPE_RP, s); }
	goto st389;
tr1664:
	{ window_add_bit(KNOT_RRTYPE_RP, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1665:
	{ window_add_bit(KNOT_RRTYPE_RP, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1666:
	{ window_add_bit(KNOT_RRTYPE_RP, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1674:
	{ window_add_bit(KNOT_RRTYPE_RRSIG, s); }
	goto st389;
tr1675:
	{ window_add_bit(KNOT_RRTYPE_RRSIG, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1676:
	{ window_add_bit(KNOT_RRTYPE_RRSIG, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1677:
	{ window_add_bit(KNOT_RRTYPE_RRSIG, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1682:
	{ window_add_bit(KNOT_RRTYPE_RT, s); }
	goto st389;
tr1683:
	{ window_add_bit(KNOT_RRTYPE_RT, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1684:
	{ window_add_bit(KNOT_RRTYPE_RT, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1685:
	{ window_add_bit(KNOT_RRTYPE_RT, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1700:
	{ window_add_bit(KNOT_RRTYPE_SMIMEA, s); }
	goto st389;
tr1701:
	{ window_add_bit(KNOT_RRTYPE_SMIMEA, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1702:
	{ window_add_bit(KNOT_RRTYPE_SMIMEA, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1703:
	{ window_add_bit(KNOT_RRTYPE_SMIMEA, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1709:
	{ window_add_bit(KNOT_RRTYPE_SOA, s); }
	goto st389;
tr1710:
	{ window_add_bit(KNOT_RRTYPE_SOA, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1711:
	{ window_add_bit(KNOT_RRTYPE_SOA, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1712:
	{ window_add_bit(KNOT_RRTYPE_SOA, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1718:
	{ window_add_bit(KNOT_RRTYPE_SPF, s); }
	goto st389;
tr1719:
	{ window_add_bit(KNOT_RRTYPE_SPF, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1720:
	{ window_add_bit(KNOT_RRTYPE_SPF, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1721:
	{ window_add_bit(KNOT_RRTYPE_SPF, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1727:
	{ window_add_bit(KNOT_RRTYPE_SRV, s); }
	goto st389;
tr1728:
	{ window_add_bit(KNOT_RRTYPE_SRV, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1729:
	{ window_add_bit(KNOT_RRTYPE_SRV, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1730:
	{ window_add_bit(KNOT_RRTYPE_SRV, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1738:
	{ window_add_bit(KNOT_RRTYPE_SSHFP, s); }
	goto st389;
tr1739:
	{ window_add_bit(KNOT_RRTYPE_SSHFP, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1740:
	{ window_add_bit(KNOT_RRTYPE_SSHFP, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1741:
	{ window_add_bit(KNOT_RRTYPE_SSHFP, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1748:
	{ window_add_bit(KNOT_RRTYPE_SVCB, s); }
	goto st389;
tr1749:
	{ window_add_bit(KNOT_RRTYPE_SVCB, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1750:
	{ window_add_bit(KNOT_RRTYPE_SVCB, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1751:
	{ window_add_bit(KNOT_RRTYPE_SVCB, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1761:
	{ window_add_bit(KNOT_RRTYPE_TLSA, s); }
	goto st389;
tr1762:
	{ window_add_bit(KNOT_RRTYPE_TLSA, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1763:
	{ window_add_bit(KNOT_RRTYPE_TLSA, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1764:
	{ window_add_bit(KNOT_RRTYPE_TLSA, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1770:
	{ window_add_bit(KNOT_RRTYPE_TXT, s); }
	goto st389;
tr1771:
	{ window_add_bit(KNOT_RRTYPE_TXT, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1772:
	{ window_add_bit(KNOT_RRTYPE_TXT, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1773:
	{ window_add_bit(KNOT_RRTYPE_TXT, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1781:
	{
		if (s->number64 <= UINT16_MAX) {
			window_add_bit(s->number64, s);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st389;
tr1782:
	{
		if (s->number64 <= UINT16_MAX) {
			window_add_bit(s->number64, s);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1783:
	{
		if (s->number64 <= UINT16_MAX) {
			window_add_bit(s->number64, s);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1785:
	{
		if (s->number64 <= UINT16_MAX) {
			window_add_bit(s->number64, s);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st389;
tr1792:
	{ window_add_bit(KNOT_RRTYPE_URI, s); }
	goto st389;
tr1793:
	{ window_add_bit(KNOT_RRTYPE_URI, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1794:
	{ window_add_bit(KNOT_RRTYPE_URI, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1795:
	{ window_add_bit(KNOT_RRTYPE_URI, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1805:
	{ window_add_bit(KNOT_RRTYPE_WALLET, s); }
	goto st389;
tr1806:
	{ window_add_bit(KNOT_RRTYPE_WALLET, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1807:
	{ window_add_bit(KNOT_RRTYPE_WALLET, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1808:
	{ window_add_bit(KNOT_RRTYPE_WALLET, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1818:
	{ window_add_bit(KNOT_RRTYPE_ZONEMD, s); }
	goto st389;
tr1819:
	{ window_add_bit(KNOT_RRTYPE_ZONEMD, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1820:
	{ window_add_bit(KNOT_RRTYPE_ZONEMD, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1821:
	{ window_add_bit(KNOT_RRTYPE_ZONEMD, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1829:
	{ window_add_bit(KNOT_RRTYPE_AFSDB, s); }
	goto st389;
tr1830:
	{ window_add_bit(KNOT_RRTYPE_AFSDB, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1831:
	{ window_add_bit(KNOT_RRTYPE_AFSDB, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1832:
	{ window_add_bit(KNOT_RRTYPE_AFSDB, s); }
	{
		s->line_counter++;
	}
	goto st389;
tr1838:
	{ window_add_bit(KNOT_RRTYPE_APL, s); }
	goto st389;
tr1839:
	{ window_add_bit(KNOT_RRTYPE_APL, s); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st389;
tr1840:
	{ window_add_bit(KNOT_RRTYPE_APL, s); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st389;
tr1841:
	{ window_add_bit(KNOT_RRTYPE_APL, s); }
	{
		s->line_counter++;
	}
	goto st389;
st389:
	if ( ++p == pe )
		goto _test_eof389;
case 389:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st389;
		case 32: goto st389;
		case 40: goto tr1258;
		case 41: goto tr1259;
		case 65: goto st390;
		case 67: goto st395;
		case 68: goto st416;
		case 69: goto st433;
		case 72: goto st440;
		case 73: goto st449;
		case 75: goto st457;
		case 76: goto st461;
		case 77: goto st469;
		case 78: goto st475;
		case 79: goto st491;
		case 80: goto st501;
		case 82: goto st504;
		case 83: goto st511;
		case 84: goto st530;
		case 85: goto st540;
		case 87: goto st543;
		case 90: goto st549;
		case 97: goto st390;
		case 99: goto st395;
		case 100: goto st416;
		case 101: goto st433;
		case 104: goto st440;
		case 105: goto st449;
		case 107: goto st457;
		case 108: goto st461;
		case 109: goto st469;
		case 110: goto st475;
		case 111: goto st491;
		case 112: goto st501;
		case 114: goto st504;
		case 115: goto st511;
		case 116: goto st530;
		case 117: goto st540;
		case 119: goto st543;
		case 122: goto st549;
		case 3082: goto tr1278;
		case 3131: goto tr1279;
		case 3338: goto tr1280;
		case 3387: goto tr1280;
		case 3594: goto tr1281;
		case 3643: goto tr1282;
	}
	goto tr1248;
st390:
	if ( ++p == pe )
		goto _test_eof390;
case 390:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1283;
		case 32: goto tr1283;
		case 40: goto tr1284;
		case 41: goto tr1285;
		case 65: goto st391;
		case 70: goto st555;
		case 80: goto st559;
		case 97: goto st391;
		case 102: goto st555;
		case 112: goto st559;
		case 3082: goto tr1289;
		case 3131: goto tr1290;
		case 3338: goto tr1291;
		case 3387: goto tr1291;
		case 3594: goto tr1292;
		case 3643: goto tr1293;
	}
	goto tr1248;
st391:
	if ( ++p == pe )
		goto _test_eof391;
case 391:
	switch( (*p) ) {
		case 65: goto st392;
		case 97: goto st392;
	}
	goto tr1248;
st392:
	if ( ++p == pe )
		goto _test_eof392;
case 392:
	switch( (*p) ) {
		case 65: goto st393;
		case 97: goto st393;
	}
	goto tr1248;
st393:
	if ( ++p == pe )
		goto _test_eof393;
case 393:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1296;
		case 32: goto tr1296;
		case 40: goto tr1297;
		case 41: goto tr1298;
		case 3082: goto tr1299;
		case 3131: goto tr1300;
		case 3338: goto tr1301;
		case 3387: goto tr1301;
		case 3594: goto tr1302;
		case 3643: goto tr1303;
	}
	goto tr1248;
tr1279:
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1304:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st394;
tr1253:
	{
		memset(s->windows, 0, sizeof(s->windows));
		s->last_window = -1;
	}
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1290:
	{ window_add_bit(KNOT_RRTYPE_A, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1300:
	{ window_add_bit(KNOT_RRTYPE_AAAA, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1316:
	{ window_add_bit(KNOT_RRTYPE_CAA, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1330:
	{ window_add_bit(KNOT_RRTYPE_CDNSKEY, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1338:
	{ window_add_bit(KNOT_RRTYPE_CDS, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1348:
	{ window_add_bit(KNOT_RRTYPE_CERT, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1359:
	{ window_add_bit(KNOT_RRTYPE_CNAME, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1370:
	{ window_add_bit(KNOT_RRTYPE_CSYNC, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1384:
	{ window_add_bit(KNOT_RRTYPE_DHCID, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1396:
	{ window_add_bit(KNOT_RRTYPE_DNAME, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1407:
	{ window_add_bit(KNOT_RRTYPE_DNSKEY, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1416:
	{ window_add_bit(KNOT_RRTYPE_DS, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1426:
	{ window_add_bit(KNOT_RRTYPE_DSYNC, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1439:
	{ window_add_bit(KNOT_RRTYPE_EUI48, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1448:
	{ window_add_bit(KNOT_RRTYPE_EUI64, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1461:
	{ window_add_bit(KNOT_RRTYPE_HINFO, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1472:
	{ window_add_bit(KNOT_RRTYPE_HTTPS, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1487:
	{ window_add_bit(KNOT_RRTYPE_IPSECKEY, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1498:
	{ window_add_bit(KNOT_RRTYPE_KEY, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1506:
	{ window_add_bit(KNOT_RRTYPE_KX, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1519:
	{ window_add_bit(KNOT_RRTYPE_L32, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1528:
	{ window_add_bit(KNOT_RRTYPE_L64, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1537:
	{ window_add_bit(KNOT_RRTYPE_LOC, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1545:
	{ window_add_bit(KNOT_RRTYPE_LP, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1558:
	{ window_add_bit(KNOT_RRTYPE_MINFO, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1566:
	{ window_add_bit(KNOT_RRTYPE_MX, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1580:
	{ window_add_bit(KNOT_RRTYPE_NAPTR, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1589:
	{ window_add_bit(KNOT_RRTYPE_NID, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1598:
	{ window_add_bit(KNOT_RRTYPE_NS, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1608:
	{ window_add_bit(KNOT_RRTYPE_NSEC, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1617:
	{ window_add_bit(KNOT_RRTYPE_NSEC3, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1629:
	{ window_add_bit(KNOT_RRTYPE_NSEC3PARAM, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1646:
	{ window_add_bit(KNOT_RRTYPE_OPENPGPKEY, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1656:
	{ window_add_bit(KNOT_RRTYPE_PTR, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1667:
	{ window_add_bit(KNOT_RRTYPE_RP, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1678:
	{ window_add_bit(KNOT_RRTYPE_RRSIG, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1686:
	{ window_add_bit(KNOT_RRTYPE_RT, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1704:
	{ window_add_bit(KNOT_RRTYPE_SMIMEA, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1713:
	{ window_add_bit(KNOT_RRTYPE_SOA, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1722:
	{ window_add_bit(KNOT_RRTYPE_SPF, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1731:
	{ window_add_bit(KNOT_RRTYPE_SRV, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1742:
	{ window_add_bit(KNOT_RRTYPE_SSHFP, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1752:
	{ window_add_bit(KNOT_RRTYPE_SVCB, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1765:
	{ window_add_bit(KNOT_RRTYPE_TLSA, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1774:
	{ window_add_bit(KNOT_RRTYPE_TXT, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1786:
	{
		if (s->number64 <= UINT16_MAX) {
			window_add_bit(s->number64, s);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1796:
	{ window_add_bit(KNOT_RRTYPE_URI, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1809:
	{ window_add_bit(KNOT_RRTYPE_WALLET, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1822:
	{ window_add_bit(KNOT_RRTYPE_ZONEMD, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1833:
	{ window_add_bit(KNOT_RRTYPE_AFSDB, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
tr1842:
	{ window_add_bit(KNOT_RRTYPE_APL, s); }
	{
		s->buffer_length = 0;
	}
	goto st394;
st394:
	if ( ++p == pe )
		goto _test_eof394;
case 394:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr1305;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr1304;
	goto tr1248;
tr1254:
	{
		memset(s->windows, 0, sizeof(s->windows));
		s->last_window = -1;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1280:
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1291:
	{ window_add_bit(KNOT_RRTYPE_A, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1301:
	{ window_add_bit(KNOT_RRTYPE_AAAA, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1317:
	{ window_add_bit(KNOT_RRTYPE_CAA, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1331:
	{ window_add_bit(KNOT_RRTYPE_CDNSKEY, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1339:
	{ window_add_bit(KNOT_RRTYPE_CDS, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1349:
	{ window_add_bit(KNOT_RRTYPE_CERT, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1360:
	{ window_add_bit(KNOT_RRTYPE_CNAME, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1371:
	{ window_add_bit(KNOT_RRTYPE_CSYNC, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1385:
	{ window_add_bit(KNOT_RRTYPE_DHCID, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1397:
	{ window_add_bit(KNOT_RRTYPE_DNAME, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1408:
	{ window_add_bit(KNOT_RRTYPE_DNSKEY, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1417:
	{ window_add_bit(KNOT_RRTYPE_DS, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1427:
	{ window_add_bit(KNOT_RRTYPE_DSYNC, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1440:
	{ window_add_bit(KNOT_RRTYPE_EUI48, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1449:
	{ window_add_bit(KNOT_RRTYPE_EUI64, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1462:
	{ window_add_bit(KNOT_RRTYPE_HINFO, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1473:
	{ window_add_bit(KNOT_RRTYPE_HTTPS, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1488:
	{ window_add_bit(KNOT_RRTYPE_IPSECKEY, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1499:
	{ window_add_bit(KNOT_RRTYPE_KEY, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1507:
	{ window_add_bit(KNOT_RRTYPE_KX, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1520:
	{ window_add_bit(KNOT_RRTYPE_L32, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1529:
	{ window_add_bit(KNOT_RRTYPE_L64, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1538:
	{ window_add_bit(KNOT_RRTYPE_LOC, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1546:
	{ window_add_bit(KNOT_RRTYPE_LP, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1559:
	{ window_add_bit(KNOT_RRTYPE_MINFO, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1567:
	{ window_add_bit(KNOT_RRTYPE_MX, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1581:
	{ window_add_bit(KNOT_RRTYPE_NAPTR, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1590:
	{ window_add_bit(KNOT_RRTYPE_NID, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1599:
	{ window_add_bit(KNOT_RRTYPE_NS, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1609:
	{ window_add_bit(KNOT_RRTYPE_NSEC, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1618:
	{ window_add_bit(KNOT_RRTYPE_NSEC3, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1630:
	{ window_add_bit(KNOT_RRTYPE_NSEC3PARAM, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1647:
	{ window_add_bit(KNOT_RRTYPE_OPENPGPKEY, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1657:
	{ window_add_bit(KNOT_RRTYPE_PTR, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1668:
	{ window_add_bit(KNOT_RRTYPE_RP, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1679:
	{ window_add_bit(KNOT_RRTYPE_RRSIG, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1687:
	{ window_add_bit(KNOT_RRTYPE_RT, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1705:
	{ window_add_bit(KNOT_RRTYPE_SMIMEA, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1714:
	{ window_add_bit(KNOT_RRTYPE_SOA, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1723:
	{ window_add_bit(KNOT_RRTYPE_SPF, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1732:
	{ window_add_bit(KNOT_RRTYPE_SRV, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1743:
	{ window_add_bit(KNOT_RRTYPE_SSHFP, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1753:
	{ window_add_bit(KNOT_RRTYPE_SVCB, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1766:
	{ window_add_bit(KNOT_RRTYPE_TLSA, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1775:
	{ window_add_bit(KNOT_RRTYPE_TXT, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1787:
	{
		if (s->number64 <= UINT16_MAX) {
			window_add_bit(s->number64, s);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1797:
	{ window_add_bit(KNOT_RRTYPE_URI, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1810:
	{ window_add_bit(KNOT_RRTYPE_WALLET, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1823:
	{ window_add_bit(KNOT_RRTYPE_ZONEMD, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1834:
	{ window_add_bit(KNOT_RRTYPE_AFSDB, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
tr1843:
	{ window_add_bit(KNOT_RRTYPE_APL, s); }
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1663;
st1663:
	if ( ++p == pe )
		goto _test_eof1663;
case 1663:
	goto st0;
tr1255:
	{
		memset(s->windows, 0, sizeof(s->windows));
		s->last_window = -1;
	}
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1281:
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1292:
	{ window_add_bit(KNOT_RRTYPE_A, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1302:
	{ window_add_bit(KNOT_RRTYPE_AAAA, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1318:
	{ window_add_bit(KNOT_RRTYPE_CAA, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1332:
	{ window_add_bit(KNOT_RRTYPE_CDNSKEY, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1340:
	{ window_add_bit(KNOT_RRTYPE_CDS, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1350:
	{ window_add_bit(KNOT_RRTYPE_CERT, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1361:
	{ window_add_bit(KNOT_RRTYPE_CNAME, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1372:
	{ window_add_bit(KNOT_RRTYPE_CSYNC, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1386:
	{ window_add_bit(KNOT_RRTYPE_DHCID, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1398:
	{ window_add_bit(KNOT_RRTYPE_DNAME, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1409:
	{ window_add_bit(KNOT_RRTYPE_DNSKEY, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1418:
	{ window_add_bit(KNOT_RRTYPE_DS, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1428:
	{ window_add_bit(KNOT_RRTYPE_DSYNC, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1441:
	{ window_add_bit(KNOT_RRTYPE_EUI48, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1450:
	{ window_add_bit(KNOT_RRTYPE_EUI64, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1463:
	{ window_add_bit(KNOT_RRTYPE_HINFO, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1474:
	{ window_add_bit(KNOT_RRTYPE_HTTPS, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1489:
	{ window_add_bit(KNOT_RRTYPE_IPSECKEY, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1500:
	{ window_add_bit(KNOT_RRTYPE_KEY, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1508:
	{ window_add_bit(KNOT_RRTYPE_KX, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1521:
	{ window_add_bit(KNOT_RRTYPE_L32, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1530:
	{ window_add_bit(KNOT_RRTYPE_L64, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1539:
	{ window_add_bit(KNOT_RRTYPE_LOC, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1547:
	{ window_add_bit(KNOT_RRTYPE_LP, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1560:
	{ window_add_bit(KNOT_RRTYPE_MINFO, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1568:
	{ window_add_bit(KNOT_RRTYPE_MX, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1582:
	{ window_add_bit(KNOT_RRTYPE_NAPTR, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1591:
	{ window_add_bit(KNOT_RRTYPE_NID, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1600:
	{ window_add_bit(KNOT_RRTYPE_NS, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1610:
	{ window_add_bit(KNOT_RRTYPE_NSEC, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1619:
	{ window_add_bit(KNOT_RRTYPE_NSEC3, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1631:
	{ window_add_bit(KNOT_RRTYPE_NSEC3PARAM, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1648:
	{ window_add_bit(KNOT_RRTYPE_OPENPGPKEY, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1658:
	{ window_add_bit(KNOT_RRTYPE_PTR, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1669:
	{ window_add_bit(KNOT_RRTYPE_RP, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1680:
	{ window_add_bit(KNOT_RRTYPE_RRSIG, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1688:
	{ window_add_bit(KNOT_RRTYPE_RT, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1706:
	{ window_add_bit(KNOT_RRTYPE_SMIMEA, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1715:
	{ window_add_bit(KNOT_RRTYPE_SOA, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1724:
	{ window_add_bit(KNOT_RRTYPE_SPF, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1733:
	{ window_add_bit(KNOT_RRTYPE_SRV, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1744:
	{ window_add_bit(KNOT_RRTYPE_SSHFP, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1754:
	{ window_add_bit(KNOT_RRTYPE_SVCB, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1767:
	{ window_add_bit(KNOT_RRTYPE_TLSA, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1776:
	{ window_add_bit(KNOT_RRTYPE_TXT, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1788:
	{
		if (s->number64 <= UINT16_MAX) {
			window_add_bit(s->number64, s);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1798:
	{ window_add_bit(KNOT_RRTYPE_URI, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1811:
	{ window_add_bit(KNOT_RRTYPE_WALLET, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1824:
	{ window_add_bit(KNOT_RRTYPE_ZONEMD, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1835:
	{ window_add_bit(KNOT_RRTYPE_AFSDB, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
tr1844:
	{ window_add_bit(KNOT_RRTYPE_APL, s); }
	{
		s->line_counter++;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1664;
st1664:
	if ( ++p == pe )
		goto _test_eof1664;
case 1664:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st389;
		case 32: goto st389;
		case 40: goto tr1258;
		case 41: goto tr1259;
		case 65: goto st390;
		case 67: goto st395;
		case 68: goto st416;
		case 69: goto st433;
		case 72: goto st440;
		case 73: goto st449;
		case 75: goto st457;
		case 76: goto st461;
		case 77: goto st469;
		case 78: goto st475;
		case 79: goto st491;
		case 80: goto st501;
		case 82: goto st504;
		case 83: goto st511;
		case 84: goto st530;
		case 85: goto st540;
		case 87: goto st543;
		case 90: goto st549;
		case 97: goto st390;
		case 99: goto st395;
		case 100: goto st416;
		case 101: goto st433;
		case 104: goto st440;
		case 105: goto st449;
		case 107: goto st457;
		case 108: goto st461;
		case 109: goto st469;
		case 110: goto st475;
		case 111: goto st491;
		case 112: goto st501;
		case 114: goto st504;
		case 115: goto st511;
		case 116: goto st530;
		case 117: goto st540;
		case 119: goto st543;
		case 122: goto st549;
		case 3082: goto tr1278;
		case 3131: goto tr1279;
		case 3338: goto tr1280;
		case 3387: goto tr1280;
		case 3594: goto tr1281;
		case 3643: goto tr1282;
	}
	goto tr1248;
st395:
	if ( ++p == pe )
		goto _test_eof395;
case 395:
	switch( (*p) ) {
		case 65: goto st396;
		case 68: goto st398;
		case 69: goto st405;
		case 78: goto st408;
		case 83: goto st412;
		case 97: goto st396;
		case 100: goto st398;
		case 101: goto st405;
		case 110: goto st408;
		case 115: goto st412;
	}
	goto tr1248;
st396:
	if ( ++p == pe )
		goto _test_eof396;
case 396:
	switch( (*p) ) {
		case 65: goto st397;
		case 97: goto st397;
	}
	goto tr1248;
st397:
	if ( ++p == pe )
		goto _test_eof397;
case 397:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1312;
		case 32: goto tr1312;
		case 40: goto tr1313;
		case 41: goto tr1314;
		case 3082: goto tr1315;
		case 3131: goto tr1316;
		case 3338: goto tr1317;
		case 3387: goto tr1317;
		case 3594: goto tr1318;
		case 3643: goto tr1319;
	}
	goto tr1248;
tr1256:
	{
		memset(s->windows, 0, sizeof(s->windows));
		s->last_window = -1;
	}
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1282:
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1293:
	{ window_add_bit(KNOT_RRTYPE_A, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1303:
	{ window_add_bit(KNOT_RRTYPE_AAAA, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1319:
	{ window_add_bit(KNOT_RRTYPE_CAA, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1333:
	{ window_add_bit(KNOT_RRTYPE_CDNSKEY, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1341:
	{ window_add_bit(KNOT_RRTYPE_CDS, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1351:
	{ window_add_bit(KNOT_RRTYPE_CERT, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1362:
	{ window_add_bit(KNOT_RRTYPE_CNAME, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1373:
	{ window_add_bit(KNOT_RRTYPE_CSYNC, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1387:
	{ window_add_bit(KNOT_RRTYPE_DHCID, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1399:
	{ window_add_bit(KNOT_RRTYPE_DNAME, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1410:
	{ window_add_bit(KNOT_RRTYPE_DNSKEY, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1419:
	{ window_add_bit(KNOT_RRTYPE_DS, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1429:
	{ window_add_bit(KNOT_RRTYPE_DSYNC, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1442:
	{ window_add_bit(KNOT_RRTYPE_EUI48, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1451:
	{ window_add_bit(KNOT_RRTYPE_EUI64, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1464:
	{ window_add_bit(KNOT_RRTYPE_HINFO, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1475:
	{ window_add_bit(KNOT_RRTYPE_HTTPS, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1490:
	{ window_add_bit(KNOT_RRTYPE_IPSECKEY, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1501:
	{ window_add_bit(KNOT_RRTYPE_KEY, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1509:
	{ window_add_bit(KNOT_RRTYPE_KX, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1522:
	{ window_add_bit(KNOT_RRTYPE_L32, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1531:
	{ window_add_bit(KNOT_RRTYPE_L64, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1540:
	{ window_add_bit(KNOT_RRTYPE_LOC, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1548:
	{ window_add_bit(KNOT_RRTYPE_LP, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1561:
	{ window_add_bit(KNOT_RRTYPE_MINFO, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1569:
	{ window_add_bit(KNOT_RRTYPE_MX, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1583:
	{ window_add_bit(KNOT_RRTYPE_NAPTR, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1592:
	{ window_add_bit(KNOT_RRTYPE_NID, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1601:
	{ window_add_bit(KNOT_RRTYPE_NS, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1611:
	{ window_add_bit(KNOT_RRTYPE_NSEC, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1620:
	{ window_add_bit(KNOT_RRTYPE_NSEC3, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1632:
	{ window_add_bit(KNOT_RRTYPE_NSEC3PARAM, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1649:
	{ window_add_bit(KNOT_RRTYPE_OPENPGPKEY, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1659:
	{ window_add_bit(KNOT_RRTYPE_PTR, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1670:
	{ window_add_bit(KNOT_RRTYPE_RP, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1681:
	{ window_add_bit(KNOT_RRTYPE_RRSIG, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1689:
	{ window_add_bit(KNOT_RRTYPE_RT, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1707:
	{ window_add_bit(KNOT_RRTYPE_SMIMEA, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1716:
	{ window_add_bit(KNOT_RRTYPE_SOA, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1725:
	{ window_add_bit(KNOT_RRTYPE_SPF, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1734:
	{ window_add_bit(KNOT_RRTYPE_SRV, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1745:
	{ window_add_bit(KNOT_RRTYPE_SSHFP, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1755:
	{ window_add_bit(KNOT_RRTYPE_SVCB, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1768:
	{ window_add_bit(KNOT_RRTYPE_TLSA, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1777:
	{ window_add_bit(KNOT_RRTYPE_TXT, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1789:
	{
		if (s->number64 <= UINT16_MAX) {
			window_add_bit(s->number64, s);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1799:
	{ window_add_bit(KNOT_RRTYPE_URI, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1812:
	{ window_add_bit(KNOT_RRTYPE_WALLET, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1825:
	{ window_add_bit(KNOT_RRTYPE_ZONEMD, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1836:
	{ window_add_bit(KNOT_RRTYPE_AFSDB, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
tr1845:
	{ window_add_bit(KNOT_RRTYPE_APL, s); }
	{
		s->buffer_length = 0;
	}
	{
		for (uint16_t window = 0; window <= s->last_window; window++) {
			if ((s->windows[window]).length > 0) {
				if (rdata_tail + 2 + (s->windows[window]).length <= rdata_stop)
				{
					// Window number.
					*rdata_tail = (uint8_t)window;
					rdata_tail += 1;
					// Bitmap length.
					*rdata_tail = (s->windows[window]).length;
					rdata_tail += 1;
					// Copying bitmap.
					memcpy(rdata_tail,
					       (s->windows[window]).bitmap,
					       (s->windows[window]).length);
					rdata_tail += (s->windows[window]).length;
				} else {
					WARN(ZS_RDATA_OVERFLOW);
					p--; {goto st319;}
				}
			}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1665;
st1665:
	if ( ++p == pe )
		goto _test_eof1665;
case 1665:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr1305;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr1304;
	goto tr1248;
st398:
	if ( ++p == pe )
		goto _test_eof398;
case 398:
	switch( (*p) ) {
		case 78: goto st399;
		case 83: goto st404;
		case 110: goto st399;
		case 115: goto st404;
	}
	goto tr1248;
st399:
	if ( ++p == pe )
		goto _test_eof399;
case 399:
	switch( (*p) ) {
		case 83: goto st400;
		case 115: goto st400;
	}
	goto tr1248;
st400:
	if ( ++p == pe )
		goto _test_eof400;
case 400:
	switch( (*p) ) {
		case 75: goto st401;
		case 107: goto st401;
	}
	goto tr1248;
st401:
	if ( ++p == pe )
		goto _test_eof401;
case 401:
	switch( (*p) ) {
		case 69: goto st402;
		case 101: goto st402;
	}
	goto tr1248;
st402:
	if ( ++p == pe )
		goto _test_eof402;
case 402:
	switch( (*p) ) {
		case 89: goto st403;
		case 121: goto st403;
	}
	goto tr1248;
st403:
	if ( ++p == pe )
		goto _test_eof403;
case 403:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1326;
		case 32: goto tr1326;
		case 40: goto tr1327;
		case 41: goto tr1328;
		case 3082: goto tr1329;
		case 3131: goto tr1330;
		case 3338: goto tr1331;
		case 3387: goto tr1331;
		case 3594: goto tr1332;
		case 3643: goto tr1333;
	}
	goto tr1248;
st404:
	if ( ++p == pe )
		goto _test_eof404;
case 404:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1334;
		case 32: goto tr1334;
		case 40: goto tr1335;
		case 41: goto tr1336;
		case 3082: goto tr1337;
		case 3131: goto tr1338;
		case 3338: goto tr1339;
		case 3387: goto tr1339;
		case 3594: goto tr1340;
		case 3643: goto tr1341;
	}
	goto tr1248;
st405:
	if ( ++p == pe )
		goto _test_eof405;
case 405:
	switch( (*p) ) {
		case 82: goto st406;
		case 114: goto st406;
	}
	goto tr1248;
st406:
	if ( ++p == pe )
		goto _test_eof406;
case 406:
	switch( (*p) ) {
		case 84: goto st407;
		case 116: goto st407;
	}
	goto tr1248;
st407:
	if ( ++p == pe )
		goto _test_eof407;
case 407:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1344;
		case 32: goto tr1344;
		case 40: goto tr1345;
		case 41: goto tr1346;
		case 3082: goto tr1347;
		case 3131: goto tr1348;
		case 3338: goto tr1349;
		case 3387: goto tr1349;
		case 3594: goto tr1350;
		case 3643: goto tr1351;
	}
	goto tr1248;
st408:
	if ( ++p == pe )
		goto _test_eof408;
case 408:
	switch( (*p) ) {
		case 65: goto st409;
		case 97: goto st409;
	}
	goto tr1248;
st409:
	if ( ++p == pe )
		goto _test_eof409;
case 409:
	switch( (*p) ) {
		case 77: goto st410;
		case 109: goto st410;
	}
	goto tr1248;
st410:
	if ( ++p == pe )
		goto _test_eof410;
case 410:
	switch( (*p) ) {
		case 69: goto st411;
		case 101: goto st411;
	}
	goto tr1248;
st411:
	if ( ++p == pe )
		goto _test_eof411;
case 411:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1355;
		case 32: goto tr1355;
		case 40: goto tr1356;
		case 41: goto tr1357;
		case 3082: goto tr1358;
		case 3131: goto tr1359;
		case 3338: goto tr1360;
		case 3387: goto tr1360;
		case 3594: goto tr1361;
		case 3643: goto tr1362;
	}
	goto tr1248;
st412:
	if ( ++p == pe )
		goto _test_eof412;
case 412:
	switch( (*p) ) {
		case 89: goto st413;
		case 121: goto st413;
	}
	goto tr1248;
st413:
	if ( ++p == pe )
		goto _test_eof413;
case 413:
	switch( (*p) ) {
		case 78: goto st414;
		case 110: goto st414;
	}
	goto tr1248;
st414:
	if ( ++p == pe )
		goto _test_eof414;
case 414:
	switch( (*p) ) {
		case 67: goto st415;
		case 99: goto st415;
	}
	goto tr1248;
st415:
	if ( ++p == pe )
		goto _test_eof415;
case 415:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1366;
		case 32: goto tr1366;
		case 40: goto tr1367;
		case 41: goto tr1368;
		case 3082: goto tr1369;
		case 3131: goto tr1370;
		case 3338: goto tr1371;
		case 3387: goto tr1371;
		case 3594: goto tr1372;
		case 3643: goto tr1373;
	}
	goto tr1248;
st416:
	if ( ++p == pe )
		goto _test_eof416;
case 416:
	switch( (*p) ) {
		case 72: goto st417;
		case 78: goto st421;
		case 83: goto st429;
		case 104: goto st417;
		case 110: goto st421;
		case 115: goto st429;
	}
	goto tr1248;
st417:
	if ( ++p == pe )
		goto _test_eof417;
case 417:
	switch( (*p) ) {
		case 67: goto st418;
		case 99: goto st418;
	}
	goto tr1248;
st418:
	if ( ++p == pe )
		goto _test_eof418;
case 418:
	switch( (*p) ) {
		case 73: goto st419;
		case 105: goto st419;
	}
	goto tr1248;
st419:
	if ( ++p == pe )
		goto _test_eof419;
case 419:
	switch( (*p) ) {
		case 68: goto st420;
		case 100: goto st420;
	}
	goto tr1248;
st420:
	if ( ++p == pe )
		goto _test_eof420;
case 420:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1380;
		case 32: goto tr1380;
		case 40: goto tr1381;
		case 41: goto tr1382;
		case 3082: goto tr1383;
		case 3131: goto tr1384;
		case 3338: goto tr1385;
		case 3387: goto tr1385;
		case 3594: goto tr1386;
		case 3643: goto tr1387;
	}
	goto tr1248;
st421:
	if ( ++p == pe )
		goto _test_eof421;
case 421:
	switch( (*p) ) {
		case 65: goto st422;
		case 83: goto st425;
		case 97: goto st422;
		case 115: goto st425;
	}
	goto tr1248;
st422:
	if ( ++p == pe )
		goto _test_eof422;
case 422:
	switch( (*p) ) {
		case 77: goto st423;
		case 109: goto st423;
	}
	goto tr1248;
st423:
	if ( ++p == pe )
		goto _test_eof423;
case 423:
	switch( (*p) ) {
		case 69: goto st424;
		case 101: goto st424;
	}
	goto tr1248;
st424:
	if ( ++p == pe )
		goto _test_eof424;
case 424:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1392;
		case 32: goto tr1392;
		case 40: goto tr1393;
		case 41: goto tr1394;
		case 3082: goto tr1395;
		case 3131: goto tr1396;
		case 3338: goto tr1397;
		case 3387: goto tr1397;
		case 3594: goto tr1398;
		case 3643: goto tr1399;
	}
	goto tr1248;
st425:
	if ( ++p == pe )
		goto _test_eof425;
case 425:
	switch( (*p) ) {
		case 75: goto st426;
		case 107: goto st426;
	}
	goto tr1248;
st426:
	if ( ++p == pe )
		goto _test_eof426;
case 426:
	switch( (*p) ) {
		case 69: goto st427;
		case 101: goto st427;
	}
	goto tr1248;
st427:
	if ( ++p == pe )
		goto _test_eof427;
case 427:
	switch( (*p) ) {
		case 89: goto st428;
		case 121: goto st428;
	}
	goto tr1248;
st428:
	if ( ++p == pe )
		goto _test_eof428;
case 428:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1403;
		case 32: goto tr1403;
		case 40: goto tr1404;
		case 41: goto tr1405;
		case 3082: goto tr1406;
		case 3131: goto tr1407;
		case 3338: goto tr1408;
		case 3387: goto tr1408;
		case 3594: goto tr1409;
		case 3643: goto tr1410;
	}
	goto tr1248;
st429:
	if ( ++p == pe )
		goto _test_eof429;
case 429:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1411;
		case 32: goto tr1411;
		case 40: goto tr1412;
		case 41: goto tr1413;
		case 89: goto st430;
		case 121: goto st430;
		case 3082: goto tr1415;
		case 3131: goto tr1416;
		case 3338: goto tr1417;
		case 3387: goto tr1417;
		case 3594: goto tr1418;
		case 3643: goto tr1419;
	}
	goto tr1248;
st430:
	if ( ++p == pe )
		goto _test_eof430;
case 430:
	switch( (*p) ) {
		case 78: goto st431;
		case 110: goto st431;
	}
	goto tr1248;
st431:
	if ( ++p == pe )
		goto _test_eof431;
case 431:
	switch( (*p) ) {
		case 67: goto st432;
		case 99: goto st432;
	}
	goto tr1248;
st432:
	if ( ++p == pe )
		goto _test_eof432;
case 432:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1422;
		case 32: goto tr1422;
		case 40: goto tr1423;
		case 41: goto tr1424;
		case 3082: goto tr1425;
		case 3131: goto tr1426;
		case 3338: goto tr1427;
		case 3387: goto tr1427;
		case 3594: goto tr1428;
		case 3643: goto tr1429;
	}
	goto tr1248;
st433:
	if ( ++p == pe )
		goto _test_eof433;
case 433:
	switch( (*p) ) {
		case 85: goto st434;
		case 117: goto st434;
	}
	goto tr1248;
st434:
	if ( ++p == pe )
		goto _test_eof434;
case 434:
	switch( (*p) ) {
		case 73: goto st435;
		case 105: goto st435;
	}
	goto tr1248;
st435:
	if ( ++p == pe )
		goto _test_eof435;
case 435:
	switch( (*p) ) {
		case 52: goto st436;
		case 54: goto st438;
	}
	goto tr1248;
st436:
	if ( ++p == pe )
		goto _test_eof436;
case 436:
	if ( (*p) == 56 )
		goto st437;
	goto tr1248;
st437:
	if ( ++p == pe )
		goto _test_eof437;
case 437:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1435;
		case 32: goto tr1435;
		case 40: goto tr1436;
		case 41: goto tr1437;
		case 3082: goto tr1438;
		case 3131: goto tr1439;
		case 3338: goto tr1440;
		case 3387: goto tr1440;
		case 3594: goto tr1441;
		case 3643: goto tr1442;
	}
	goto tr1248;
st438:
	if ( ++p == pe )
		goto _test_eof438;
case 438:
	if ( (*p) == 52 )
		goto st439;
	goto tr1248;
st439:
	if ( ++p == pe )
		goto _test_eof439;
case 439:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1444;
		case 32: goto tr1444;
		case 40: goto tr1445;
		case 41: goto tr1446;
		case 3082: goto tr1447;
		case 3131: goto tr1448;
		case 3338: goto tr1449;
		case 3387: goto tr1449;
		case 3594: goto tr1450;
		case 3643: goto tr1451;
	}
	goto tr1248;
st440:
	if ( ++p == pe )
		goto _test_eof440;
case 440:
	switch( (*p) ) {
		case 73: goto st441;
		case 84: goto st445;
		case 105: goto st441;
		case 116: goto st445;
	}
	goto tr1248;
st441:
	if ( ++p == pe )
		goto _test_eof441;
case 441:
	switch( (*p) ) {
		case 78: goto st442;
		case 110: goto st442;
	}
	goto tr1248;
st442:
	if ( ++p == pe )
		goto _test_eof442;
case 442:
	switch( (*p) ) {
		case 70: goto st443;
		case 102: goto st443;
	}
	goto tr1248;
st443:
	if ( ++p == pe )
		goto _test_eof443;
case 443:
	switch( (*p) ) {
		case 79: goto st444;
		case 111: goto st444;
	}
	goto tr1248;
st444:
	if ( ++p == pe )
		goto _test_eof444;
case 444:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1457;
		case 32: goto tr1457;
		case 40: goto tr1458;
		case 41: goto tr1459;
		case 3082: goto tr1460;
		case 3131: goto tr1461;
		case 3338: goto tr1462;
		case 3387: goto tr1462;
		case 3594: goto tr1463;
		case 3643: goto tr1464;
	}
	goto tr1248;
st445:
	if ( ++p == pe )
		goto _test_eof445;
case 445:
	switch( (*p) ) {
		case 84: goto st446;
		case 116: goto st446;
	}
	goto tr1248;
st446:
	if ( ++p == pe )
		goto _test_eof446;
case 446:
	switch( (*p) ) {
		case 80: goto st447;
		case 112: goto st447;
	}
	goto tr1248;
st447:
	if ( ++p == pe )
		goto _test_eof447;
case 447:
	switch( (*p) ) {
		case 83: goto st448;
		case 115: goto st448;
	}
	goto tr1248;
st448:
	if ( ++p == pe )
		goto _test_eof448;
case 448:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1468;
		case 32: goto tr1468;
		case 40: goto tr1469;
		case 41: goto tr1470;
		case 3082: goto tr1471;
		case 3131: goto tr1472;
		case 3338: goto tr1473;
		case 3387: goto tr1473;
		case 3594: goto tr1474;
		case 3643: goto tr1475;
	}
	goto tr1248;
st449:
	if ( ++p == pe )
		goto _test_eof449;
case 449:
	switch( (*p) ) {
		case 80: goto st450;
		case 112: goto st450;
	}
	goto tr1248;
st450:
	if ( ++p == pe )
		goto _test_eof450;
case 450:
	switch( (*p) ) {
		case 83: goto st451;
		case 115: goto st451;
	}
	goto tr1248;
st451:
	if ( ++p == pe )
		goto _test_eof451;
case 451:
	switch( (*p) ) {
		case 69: goto st452;
		case 101: goto st452;
	}
	goto tr1248;
st452:
	if ( ++p == pe )
		goto _test_eof452;
case 452:
	switch( (*p) ) {
		case 67: goto st453;
		case 99: goto st453;
	}
	goto tr1248;
st453:
	if ( ++p == pe )
		goto _test_eof453;
case 453:
	switch( (*p) ) {
		case 75: goto st454;
		case 107: goto st454;
	}
	goto tr1248;
st454:
	if ( ++p == pe )
		goto _test_eof454;
case 454:
	switch( (*p) ) {
		case 69: goto st455;
		case 101: goto st455;
	}
	goto tr1248;
st455:
	if ( ++p == pe )
		goto _test_eof455;
case 455:
	switch( (*p) ) {
		case 89: goto st456;
		case 121: goto st456;
	}
	goto tr1248;
st456:
	if ( ++p == pe )
		goto _test_eof456;
case 456:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1483;
		case 32: goto tr1483;
		case 40: goto tr1484;
		case 41: goto tr1485;
		case 3082: goto tr1486;
		case 3131: goto tr1487;
		case 3338: goto tr1488;
		case 3387: goto tr1488;
		case 3594: goto tr1489;
		case 3643: goto tr1490;
	}
	goto tr1248;
st457:
	if ( ++p == pe )
		goto _test_eof457;
case 457:
	switch( (*p) ) {
		case 69: goto st458;
		case 88: goto st460;
		case 101: goto st458;
		case 120: goto st460;
	}
	goto tr1248;
st458:
	if ( ++p == pe )
		goto _test_eof458;
case 458:
	switch( (*p) ) {
		case 89: goto st459;
		case 121: goto st459;
	}
	goto tr1248;
st459:
	if ( ++p == pe )
		goto _test_eof459;
case 459:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1494;
		case 32: goto tr1494;
		case 40: goto tr1495;
		case 41: goto tr1496;
		case 3082: goto tr1497;
		case 3131: goto tr1498;
		case 3338: goto tr1499;
		case 3387: goto tr1499;
		case 3594: goto tr1500;
		case 3643: goto tr1501;
	}
	goto tr1248;
st460:
	if ( ++p == pe )
		goto _test_eof460;
case 460:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1502;
		case 32: goto tr1502;
		case 40: goto tr1503;
		case 41: goto tr1504;
		case 3082: goto tr1505;
		case 3131: goto tr1506;
		case 3338: goto tr1507;
		case 3387: goto tr1507;
		case 3594: goto tr1508;
		case 3643: goto tr1509;
	}
	goto tr1248;
st461:
	if ( ++p == pe )
		goto _test_eof461;
case 461:
	switch( (*p) ) {
		case 51: goto st462;
		case 54: goto st464;
		case 79: goto st466;
		case 80: goto st468;
		case 111: goto st466;
		case 112: goto st468;
	}
	goto tr1248;
st462:
	if ( ++p == pe )
		goto _test_eof462;
case 462:
	if ( (*p) == 50 )
		goto st463;
	goto tr1248;
st463:
	if ( ++p == pe )
		goto _test_eof463;
case 463:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1515;
		case 32: goto tr1515;
		case 40: goto tr1516;
		case 41: goto tr1517;
		case 3082: goto tr1518;
		case 3131: goto tr1519;
		case 3338: goto tr1520;
		case 3387: goto tr1520;
		case 3594: goto tr1521;
		case 3643: goto tr1522;
	}
	goto tr1248;
st464:
	if ( ++p == pe )
		goto _test_eof464;
case 464:
	if ( (*p) == 52 )
		goto st465;
	goto tr1248;
st465:
	if ( ++p == pe )
		goto _test_eof465;
case 465:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1524;
		case 32: goto tr1524;
		case 40: goto tr1525;
		case 41: goto tr1526;
		case 3082: goto tr1527;
		case 3131: goto tr1528;
		case 3338: goto tr1529;
		case 3387: goto tr1529;
		case 3594: goto tr1530;
		case 3643: goto tr1531;
	}
	goto tr1248;
st466:
	if ( ++p == pe )
		goto _test_eof466;
case 466:
	switch( (*p) ) {
		case 67: goto st467;
		case 99: goto st467;
	}
	goto tr1248;
st467:
	if ( ++p == pe )
		goto _test_eof467;
case 467:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1533;
		case 32: goto tr1533;
		case 40: goto tr1534;
		case 41: goto tr1535;
		case 3082: goto tr1536;
		case 3131: goto tr1537;
		case 3338: goto tr1538;
		case 3387: goto tr1538;
		case 3594: goto tr1539;
		case 3643: goto tr1540;
	}
	goto tr1248;
st468:
	if ( ++p == pe )
		goto _test_eof468;
case 468:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1541;
		case 32: goto tr1541;
		case 40: goto tr1542;
		case 41: goto tr1543;
		case 3082: goto tr1544;
		case 3131: goto tr1545;
		case 3338: goto tr1546;
		case 3387: goto tr1546;
		case 3594: goto tr1547;
		case 3643: goto tr1548;
	}
	goto tr1248;
st469:
	if ( ++p == pe )
		goto _test_eof469;
case 469:
	switch( (*p) ) {
		case 73: goto st470;
		case 88: goto st474;
		case 105: goto st470;
		case 120: goto st474;
	}
	goto tr1248;
st470:
	if ( ++p == pe )
		goto _test_eof470;
case 470:
	switch( (*p) ) {
		case 78: goto st471;
		case 110: goto st471;
	}
	goto tr1248;
st471:
	if ( ++p == pe )
		goto _test_eof471;
case 471:
	switch( (*p) ) {
		case 70: goto st472;
		case 102: goto st472;
	}
	goto tr1248;
st472:
	if ( ++p == pe )
		goto _test_eof472;
case 472:
	switch( (*p) ) {
		case 79: goto st473;
		case 111: goto st473;
	}
	goto tr1248;
st473:
	if ( ++p == pe )
		goto _test_eof473;
case 473:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1554;
		case 32: goto tr1554;
		case 40: goto tr1555;
		case 41: goto tr1556;
		case 3082: goto tr1557;
		case 3131: goto tr1558;
		case 3338: goto tr1559;
		case 3387: goto tr1559;
		case 3594: goto tr1560;
		case 3643: goto tr1561;
	}
	goto tr1248;
st474:
	if ( ++p == pe )
		goto _test_eof474;
case 474:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1562;
		case 32: goto tr1562;
		case 40: goto tr1563;
		case 41: goto tr1564;
		case 3082: goto tr1565;
		case 3131: goto tr1566;
		case 3338: goto tr1567;
		case 3387: goto tr1567;
		case 3594: goto tr1568;
		case 3643: goto tr1569;
	}
	goto tr1248;
st475:
	if ( ++p == pe )
		goto _test_eof475;
case 475:
	switch( (*p) ) {
		case 65: goto st476;
		case 73: goto st480;
		case 83: goto st482;
		case 97: goto st476;
		case 105: goto st480;
		case 115: goto st482;
	}
	goto tr1248;
st476:
	if ( ++p == pe )
		goto _test_eof476;
case 476:
	switch( (*p) ) {
		case 80: goto st477;
		case 112: goto st477;
	}
	goto tr1248;
st477:
	if ( ++p == pe )
		goto _test_eof477;
case 477:
	switch( (*p) ) {
		case 84: goto st478;
		case 116: goto st478;
	}
	goto tr1248;
st478:
	if ( ++p == pe )
		goto _test_eof478;
case 478:
	switch( (*p) ) {
		case 82: goto st479;
		case 114: goto st479;
	}
	goto tr1248;
st479:
	if ( ++p == pe )
		goto _test_eof479;
case 479:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1576;
		case 32: goto tr1576;
		case 40: goto tr1577;
		case 41: goto tr1578;
		case 3082: goto tr1579;
		case 3131: goto tr1580;
		case 3338: goto tr1581;
		case 3387: goto tr1581;
		case 3594: goto tr1582;
		case 3643: goto tr1583;
	}
	goto tr1248;
st480:
	if ( ++p == pe )
		goto _test_eof480;
case 480:
	switch( (*p) ) {
		case 68: goto st481;
		case 100: goto st481;
	}
	goto tr1248;
st481:
	if ( ++p == pe )
		goto _test_eof481;
case 481:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1585;
		case 32: goto tr1585;
		case 40: goto tr1586;
		case 41: goto tr1587;
		case 3082: goto tr1588;
		case 3131: goto tr1589;
		case 3338: goto tr1590;
		case 3387: goto tr1590;
		case 3594: goto tr1591;
		case 3643: goto tr1592;
	}
	goto tr1248;
st482:
	if ( ++p == pe )
		goto _test_eof482;
case 482:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1593;
		case 32: goto tr1593;
		case 40: goto tr1594;
		case 41: goto tr1595;
		case 69: goto st483;
		case 101: goto st483;
		case 3082: goto tr1597;
		case 3131: goto tr1598;
		case 3338: goto tr1599;
		case 3387: goto tr1599;
		case 3594: goto tr1600;
		case 3643: goto tr1601;
	}
	goto tr1248;
st483:
	if ( ++p == pe )
		goto _test_eof483;
case 483:
	switch( (*p) ) {
		case 67: goto st484;
		case 99: goto st484;
	}
	goto tr1248;
st484:
	if ( ++p == pe )
		goto _test_eof484;
case 484:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1603;
		case 32: goto tr1603;
		case 40: goto tr1604;
		case 41: goto tr1605;
		case 51: goto st485;
		case 3082: goto tr1607;
		case 3131: goto tr1608;
		case 3338: goto tr1609;
		case 3387: goto tr1609;
		case 3594: goto tr1610;
		case 3643: goto tr1611;
	}
	goto tr1248;
st485:
	if ( ++p == pe )
		goto _test_eof485;
case 485:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1612;
		case 32: goto tr1612;
		case 40: goto tr1613;
		case 41: goto tr1614;
		case 80: goto st486;
		case 112: goto st486;
		case 3082: goto tr1616;
		case 3131: goto tr1617;
		case 3338: goto tr1618;
		case 3387: goto tr1618;
		case 3594: goto tr1619;
		case 3643: goto tr1620;
	}
	goto tr1248;
st486:
	if ( ++p == pe )
		goto _test_eof486;
case 486:
	switch( (*p) ) {
		case 65: goto st487;
		case 97: goto st487;
	}
	goto tr1248;
st487:
	if ( ++p == pe )
		goto _test_eof487;
case 487:
	switch( (*p) ) {
		case 82: goto st488;
		case 114: goto st488;
	}
	goto tr1248;
st488:
	if ( ++p == pe )
		goto _test_eof488;
case 488:
	switch( (*p) ) {
		case 65: goto st489;
		case 97: goto st489;
	}
	goto tr1248;
st489:
	if ( ++p == pe )
		goto _test_eof489;
case 489:
	switch( (*p) ) {
		case 77: goto st490;
		case 109: goto st490;
	}
	goto tr1248;
st490:
	if ( ++p == pe )
		goto _test_eof490;
case 490:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1625;
		case 32: goto tr1625;
		case 40: goto tr1626;
		case 41: goto tr1627;
		case 3082: goto tr1628;
		case 3131: goto tr1629;
		case 3338: goto tr1630;
		case 3387: goto tr1630;
		case 3594: goto tr1631;
		case 3643: goto tr1632;
	}
	goto tr1248;
st491:
	if ( ++p == pe )
		goto _test_eof491;
case 491:
	switch( (*p) ) {
		case 80: goto st492;
		case 112: goto st492;
	}
	goto tr1248;
st492:
	if ( ++p == pe )
		goto _test_eof492;
case 492:
	switch( (*p) ) {
		case 69: goto st493;
		case 101: goto st493;
	}
	goto tr1248;
st493:
	if ( ++p == pe )
		goto _test_eof493;
case 493:
	switch( (*p) ) {
		case 78: goto st494;
		case 110: goto st494;
	}
	goto tr1248;
st494:
	if ( ++p == pe )
		goto _test_eof494;
case 494:
	switch( (*p) ) {
		case 80: goto st495;
		case 112: goto st495;
	}
	goto tr1248;
st495:
	if ( ++p == pe )
		goto _test_eof495;
case 495:
	switch( (*p) ) {
		case 71: goto st496;
		case 103: goto st496;
	}
	goto tr1248;
st496:
	if ( ++p == pe )
		goto _test_eof496;
case 496:
	switch( (*p) ) {
		case 80: goto st497;
		case 112: goto st497;
	}
	goto tr1248;
st497:
	if ( ++p == pe )
		goto _test_eof497;
case 497:
	switch( (*p) ) {
		case 75: goto st498;
		case 107: goto st498;
	}
	goto tr1248;
st498:
	if ( ++p == pe )
		goto _test_eof498;
case 498:
	switch( (*p) ) {
		case 69: goto st499;
		case 101: goto st499;
	}
	goto tr1248;
st499:
	if ( ++p == pe )
		goto _test_eof499;
case 499:
	switch( (*p) ) {
		case 89: goto st500;
		case 121: goto st500;
	}
	goto tr1248;
st500:
	if ( ++p == pe )
		goto _test_eof500;
case 500:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1642;
		case 32: goto tr1642;
		case 40: goto tr1643;
		case 41: goto tr1644;
		case 3082: goto tr1645;
		case 3131: goto tr1646;
		case 3338: goto tr1647;
		case 3387: goto tr1647;
		case 3594: goto tr1648;
		case 3643: goto tr1649;
	}
	goto tr1248;
st501:
	if ( ++p == pe )
		goto _test_eof501;
case 501:
	switch( (*p) ) {
		case 84: goto st502;
		case 116: goto st502;
	}
	goto tr1248;
st502:
	if ( ++p == pe )
		goto _test_eof502;
case 502:
	switch( (*p) ) {
		case 82: goto st503;
		case 114: goto st503;
	}
	goto tr1248;
st503:
	if ( ++p == pe )
		goto _test_eof503;
case 503:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1652;
		case 32: goto tr1652;
		case 40: goto tr1653;
		case 41: goto tr1654;
		case 3082: goto tr1655;
		case 3131: goto tr1656;
		case 3338: goto tr1657;
		case 3387: goto tr1657;
		case 3594: goto tr1658;
		case 3643: goto tr1659;
	}
	goto tr1248;
st504:
	if ( ++p == pe )
		goto _test_eof504;
case 504:
	switch( (*p) ) {
		case 80: goto st505;
		case 82: goto st506;
		case 84: goto st510;
		case 112: goto st505;
		case 114: goto st506;
		case 116: goto st510;
	}
	goto tr1248;
st505:
	if ( ++p == pe )
		goto _test_eof505;
case 505:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1663;
		case 32: goto tr1663;
		case 40: goto tr1664;
		case 41: goto tr1665;
		case 3082: goto tr1666;
		case 3131: goto tr1667;
		case 3338: goto tr1668;
		case 3387: goto tr1668;
		case 3594: goto tr1669;
		case 3643: goto tr1670;
	}
	goto tr1248;
st506:
	if ( ++p == pe )
		goto _test_eof506;
case 506:
	switch( (*p) ) {
		case 83: goto st507;
		case 115: goto st507;
	}
	goto tr1248;
st507:
	if ( ++p == pe )
		goto _test_eof507;
case 507:
	switch( (*p) ) {
		case 73: goto st508;
		case 105: goto st508;
	}
	goto tr1248;
st508:
	if ( ++p == pe )
		goto _test_eof508;
case 508:
	switch( (*p) ) {
		case 71: goto st509;
		case 103: goto st509;
	}
	goto tr1248;
st509:
	if ( ++p == pe )
		goto _test_eof509;
case 509:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1674;
		case 32: goto tr1674;
		case 40: goto tr1675;
		case 41: goto tr1676;
		case 3082: goto tr1677;
		case 3131: goto tr1678;
		case 3338: goto tr1679;
		case 3387: goto tr1679;
		case 3594: goto tr1680;
		case 3643: goto tr1681;
	}
	goto tr1248;
st510:
	if ( ++p == pe )
		goto _test_eof510;
case 510:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1682;
		case 32: goto tr1682;
		case 40: goto tr1683;
		case 41: goto tr1684;
		case 3082: goto tr1685;
		case 3131: goto tr1686;
		case 3338: goto tr1687;
		case 3387: goto tr1687;
		case 3594: goto tr1688;
		case 3643: goto tr1689;
	}
	goto tr1248;
st511:
	if ( ++p == pe )
		goto _test_eof511;
case 511:
	switch( (*p) ) {
		case 77: goto st512;
		case 79: goto st517;
		case 80: goto st519;
		case 82: goto st521;
		case 83: goto st523;
		case 86: goto st527;
		case 109: goto st512;
		case 111: goto st517;
		case 112: goto st519;
		case 114: goto st521;
		case 115: goto st523;
		case 118: goto st527;
	}
	goto tr1248;
st512:
	if ( ++p == pe )
		goto _test_eof512;
case 512:
	switch( (*p) ) {
		case 73: goto st513;
		case 105: goto st513;
	}
	goto tr1248;
st513:
	if ( ++p == pe )
		goto _test_eof513;
case 513:
	switch( (*p) ) {
		case 77: goto st514;
		case 109: goto st514;
	}
	goto tr1248;
st514:
	if ( ++p == pe )
		goto _test_eof514;
case 514:
	switch( (*p) ) {
		case 69: goto st515;
		case 101: goto st515;
	}
	goto tr1248;
st515:
	if ( ++p == pe )
		goto _test_eof515;
case 515:
	switch( (*p) ) {
		case 65: goto st516;
		case 97: goto st516;
	}
	goto tr1248;
st516:
	if ( ++p == pe )
		goto _test_eof516;
case 516:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1700;
		case 32: goto tr1700;
		case 40: goto tr1701;
		case 41: goto tr1702;
		case 3082: goto tr1703;
		case 3131: goto tr1704;
		case 3338: goto tr1705;
		case 3387: goto tr1705;
		case 3594: goto tr1706;
		case 3643: goto tr1707;
	}
	goto tr1248;
st517:
	if ( ++p == pe )
		goto _test_eof517;
case 517:
	switch( (*p) ) {
		case 65: goto st518;
		case 97: goto st518;
	}
	goto tr1248;
st518:
	if ( ++p == pe )
		goto _test_eof518;
case 518:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1709;
		case 32: goto tr1709;
		case 40: goto tr1710;
		case 41: goto tr1711;
		case 3082: goto tr1712;
		case 3131: goto tr1713;
		case 3338: goto tr1714;
		case 3387: goto tr1714;
		case 3594: goto tr1715;
		case 3643: goto tr1716;
	}
	goto tr1248;
st519:
	if ( ++p == pe )
		goto _test_eof519;
case 519:
	switch( (*p) ) {
		case 70: goto st520;
		case 102: goto st520;
	}
	goto tr1248;
st520:
	if ( ++p == pe )
		goto _test_eof520;
case 520:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1718;
		case 32: goto tr1718;
		case 40: goto tr1719;
		case 41: goto tr1720;
		case 3082: goto tr1721;
		case 3131: goto tr1722;
		case 3338: goto tr1723;
		case 3387: goto tr1723;
		case 3594: goto tr1724;
		case 3643: goto tr1725;
	}
	goto tr1248;
st521:
	if ( ++p == pe )
		goto _test_eof521;
case 521:
	switch( (*p) ) {
		case 86: goto st522;
		case 118: goto st522;
	}
	goto tr1248;
st522:
	if ( ++p == pe )
		goto _test_eof522;
case 522:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1727;
		case 32: goto tr1727;
		case 40: goto tr1728;
		case 41: goto tr1729;
		case 3082: goto tr1730;
		case 3131: goto tr1731;
		case 3338: goto tr1732;
		case 3387: goto tr1732;
		case 3594: goto tr1733;
		case 3643: goto tr1734;
	}
	goto tr1248;
st523:
	if ( ++p == pe )
		goto _test_eof523;
case 523:
	switch( (*p) ) {
		case 72: goto st524;
		case 104: goto st524;
	}
	goto tr1248;
st524:
	if ( ++p == pe )
		goto _test_eof524;
case 524:
	switch( (*p) ) {
		case 70: goto st525;
		case 102: goto st525;
	}
	goto tr1248;
st525:
	if ( ++p == pe )
		goto _test_eof525;
case 525:
	switch( (*p) ) {
		case 80: goto st526;
		case 112: goto st526;
	}
	goto tr1248;
st526:
	if ( ++p == pe )
		goto _test_eof526;
case 526:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1738;
		case 32: goto tr1738;
		case 40: goto tr1739;
		case 41: goto tr1740;
		case 3082: goto tr1741;
		case 3131: goto tr1742;
		case 3338: goto tr1743;
		case 3387: goto tr1743;
		case 3594: goto tr1744;
		case 3643: goto tr1745;
	}
	goto tr1248;
st527:
	if ( ++p == pe )
		goto _test_eof527;
case 527:
	switch( (*p) ) {
		case 67: goto st528;
		case 99: goto st528;
	}
	goto tr1248;
st528:
	if ( ++p == pe )
		goto _test_eof528;
case 528:
	switch( (*p) ) {
		case 66: goto st529;
		case 98: goto st529;
	}
	goto tr1248;
st529:
	if ( ++p == pe )
		goto _test_eof529;
case 529:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1748;
		case 32: goto tr1748;
		case 40: goto tr1749;
		case 41: goto tr1750;
		case 3082: goto tr1751;
		case 3131: goto tr1752;
		case 3338: goto tr1753;
		case 3387: goto tr1753;
		case 3594: goto tr1754;
		case 3643: goto tr1755;
	}
	goto tr1248;
st530:
	if ( ++p == pe )
		goto _test_eof530;
case 530:
	switch( (*p) ) {
		case 76: goto st531;
		case 88: goto st534;
		case 89: goto st536;
		case 108: goto st531;
		case 120: goto st534;
		case 121: goto st536;
	}
	goto tr1248;
st531:
	if ( ++p == pe )
		goto _test_eof531;
case 531:
	switch( (*p) ) {
		case 83: goto st532;
		case 115: goto st532;
	}
	goto tr1248;
st532:
	if ( ++p == pe )
		goto _test_eof532;
case 532:
	switch( (*p) ) {
		case 65: goto st533;
		case 97: goto st533;
	}
	goto tr1248;
st533:
	if ( ++p == pe )
		goto _test_eof533;
case 533:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1761;
		case 32: goto tr1761;
		case 40: goto tr1762;
		case 41: goto tr1763;
		case 3082: goto tr1764;
		case 3131: goto tr1765;
		case 3338: goto tr1766;
		case 3387: goto tr1766;
		case 3594: goto tr1767;
		case 3643: goto tr1768;
	}
	goto tr1248;
st534:
	if ( ++p == pe )
		goto _test_eof534;
case 534:
	switch( (*p) ) {
		case 84: goto st535;
		case 116: goto st535;
	}
	goto tr1248;
st535:
	if ( ++p == pe )
		goto _test_eof535;
case 535:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1770;
		case 32: goto tr1770;
		case 40: goto tr1771;
		case 41: goto tr1772;
		case 3082: goto tr1773;
		case 3131: goto tr1774;
		case 3338: goto tr1775;
		case 3387: goto tr1775;
		case 3594: goto tr1776;
		case 3643: goto tr1777;
	}
	goto tr1248;
st536:
	if ( ++p == pe )
		goto _test_eof536;
case 536:
	switch( (*p) ) {
		case 80: goto st537;
		case 112: goto st537;
	}
	goto tr1248;
st537:
	if ( ++p == pe )
		goto _test_eof537;
case 537:
	switch( (*p) ) {
		case 69: goto st538;
		case 101: goto st538;
	}
	goto tr1248;
st538:
	if ( ++p == pe )
		goto _test_eof538;
case 538:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr1780;
	goto tr1248;
tr1780:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st539;
tr1784:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st539;
st539:
	if ( ++p == pe )
		goto _test_eof539;
case 539:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1781;
		case 32: goto tr1781;
		case 40: goto tr1782;
		case 41: goto tr1783;
		case 3082: goto tr1785;
		case 3131: goto tr1786;
		case 3338: goto tr1787;
		case 3387: goto tr1787;
		case 3594: goto tr1788;
		case 3643: goto tr1789;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1784;
	goto tr1248;
st540:
	if ( ++p == pe )
		goto _test_eof540;
case 540:
	switch( (*p) ) {
		case 82: goto st541;
		case 114: goto st541;
	}
	goto tr1248;
st541:
	if ( ++p == pe )
		goto _test_eof541;
case 541:
	switch( (*p) ) {
		case 73: goto st542;
		case 105: goto st542;
	}
	goto tr1248;
st542:
	if ( ++p == pe )
		goto _test_eof542;
case 542:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1792;
		case 32: goto tr1792;
		case 40: goto tr1793;
		case 41: goto tr1794;
		case 3082: goto tr1795;
		case 3131: goto tr1796;
		case 3338: goto tr1797;
		case 3387: goto tr1797;
		case 3594: goto tr1798;
		case 3643: goto tr1799;
	}
	goto tr1248;
st543:
	if ( ++p == pe )
		goto _test_eof543;
case 543:
	switch( (*p) ) {
		case 65: goto st544;
		case 97: goto st544;
	}
	goto tr1248;
st544:
	if ( ++p == pe )
		goto _test_eof544;
case 544:
	switch( (*p) ) {
		case 76: goto st545;
		case 108: goto st545;
	}
	goto tr1248;
st545:
	if ( ++p == pe )
		goto _test_eof545;
case 545:
	switch( (*p) ) {
		case 76: goto st546;
		case 108: goto st546;
	}
	goto tr1248;
st546:
	if ( ++p == pe )
		goto _test_eof546;
case 546:
	switch( (*p) ) {
		case 69: goto st547;
		case 101: goto st547;
	}
	goto tr1248;
st547:
	if ( ++p == pe )
		goto _test_eof547;
case 547:
	switch( (*p) ) {
		case 84: goto st548;
		case 116: goto st548;
	}
	goto tr1248;
st548:
	if ( ++p == pe )
		goto _test_eof548;
case 548:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1805;
		case 32: goto tr1805;
		case 40: goto tr1806;
		case 41: goto tr1807;
		case 3082: goto tr1808;
		case 3131: goto tr1809;
		case 3338: goto tr1810;
		case 3387: goto tr1810;
		case 3594: goto tr1811;
		case 3643: goto tr1812;
	}
	goto tr1248;
st549:
	if ( ++p == pe )
		goto _test_eof549;
case 549:
	switch( (*p) ) {
		case 79: goto st550;
		case 111: goto st550;
	}
	goto tr1248;
st550:
	if ( ++p == pe )
		goto _test_eof550;
case 550:
	switch( (*p) ) {
		case 78: goto st551;
		case 110: goto st551;
	}
	goto tr1248;
st551:
	if ( ++p == pe )
		goto _test_eof551;
case 551:
	switch( (*p) ) {
		case 69: goto st552;
		case 101: goto st552;
	}
	goto tr1248;
st552:
	if ( ++p == pe )
		goto _test_eof552;
case 552:
	switch( (*p) ) {
		case 77: goto st553;
		case 109: goto st553;
	}
	goto tr1248;
st553:
	if ( ++p == pe )
		goto _test_eof553;
case 553:
	switch( (*p) ) {
		case 68: goto st554;
		case 100: goto st554;
	}
	goto tr1248;
st554:
	if ( ++p == pe )
		goto _test_eof554;
case 554:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1818;
		case 32: goto tr1818;
		case 40: goto tr1819;
		case 41: goto tr1820;
		case 3082: goto tr1821;
		case 3131: goto tr1822;
		case 3338: goto tr1823;
		case 3387: goto tr1823;
		case 3594: goto tr1824;
		case 3643: goto tr1825;
	}
	goto tr1248;
st555:
	if ( ++p == pe )
		goto _test_eof555;
case 555:
	switch( (*p) ) {
		case 83: goto st556;
		case 115: goto st556;
	}
	goto tr1248;
st556:
	if ( ++p == pe )
		goto _test_eof556;
case 556:
	switch( (*p) ) {
		case 68: goto st557;
		case 100: goto st557;
	}
	goto tr1248;
st557:
	if ( ++p == pe )
		goto _test_eof557;
case 557:
	switch( (*p) ) {
		case 66: goto st558;
		case 98: goto st558;
	}
	goto tr1248;
st558:
	if ( ++p == pe )
		goto _test_eof558;
case 558:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1829;
		case 32: goto tr1829;
		case 40: goto tr1830;
		case 41: goto tr1831;
		case 3082: goto tr1832;
		case 3131: goto tr1833;
		case 3338: goto tr1834;
		case 3387: goto tr1834;
		case 3594: goto tr1835;
		case 3643: goto tr1836;
	}
	goto tr1248;
st559:
	if ( ++p == pe )
		goto _test_eof559;
case 559:
	switch( (*p) ) {
		case 76: goto st560;
		case 108: goto st560;
	}
	goto tr1248;
st560:
	if ( ++p == pe )
		goto _test_eof560;
case 560:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1838;
		case 32: goto tr1838;
		case 40: goto tr1839;
		case 41: goto tr1840;
		case 3082: goto tr1841;
		case 3131: goto tr1842;
		case 3338: goto tr1843;
		case 3387: goto tr1843;
		case 3594: goto tr1844;
		case 3643: goto tr1845;
	}
	goto tr1248;
st561:
	if ( ++p == pe )
		goto _test_eof561;
case 561:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st562;
		case 32: goto st562;
		case 40: goto tr1848;
		case 41: goto tr1849;
		case 2058: goto tr1850;
		case 2107: goto tr1851;
	}
	goto tr1846;
tr1848:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st562;
tr1849:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st562;
tr1850:
	{
		s->line_counter++;
	}
	goto st562;
tr1881:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 562; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st562;
st562:
	if ( ++p == pe )
		goto _test_eof562;
case 562:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st562;
		case 32: goto st562;
		case 40: goto tr1848;
		case 41: goto tr1849;
		case 2058: goto tr1850;
		case 2107: goto tr1851;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1853;
	goto tr1852;
tr1853:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st563;
tr1857:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st563;
st563:
	if ( ++p == pe )
		goto _test_eof563;
case 563:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1854;
		case 32: goto tr1854;
		case 40: goto tr1855;
		case 41: goto tr1856;
		case 2058: goto tr1858;
		case 2107: goto tr1859;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1857;
	goto tr1852;
tr1862:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st564;
tr1863:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st564;
tr1865:
	{
		s->line_counter++;
	}
	goto st564;
tr1879:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 564; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st564;
tr1854:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_data_length = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st564;
tr1855:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_data_length = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st564;
tr1856:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_data_length = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st564;
tr1858:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_data_length = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st564;
st564:
	if ( ++p == pe )
		goto _test_eof564;
case 564:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st564;
		case 32: goto st564;
		case 40: goto tr1862;
		case 41: goto tr1863;
		case 2058: goto tr1865;
		case 2107: goto tr1866;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr1864;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr1864;
	} else
		goto tr1864;
	goto tr1860;
tr1864:
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st565;
st565:
	if ( ++p == pe )
		goto _test_eof565;
case 565:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr1867;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr1867;
	} else
		goto tr1867;
	goto tr1860;
tr1869:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st566;
tr1870:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st566;
tr1871:
	{
		s->line_counter++;
	}
	goto st566;
tr1877:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 566; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st566;
tr1867:
	{
		*rdata_tail += second_hex_to_num[(uint8_t)(*p)];
		rdata_tail++;
	}
	goto st566;
st566:
	if ( ++p == pe )
		goto _test_eof566;
case 566:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st566;
		case 32: goto st566;
		case 40: goto tr1869;
		case 41: goto tr1870;
		case 3082: goto tr1871;
		case 3131: goto tr1872;
		case 3338: goto tr1873;
		case 3387: goto tr1873;
		case 3594: goto tr1874;
		case 3643: goto tr1875;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr1864;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr1864;
	} else
		goto tr1864;
	goto tr1860;
tr1872:
	{
		s->buffer_length = 0;
	}
	goto st567;
tr1876:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st567;
st567:
	if ( ++p == pe )
		goto _test_eof567;
case 567:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr1877;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr1876;
	goto tr1860;
tr1873:
	{
		if ((rdata_tail - s->r_data) != s->r_data_length) {
			WARN(ZS_BAD_RDATA_LENGTH);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1666;
st1666:
	if ( ++p == pe )
		goto _test_eof1666;
case 1666:
	goto st0;
tr1874:
	{
		s->line_counter++;
	}
	{
		if ((rdata_tail - s->r_data) != s->r_data_length) {
			WARN(ZS_BAD_RDATA_LENGTH);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1667;
st1667:
	if ( ++p == pe )
		goto _test_eof1667;
case 1667:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st566;
		case 32: goto st566;
		case 40: goto tr1869;
		case 41: goto tr1870;
		case 3082: goto tr1871;
		case 3131: goto tr1872;
		case 3338: goto tr1873;
		case 3387: goto tr1873;
		case 3594: goto tr1874;
		case 3643: goto tr1875;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr1864;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr1864;
	} else
		goto tr1864;
	goto tr1860;
tr1875:
	{
		s->buffer_length = 0;
	}
	{
		if ((rdata_tail - s->r_data) != s->r_data_length) {
			WARN(ZS_BAD_RDATA_LENGTH);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1668;
st1668:
	if ( ++p == pe )
		goto _test_eof1668;
case 1668:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr1877;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr1876;
	goto tr1860;
tr1866:
	{
		s->buffer_length = 0;
	}
	goto st568;
tr1878:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st568;
tr1859:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_data_length = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st568;
st568:
	if ( ++p == pe )
		goto _test_eof568;
case 568:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr1879;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr1878;
	goto tr1846;
tr1851:
	{
		s->buffer_length = 0;
	}
	goto st569;
tr1880:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st569;
st569:
	if ( ++p == pe )
		goto _test_eof569;
case 569:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr1881;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr1880;
	goto tr1846;
st570:
	if ( ++p == pe )
		goto _test_eof570;
case 570:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st571;
		case 32: goto st571;
		case 40: goto tr1883;
		case 41: goto tr1884;
		case 2058: goto tr1885;
		case 2107: goto tr1886;
	}
	goto tr1846;
tr1883:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st571;
tr1884:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st571;
tr1885:
	{
		s->line_counter++;
	}
	goto st571;
tr1921:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 571; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st571;
st571:
	if ( ++p == pe )
		goto _test_eof571;
case 571:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st571;
		case 32: goto st571;
		case 40: goto tr1883;
		case 41: goto tr1884;
		case 48: goto tr1887;
		case 2058: goto tr1885;
		case 2107: goto tr1886;
	}
	if ( 49 <= _widec && _widec <= 57 )
		goto tr1888;
	goto tr1852;
tr1887:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st572;
st572:
	if ( ++p == pe )
		goto _test_eof572;
case 572:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1889;
		case 32: goto tr1889;
		case 40: goto tr1890;
		case 41: goto tr1891;
		case 1802: goto tr1893;
		case 1851: goto tr1893;
		case 2058: goto tr1894;
		case 2107: goto tr1895;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1892;
	goto tr1852;
tr1889:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_data_length = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1669;
tr1890:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_data_length = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1669;
tr1891:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_data_length = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1669;
tr1894:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_data_length = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1669;
st1669:
	if ( ++p == pe )
		goto _test_eof1669;
case 1669:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st573;
		case 32: goto st573;
		case 40: goto tr1897;
		case 41: goto tr1898;
		case 2058: goto tr1900;
		case 2107: goto tr1901;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr1899;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr1899;
	} else
		goto tr1899;
	goto tr1860;
tr1897:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st573;
tr1898:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st573;
tr1900:
	{
		s->line_counter++;
	}
	goto st573;
tr1914:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 573; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st573;
tr1915:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_data_length = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st573;
tr1916:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_data_length = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st573;
tr1917:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_data_length = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st573;
tr1918:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_data_length = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st573;
st573:
	if ( ++p == pe )
		goto _test_eof573;
case 573:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st573;
		case 32: goto st573;
		case 40: goto tr1897;
		case 41: goto tr1898;
		case 2058: goto tr1900;
		case 2107: goto tr1901;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr1899;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr1899;
	} else
		goto tr1899;
	goto tr1860;
tr1899:
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st574;
st574:
	if ( ++p == pe )
		goto _test_eof574;
case 574:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr1902;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr1902;
	} else
		goto tr1902;
	goto tr1860;
tr1904:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st575;
tr1905:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st575;
tr1906:
	{
		s->line_counter++;
	}
	goto st575;
tr1912:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 575; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st575;
tr1902:
	{
		*rdata_tail += second_hex_to_num[(uint8_t)(*p)];
		rdata_tail++;
	}
	goto st575;
st575:
	if ( ++p == pe )
		goto _test_eof575;
case 575:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st575;
		case 32: goto st575;
		case 40: goto tr1904;
		case 41: goto tr1905;
		case 3082: goto tr1906;
		case 3131: goto tr1907;
		case 3338: goto tr1908;
		case 3387: goto tr1908;
		case 3594: goto tr1909;
		case 3643: goto tr1910;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr1899;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr1899;
	} else
		goto tr1899;
	goto tr1860;
tr1907:
	{
		s->buffer_length = 0;
	}
	goto st576;
tr1911:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st576;
st576:
	if ( ++p == pe )
		goto _test_eof576;
case 576:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr1912;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr1911;
	goto tr1860;
tr1893:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1670;
tr1908:
	{
		if ((rdata_tail - s->r_data) != s->r_data_length) {
			WARN(ZS_BAD_RDATA_LENGTH);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1670;
st1670:
	if ( ++p == pe )
		goto _test_eof1670;
case 1670:
	goto tr1846;
tr1909:
	{
		s->line_counter++;
	}
	{
		if ((rdata_tail - s->r_data) != s->r_data_length) {
			WARN(ZS_BAD_RDATA_LENGTH);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1671;
st1671:
	if ( ++p == pe )
		goto _test_eof1671;
case 1671:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st575;
		case 32: goto st575;
		case 40: goto tr1904;
		case 41: goto tr1905;
		case 3082: goto tr1906;
		case 3131: goto tr1907;
		case 3338: goto tr1908;
		case 3387: goto tr1908;
		case 3594: goto tr1909;
		case 3643: goto tr1910;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr1899;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr1899;
	} else
		goto tr1899;
	goto tr1860;
tr1910:
	{
		s->buffer_length = 0;
	}
	{
		if ((rdata_tail - s->r_data) != s->r_data_length) {
			WARN(ZS_BAD_RDATA_LENGTH);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1672;
st1672:
	if ( ++p == pe )
		goto _test_eof1672;
case 1672:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr1912;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr1911;
	goto tr1860;
tr1901:
	{
		s->buffer_length = 0;
	}
	goto st577;
tr1913:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st577;
tr1919:
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_data_length = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st577;
st577:
	if ( ++p == pe )
		goto _test_eof577;
case 577:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr1914;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr1913;
	goto tr1846;
tr1888:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st578;
tr1892:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st578;
st578:
	if ( ++p == pe )
		goto _test_eof578;
case 578:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr1915;
		case 32: goto tr1915;
		case 40: goto tr1916;
		case 41: goto tr1917;
		case 2058: goto tr1918;
		case 2107: goto tr1919;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr1892;
	goto tr1852;
tr1895:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	{
		if (s->number64 <= UINT16_MAX) {
			s->r_data_length = (uint16_t)(s->number64);
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1673;
st1673:
	if ( ++p == pe )
		goto _test_eof1673;
case 1673:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr1914;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr1913;
	goto tr1846;
tr1886:
	{
		s->buffer_length = 0;
	}
	goto st579;
tr1920:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st579;
st579:
	if ( ++p == pe )
		goto _test_eof579;
case 579:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr1921;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr1920;
	goto tr1846;
st580:
	if ( ++p == pe )
		goto _test_eof580;
case 580:
	switch( (*p) ) {
		case 97: goto tr1923;
		case 100: goto tr1924;
		case 101: goto tr1925;
		case 105: goto tr1926;
		case 107: goto tr1927;
		case 110: goto tr1928;
		case 111: goto tr1929;
		case 112: goto tr1930;
	}
	goto tr1922;
tr1923:
	{
		if (rdata_tail + 2 > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st581;
st581:
	if ( ++p == pe )
		goto _test_eof581;
case 581:
	if ( (*p) == 108 )
		goto st582;
	goto tr1922;
st582:
	if ( ++p == pe )
		goto _test_eof582;
case 582:
	if ( (*p) == 112 )
		goto st583;
	goto tr1922;
st583:
	if ( ++p == pe )
		goto _test_eof583;
case 583:
	if ( (*p) == 110 )
		goto st584;
	goto tr1922;
st584:
	if ( ++p == pe )
		goto _test_eof584;
case 584:
	switch( (*p) ) {
		case 32: goto tr1934;
		case 34: goto tr1934;
		case 44: goto tr1934;
		case 59: goto tr1934;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1934;
	} else if ( (*p) >= 9 )
		goto tr1934;
	goto tr1922;
tr1934:
	{
		uint16_t val = htons(1);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1674;
tr1941:
	{
		uint16_t val = htons(7);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1674;
tr1944:
	{
		uint16_t val = htons(5);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1674;
tr1953:
	{
		uint16_t val = htons(4);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1674;
tr1958:
	{
		uint16_t val = htons(6);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1674;
tr1963:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1674;
tr1979:
	{
		uint16_t val = htons(2);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1674;
tr1984:
	{
		uint16_t val = htons(8);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1674;
tr1988:
	{
		uint16_t val = htons(3);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1674;
st1674:
	if ( ++p == pe )
		goto _test_eof1674;
case 1674:
	goto st0;
tr1924:
	{
		if (rdata_tail + 2 > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st585;
st585:
	if ( ++p == pe )
		goto _test_eof585;
case 585:
	if ( (*p) == 111 )
		goto st586;
	goto tr1922;
st586:
	if ( ++p == pe )
		goto _test_eof586;
case 586:
	if ( (*p) == 104 )
		goto st587;
	goto tr1922;
st587:
	if ( ++p == pe )
		goto _test_eof587;
case 587:
	if ( (*p) == 112 )
		goto st588;
	goto tr1922;
st588:
	if ( ++p == pe )
		goto _test_eof588;
case 588:
	if ( (*p) == 97 )
		goto st589;
	goto tr1922;
st589:
	if ( ++p == pe )
		goto _test_eof589;
case 589:
	if ( (*p) == 116 )
		goto st590;
	goto tr1922;
st590:
	if ( ++p == pe )
		goto _test_eof590;
case 590:
	if ( (*p) == 104 )
		goto st591;
	goto tr1922;
st591:
	if ( ++p == pe )
		goto _test_eof591;
case 591:
	switch( (*p) ) {
		case 32: goto tr1941;
		case 34: goto tr1941;
		case 44: goto tr1941;
		case 59: goto tr1941;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1941;
	} else if ( (*p) >= 9 )
		goto tr1941;
	goto tr1922;
tr1925:
	{
		if (rdata_tail + 2 > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st592;
st592:
	if ( ++p == pe )
		goto _test_eof592;
case 592:
	if ( (*p) == 99 )
		goto st593;
	goto tr1922;
st593:
	if ( ++p == pe )
		goto _test_eof593;
case 593:
	if ( (*p) == 104 )
		goto st594;
	goto tr1922;
st594:
	if ( ++p == pe )
		goto _test_eof594;
case 594:
	switch( (*p) ) {
		case 32: goto tr1944;
		case 34: goto tr1944;
		case 44: goto tr1944;
		case 59: goto tr1944;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1944;
	} else if ( (*p) >= 9 )
		goto tr1944;
	goto tr1922;
tr1926:
	{
		if (rdata_tail + 2 > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st595;
st595:
	if ( ++p == pe )
		goto _test_eof595;
case 595:
	if ( (*p) == 112 )
		goto st596;
	goto tr1922;
st596:
	if ( ++p == pe )
		goto _test_eof596;
case 596:
	if ( (*p) == 118 )
		goto st597;
	goto tr1922;
st597:
	if ( ++p == pe )
		goto _test_eof597;
case 597:
	switch( (*p) ) {
		case 52: goto st598;
		case 54: goto st603;
	}
	goto tr1922;
st598:
	if ( ++p == pe )
		goto _test_eof598;
case 598:
	if ( (*p) == 104 )
		goto st599;
	goto tr1922;
st599:
	if ( ++p == pe )
		goto _test_eof599;
case 599:
	if ( (*p) == 105 )
		goto st600;
	goto tr1922;
st600:
	if ( ++p == pe )
		goto _test_eof600;
case 600:
	if ( (*p) == 110 )
		goto st601;
	goto tr1922;
st601:
	if ( ++p == pe )
		goto _test_eof601;
case 601:
	if ( (*p) == 116 )
		goto st602;
	goto tr1922;
st602:
	if ( ++p == pe )
		goto _test_eof602;
case 602:
	switch( (*p) ) {
		case 32: goto tr1953;
		case 34: goto tr1953;
		case 44: goto tr1953;
		case 59: goto tr1953;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1953;
	} else if ( (*p) >= 9 )
		goto tr1953;
	goto tr1922;
st603:
	if ( ++p == pe )
		goto _test_eof603;
case 603:
	if ( (*p) == 104 )
		goto st604;
	goto tr1922;
st604:
	if ( ++p == pe )
		goto _test_eof604;
case 604:
	if ( (*p) == 105 )
		goto st605;
	goto tr1922;
st605:
	if ( ++p == pe )
		goto _test_eof605;
case 605:
	if ( (*p) == 110 )
		goto st606;
	goto tr1922;
st606:
	if ( ++p == pe )
		goto _test_eof606;
case 606:
	if ( (*p) == 116 )
		goto st607;
	goto tr1922;
st607:
	if ( ++p == pe )
		goto _test_eof607;
case 607:
	switch( (*p) ) {
		case 32: goto tr1958;
		case 34: goto tr1958;
		case 44: goto tr1958;
		case 59: goto tr1958;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1958;
	} else if ( (*p) >= 9 )
		goto tr1958;
	goto tr1922;
tr1927:
	{
		if (rdata_tail + 2 > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st608;
st608:
	if ( ++p == pe )
		goto _test_eof608;
case 608:
	if ( (*p) == 101 )
		goto st609;
	goto tr1922;
st609:
	if ( ++p == pe )
		goto _test_eof609;
case 609:
	if ( (*p) == 121 )
		goto st610;
	goto tr1922;
st610:
	if ( ++p == pe )
		goto _test_eof610;
case 610:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr1962;
	goto tr1961;
tr1962:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st611;
tr1964:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st611;
st611:
	if ( ++p == pe )
		goto _test_eof611;
case 611:
	switch( (*p) ) {
		case 32: goto tr1963;
		case 34: goto tr1963;
		case 44: goto tr1963;
		case 59: goto tr1963;
	}
	if ( (*p) < 40 ) {
		if ( 9 <= (*p) && (*p) <= 10 )
			goto tr1963;
	} else if ( (*p) > 41 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr1964;
	} else
		goto tr1963;
	goto tr1961;
tr1928:
	{
		if (rdata_tail + 2 > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st612;
st612:
	if ( ++p == pe )
		goto _test_eof612;
case 612:
	if ( (*p) == 111 )
		goto st613;
	goto tr1922;
st613:
	if ( ++p == pe )
		goto _test_eof613;
case 613:
	if ( (*p) == 45 )
		goto st614;
	goto tr1922;
st614:
	if ( ++p == pe )
		goto _test_eof614;
case 614:
	if ( (*p) == 100 )
		goto st615;
	goto tr1922;
st615:
	if ( ++p == pe )
		goto _test_eof615;
case 615:
	if ( (*p) == 101 )
		goto st616;
	goto tr1922;
st616:
	if ( ++p == pe )
		goto _test_eof616;
case 616:
	if ( (*p) == 102 )
		goto st617;
	goto tr1922;
st617:
	if ( ++p == pe )
		goto _test_eof617;
case 617:
	if ( (*p) == 97 )
		goto st618;
	goto tr1922;
st618:
	if ( ++p == pe )
		goto _test_eof618;
case 618:
	if ( (*p) == 117 )
		goto st619;
	goto tr1922;
st619:
	if ( ++p == pe )
		goto _test_eof619;
case 619:
	if ( (*p) == 108 )
		goto st620;
	goto tr1922;
st620:
	if ( ++p == pe )
		goto _test_eof620;
case 620:
	if ( (*p) == 116 )
		goto st621;
	goto tr1922;
st621:
	if ( ++p == pe )
		goto _test_eof621;
case 621:
	if ( (*p) == 45 )
		goto st622;
	goto tr1922;
st622:
	if ( ++p == pe )
		goto _test_eof622;
case 622:
	if ( (*p) == 97 )
		goto st623;
	goto tr1922;
st623:
	if ( ++p == pe )
		goto _test_eof623;
case 623:
	if ( (*p) == 108 )
		goto st624;
	goto tr1922;
st624:
	if ( ++p == pe )
		goto _test_eof624;
case 624:
	if ( (*p) == 112 )
		goto st625;
	goto tr1922;
st625:
	if ( ++p == pe )
		goto _test_eof625;
case 625:
	if ( (*p) == 110 )
		goto st626;
	goto tr1922;
st626:
	if ( ++p == pe )
		goto _test_eof626;
case 626:
	switch( (*p) ) {
		case 32: goto tr1979;
		case 34: goto tr1979;
		case 44: goto tr1979;
		case 59: goto tr1979;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1979;
	} else if ( (*p) >= 9 )
		goto tr1979;
	goto tr1922;
tr1929:
	{
		if (rdata_tail + 2 > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st627;
st627:
	if ( ++p == pe )
		goto _test_eof627;
case 627:
	if ( (*p) == 104 )
		goto st628;
	goto tr1922;
st628:
	if ( ++p == pe )
		goto _test_eof628;
case 628:
	if ( (*p) == 116 )
		goto st629;
	goto tr1922;
st629:
	if ( ++p == pe )
		goto _test_eof629;
case 629:
	if ( (*p) == 116 )
		goto st630;
	goto tr1922;
st630:
	if ( ++p == pe )
		goto _test_eof630;
case 630:
	if ( (*p) == 112 )
		goto st631;
	goto tr1922;
st631:
	if ( ++p == pe )
		goto _test_eof631;
case 631:
	switch( (*p) ) {
		case 32: goto tr1984;
		case 34: goto tr1984;
		case 44: goto tr1984;
		case 59: goto tr1984;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1984;
	} else if ( (*p) >= 9 )
		goto tr1984;
	goto tr1922;
tr1930:
	{
		if (rdata_tail + 2 > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st632;
st632:
	if ( ++p == pe )
		goto _test_eof632;
case 632:
	if ( (*p) == 111 )
		goto st633;
	goto tr1922;
st633:
	if ( ++p == pe )
		goto _test_eof633;
case 633:
	if ( (*p) == 114 )
		goto st634;
	goto tr1922;
st634:
	if ( ++p == pe )
		goto _test_eof634;
case 634:
	if ( (*p) == 116 )
		goto st635;
	goto tr1922;
st635:
	if ( ++p == pe )
		goto _test_eof635;
case 635:
	switch( (*p) ) {
		case 32: goto tr1988;
		case 34: goto tr1988;
		case 44: goto tr1988;
		case 59: goto tr1988;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1988;
	} else if ( (*p) >= 9 )
		goto tr1988;
	goto tr1922;
st636:
	if ( ++p == pe )
		goto _test_eof636;
case 636:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr1990;
		case 32: goto tr1990;
		case 40: goto tr1991;
		case 41: goto tr1992;
		case 3082: goto tr1993;
		case 3131: goto tr1994;
		case 3338: goto tr1995;
		case 3387: goto tr1995;
		case 3594: goto tr1996;
		case 3643: goto tr1997;
	}
	goto tr1989;
tr1999:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st637;
tr2000:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st637;
tr2010:
	{
		s->line_counter++;
	}
	goto st637;
tr2030:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 637; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st637;
tr1990:
	{
		s->svcb.params_position = rdata_tail;
		s->svcb.last_key = -1;
	}
	goto st637;
tr1991:
	{
		s->svcb.params_position = rdata_tail;
		s->svcb.last_key = -1;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st637;
tr1992:
	{
		s->svcb.params_position = rdata_tail;
		s->svcb.last_key = -1;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st637;
tr1993:
	{
		s->svcb.params_position = rdata_tail;
		s->svcb.last_key = -1;
	}
	{
		s->line_counter++;
	}
	goto st637;
tr2021:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->comma_list = false;
		if (s->pending_backslash) {
			WARN(ZS_BAD_ALPN_BACKSLASH);
			p--; {goto st319;}
		}
	}
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	goto st637;
tr2022:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->comma_list = false;
		if (s->pending_backslash) {
			WARN(ZS_BAD_ALPN_BACKSLASH);
			p--; {goto st319;}
		}
	}
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st637;
tr2023:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->comma_list = false;
		if (s->pending_backslash) {
			WARN(ZS_BAD_ALPN_BACKSLASH);
			p--; {goto st319;}
		}
	}
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st637;
tr2024:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->comma_list = false;
		if (s->pending_backslash) {
			WARN(ZS_BAD_ALPN_BACKSLASH);
			p--; {goto st319;}
		}
	}
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st637;
tr2040:
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	goto st637;
tr2041:
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st637;
tr2042:
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st637;
tr2043:
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st637;
tr2050:
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	goto st637;
tr2051:
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st637;
tr2052:
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st637;
tr2053:
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st637;
tr2093:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	goto st637;
tr2094:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st637;
tr2095:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st637;
tr2098:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st637;
tr2116:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
		rdata_tail += ZS_INET6_ADDR_LENGTH;
	}
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	goto st637;
tr2117:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
		rdata_tail += ZS_INET6_ADDR_LENGTH;
	}
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st637;
tr2118:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
		rdata_tail += ZS_INET6_ADDR_LENGTH;
	}
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st637;
tr2121:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
		rdata_tail += ZS_INET6_ADDR_LENGTH;
	}
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st637;
tr2131:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		uint16_t val = htons(0);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	goto st637;
tr2132:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		uint16_t val = htons(0);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st637;
tr2133:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		uint16_t val = htons(0);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st637;
tr2136:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		uint16_t val = htons(0);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st637;
tr2156:
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		svcb_mandatory_sort(s->svcb.mandatory_position, rdata_tail);
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	goto st637;
tr2157:
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		svcb_mandatory_sort(s->svcb.mandatory_position, rdata_tail);
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st637;
tr2158:
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		svcb_mandatory_sort(s->svcb.mandatory_position, rdata_tail);
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st637;
tr2160:
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		svcb_mandatory_sort(s->svcb.mandatory_position, rdata_tail);
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st637;
tr2180:
	{
		uint16_t val = htons(2);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		uint16_t val = htons(0);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	goto st637;
tr2181:
	{
		uint16_t val = htons(2);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		uint16_t val = htons(0);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st637;
tr2182:
	{
		uint16_t val = htons(2);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		uint16_t val = htons(0);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st637;
tr2183:
	{
		uint16_t val = htons(2);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		uint16_t val = htons(0);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st637;
tr2192:
	{
		uint16_t val = htons(8);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		uint16_t val = htons(0);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	goto st637;
tr2193:
	{
		uint16_t val = htons(8);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		uint16_t val = htons(0);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st637;
tr2194:
	{
		uint16_t val = htons(8);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		uint16_t val = htons(0);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st637;
tr2195:
	{
		uint16_t val = htons(8);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		uint16_t val = htons(0);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st637;
tr2209:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	goto st637;
tr2210:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st637;
tr2211:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st637;
tr2213:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st637;
st637:
	if ( ++p == pe )
		goto _test_eof637;
case 637:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st637;
		case 32: goto st637;
		case 40: goto tr1999;
		case 41: goto tr2000;
		case 97: goto tr2001;
		case 100: goto tr2002;
		case 101: goto tr2003;
		case 105: goto tr2004;
		case 107: goto tr2005;
		case 109: goto tr2006;
		case 110: goto tr2007;
		case 111: goto tr2008;
		case 112: goto tr2009;
		case 3082: goto tr2010;
		case 3131: goto tr2011;
		case 3338: goto tr2012;
		case 3387: goto tr2012;
		case 3594: goto tr2013;
		case 3643: goto tr2014;
	}
	goto tr1989;
tr2001:
	{
		if (rdata_tail + 4 > rdata_stop + 1) { // key_len + val_len
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->svcb.param_position = rdata_tail;
	}
	goto st638;
st638:
	if ( ++p == pe )
		goto _test_eof638;
case 638:
	if ( (*p) == 108 )
		goto st639;
	goto tr1989;
st639:
	if ( ++p == pe )
		goto _test_eof639;
case 639:
	if ( (*p) == 112 )
		goto st640;
	goto tr1989;
st640:
	if ( ++p == pe )
		goto _test_eof640;
case 640:
	if ( (*p) == 110 )
		goto st641;
	goto tr1989;
st641:
	if ( ++p == pe )
		goto _test_eof641;
case 641:
	if ( (*p) == 61 )
		goto tr2018;
	goto tr1989;
tr2018:
	{
		uint16_t val = htons(1);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	goto st642;
st642:
	if ( ++p == pe )
		goto _test_eof642;
case 642:
	switch( (*p) ) {
		case 32: goto tr1989;
		case 34: goto tr2020;
		case 59: goto tr1989;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1989;
	} else if ( (*p) >= 9 )
		goto tr1989;
	goto tr2019;
tr2019:
	{
		s->comma_list = true;
		s->pending_backslash = false;
	}
	{
		if (rdata_tail < rdata_stop) {
			s->item_length2_location = rdata_tail;
			rdata_tail += 2;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail <= rdata_stop) {
			s->item_length_location = rdata_tail++;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{ p--; {stack[top++] = 643;goto st330;} }
	goto st643;
st643:
	if ( ++p == pe )
		goto _test_eof643;
case 643:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2021;
		case 32: goto tr2021;
		case 40: goto tr2022;
		case 41: goto tr2023;
		case 3082: goto tr2024;
		case 3131: goto tr2025;
		case 3338: goto tr2026;
		case 3387: goto tr2026;
		case 3594: goto tr2027;
		case 3643: goto tr2028;
	}
	goto tr1989;
tr2011:
	{
		s->buffer_length = 0;
	}
	goto st644;
tr2029:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st644;
tr1994:
	{
		s->svcb.params_position = rdata_tail;
		s->svcb.last_key = -1;
	}
	{
		s->buffer_length = 0;
	}
	goto st644;
tr2025:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->comma_list = false;
		if (s->pending_backslash) {
			WARN(ZS_BAD_ALPN_BACKSLASH);
			p--; {goto st319;}
		}
	}
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st644;
tr2044:
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st644;
tr2054:
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st644;
tr2099:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st644;
tr2122:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
		rdata_tail += ZS_INET6_ADDR_LENGTH;
	}
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st644;
tr2137:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		uint16_t val = htons(0);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st644;
tr2161:
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		svcb_mandatory_sort(s->svcb.mandatory_position, rdata_tail);
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st644;
tr2184:
	{
		uint16_t val = htons(2);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		uint16_t val = htons(0);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st644;
tr2196:
	{
		uint16_t val = htons(8);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		uint16_t val = htons(0);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st644;
tr2214:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st644;
st644:
	if ( ++p == pe )
		goto _test_eof644;
case 644:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr2030;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr2029;
	goto tr1989;
tr1995:
	{
		s->svcb.params_position = rdata_tail;
		s->svcb.last_key = -1;
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1675;
tr2012:
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1675;
tr2026:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->comma_list = false;
		if (s->pending_backslash) {
			WARN(ZS_BAD_ALPN_BACKSLASH);
			p--; {goto st319;}
		}
	}
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1675;
tr2045:
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1675;
tr2055:
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1675;
tr2100:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1675;
tr2123:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
		rdata_tail += ZS_INET6_ADDR_LENGTH;
	}
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1675;
tr2138:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		uint16_t val = htons(0);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1675;
tr2162:
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		svcb_mandatory_sort(s->svcb.mandatory_position, rdata_tail);
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1675;
tr2185:
	{
		uint16_t val = htons(2);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		uint16_t val = htons(0);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1675;
tr2197:
	{
		uint16_t val = htons(8);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		uint16_t val = htons(0);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1675;
tr2215:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1675;
st1675:
	if ( ++p == pe )
		goto _test_eof1675;
case 1675:
	goto st0;
tr1996:
	{
		s->svcb.params_position = rdata_tail;
		s->svcb.last_key = -1;
	}
	{
		s->line_counter++;
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1676;
tr2013:
	{
		s->line_counter++;
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1676;
tr2027:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->comma_list = false;
		if (s->pending_backslash) {
			WARN(ZS_BAD_ALPN_BACKSLASH);
			p--; {goto st319;}
		}
	}
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1676;
tr2046:
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1676;
tr2056:
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1676;
tr2101:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1676;
tr2124:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
		rdata_tail += ZS_INET6_ADDR_LENGTH;
	}
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1676;
tr2139:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		uint16_t val = htons(0);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1676;
tr2163:
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		svcb_mandatory_sort(s->svcb.mandatory_position, rdata_tail);
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1676;
tr2186:
	{
		uint16_t val = htons(2);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		uint16_t val = htons(0);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1676;
tr2198:
	{
		uint16_t val = htons(8);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		uint16_t val = htons(0);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1676;
tr2216:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1676;
st1676:
	if ( ++p == pe )
		goto _test_eof1676;
case 1676:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st637;
		case 32: goto st637;
		case 40: goto tr1999;
		case 41: goto tr2000;
		case 97: goto tr2001;
		case 100: goto tr2002;
		case 101: goto tr2003;
		case 105: goto tr2004;
		case 107: goto tr2005;
		case 109: goto tr2006;
		case 110: goto tr2007;
		case 111: goto tr2008;
		case 112: goto tr2009;
		case 3082: goto tr2010;
		case 3131: goto tr2011;
		case 3338: goto tr2012;
		case 3387: goto tr2012;
		case 3594: goto tr2013;
		case 3643: goto tr2014;
	}
	goto tr1989;
tr2002:
	{
		if (rdata_tail + 4 > rdata_stop + 1) { // key_len + val_len
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->svcb.param_position = rdata_tail;
	}
	goto st645;
st645:
	if ( ++p == pe )
		goto _test_eof645;
case 645:
	if ( (*p) == 111 )
		goto st646;
	goto tr1989;
st646:
	if ( ++p == pe )
		goto _test_eof646;
case 646:
	if ( (*p) == 104 )
		goto st647;
	goto tr1989;
st647:
	if ( ++p == pe )
		goto _test_eof647;
case 647:
	if ( (*p) == 112 )
		goto st648;
	goto tr1989;
st648:
	if ( ++p == pe )
		goto _test_eof648;
case 648:
	if ( (*p) == 97 )
		goto st649;
	goto tr1989;
st649:
	if ( ++p == pe )
		goto _test_eof649;
case 649:
	if ( (*p) == 116 )
		goto st650;
	goto tr1989;
st650:
	if ( ++p == pe )
		goto _test_eof650;
case 650:
	if ( (*p) == 104 )
		goto st651;
	goto tr1989;
st651:
	if ( ++p == pe )
		goto _test_eof651;
case 651:
	if ( (*p) == 61 )
		goto tr2037;
	goto tr1989;
tr2037:
	{
		uint16_t val = htons(7);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	goto st652;
st652:
	if ( ++p == pe )
		goto _test_eof652;
case 652:
	switch( (*p) ) {
		case 32: goto tr1989;
		case 34: goto tr2039;
		case 59: goto tr1989;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1989;
	} else if ( (*p) >= 9 )
		goto tr1989;
	goto tr2038;
tr2038:
	{
		if (rdata_tail < rdata_stop) {
			s->item_length2_location = rdata_tail;
			rdata_tail += 2;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{ p--; {stack[top++] = 653;goto st330;} }
	goto st653;
st653:
	if ( ++p == pe )
		goto _test_eof653;
case 653:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2040;
		case 32: goto tr2040;
		case 40: goto tr2041;
		case 41: goto tr2042;
		case 3082: goto tr2043;
		case 3131: goto tr2044;
		case 3338: goto tr2045;
		case 3387: goto tr2045;
		case 3594: goto tr2046;
		case 3643: goto tr2047;
	}
	goto tr1989;
tr1997:
	{
		s->svcb.params_position = rdata_tail;
		s->svcb.last_key = -1;
	}
	{
		s->buffer_length = 0;
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1677;
tr2014:
	{
		s->buffer_length = 0;
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1677;
tr2028:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->comma_list = false;
		if (s->pending_backslash) {
			WARN(ZS_BAD_ALPN_BACKSLASH);
			p--; {goto st319;}
		}
	}
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1677;
tr2047:
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1677;
tr2057:
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1677;
tr2102:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1677;
tr2125:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
		rdata_tail += ZS_INET6_ADDR_LENGTH;
	}
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1677;
tr2140:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		uint16_t val = htons(0);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1677;
tr2164:
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		svcb_mandatory_sort(s->svcb.mandatory_position, rdata_tail);
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1677;
tr2187:
	{
		uint16_t val = htons(2);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		uint16_t val = htons(0);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1677;
tr2199:
	{
		uint16_t val = htons(8);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		uint16_t val = htons(0);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1677;
tr2217:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		int ret = svcb_sort(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	{
		int ret = svcb_check(s, rdata_tail);
		if (ret != ZS_OK) {
			WARN(ret);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1677;
st1677:
	if ( ++p == pe )
		goto _test_eof1677;
case 1677:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr2030;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr2029;
	goto tr1989;
tr2039:
	{
		if (rdata_tail < rdata_stop) {
			s->item_length2_location = rdata_tail;
			rdata_tail += 2;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{ p--; {stack[top++] = 654;goto st330;} }
	goto st654;
st654:
	if ( ++p == pe )
		goto _test_eof654;
case 654:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2040;
		case 32: goto tr2040;
		case 40: goto tr2041;
		case 41: goto tr2042;
		case 3082: goto tr2043;
		case 3131: goto tr2044;
		case 3338: goto tr2045;
		case 3387: goto tr2045;
		case 3594: goto tr2046;
		case 3643: goto tr2047;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr2048;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr2048;
	} else
		goto tr2048;
	goto tr1989;
tr2048:
	{
		if (rdata_tail < rdata_stop) {
			s->item_length2_location = rdata_tail;
			rdata_tail += 2;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{ p--; {stack[top++] = 655;goto st330;} }
	goto st655;
st655:
	if ( ++p == pe )
		goto _test_eof655;
case 655:
	if ( (*p) == 34 )
		goto tr2049;
	goto tr1989;
tr2049:
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st656;
tr2089:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st656;
tr2112:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
		rdata_tail += ZS_INET6_ADDR_LENGTH;
	}
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st656;
tr2207:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st656;
tr2153:
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		svcb_mandatory_sort(s->svcb.mandatory_position, rdata_tail);
	}
	goto st656;
tr2219:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->comma_list = false;
		if (s->pending_backslash) {
			WARN(ZS_BAD_ALPN_BACKSLASH);
			p--; {goto st319;}
		}
	}
	{
		s->item_length = rdata_tail - s->item_length2_location - 2;

		if (s->item_length <= MAX_ITEM_LENGTH2) {
			uint16_t val = htons((uint16_t)(s->item_length));
			memcpy(s->item_length2_location, &val, 2);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st656;
st656:
	if ( ++p == pe )
		goto _test_eof656;
case 656:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2050;
		case 32: goto tr2050;
		case 40: goto tr2051;
		case 41: goto tr2052;
		case 3082: goto tr2053;
		case 3131: goto tr2054;
		case 3338: goto tr2055;
		case 3387: goto tr2055;
		case 3594: goto tr2056;
		case 3643: goto tr2057;
	}
	goto tr1989;
tr2003:
	{
		if (rdata_tail + 4 > rdata_stop + 1) { // key_len + val_len
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->svcb.param_position = rdata_tail;
	}
	goto st657;
st657:
	if ( ++p == pe )
		goto _test_eof657;
case 657:
	if ( (*p) == 99 )
		goto st658;
	goto tr1989;
st658:
	if ( ++p == pe )
		goto _test_eof658;
case 658:
	if ( (*p) == 104 )
		goto st659;
	goto tr1989;
st659:
	if ( ++p == pe )
		goto _test_eof659;
case 659:
	if ( (*p) == 61 )
		goto tr2060;
	goto tr1989;
tr2060:
	{
		uint16_t val = htons(5);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	goto st660;
st660:
	if ( ++p == pe )
		goto _test_eof660;
case 660:
	switch( (*p) ) {
		case 34: goto st661;
		case 43: goto tr2062;
	}
	if ( (*p) < 65 ) {
		if ( 47 <= (*p) && (*p) <= 57 )
			goto tr2062;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr2062;
	} else
		goto tr2062;
	goto tr1989;
st661:
	if ( ++p == pe )
		goto _test_eof661;
case 661:
	if ( (*p) == 43 )
		goto tr2063;
	if ( (*p) < 65 ) {
		if ( 47 <= (*p) && (*p) <= 57 )
			goto tr2063;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr2063;
	} else
		goto tr2063;
	goto tr1989;
tr2069:
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_base64_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st662;
tr2063:
	{
		if (rdata_tail < rdata_stop) {
			s->item_length2_location = rdata_tail;
			rdata_tail += 2;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_base64_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st662;
st662:
	if ( ++p == pe )
		goto _test_eof662;
case 662:
	if ( (*p) == 43 )
		goto tr2064;
	if ( (*p) < 65 ) {
		if ( 47 <= (*p) && (*p) <= 57 )
			goto tr2064;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr2064;
	} else
		goto tr2064;
	goto tr1989;
tr2064:
	{
		*(rdata_tail++) += second_left_base64_to_num[(uint8_t)(*p)];

		if (rdata_tail <= rdata_stop) {
			*rdata_tail = second_right_base64_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st663;
st663:
	if ( ++p == pe )
		goto _test_eof663;
case 663:
	switch( (*p) ) {
		case 43: goto tr2065;
		case 61: goto st666;
	}
	if ( (*p) < 65 ) {
		if ( 47 <= (*p) && (*p) <= 57 )
			goto tr2065;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr2065;
	} else
		goto tr2065;
	goto tr1989;
tr2065:
	{
		*(rdata_tail++) += third_left_base64_to_num[(uint8_t)(*p)];

		if (rdata_tail <= rdata_stop) {
			*rdata_tail = third_right_base64_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st664;
st664:
	if ( ++p == pe )
		goto _test_eof664;
case 664:
	switch( (*p) ) {
		case 43: goto tr2067;
		case 61: goto st665;
	}
	if ( (*p) < 65 ) {
		if ( 47 <= (*p) && (*p) <= 57 )
			goto tr2067;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr2067;
	} else
		goto tr2067;
	goto tr1989;
tr2067:
	{
		*(rdata_tail++) += fourth_base64_to_num[(uint8_t)(*p)];
	}
	goto st665;
st665:
	if ( ++p == pe )
		goto _test_eof665;
case 665:
	switch( (*p) ) {
		case 34: goto tr2049;
		case 43: goto tr2069;
	}
	if ( (*p) < 65 ) {
		if ( 47 <= (*p) && (*p) <= 57 )
			goto tr2069;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr2069;
	} else
		goto tr2069;
	goto tr1989;
st666:
	if ( ++p == pe )
		goto _test_eof666;
case 666:
	if ( (*p) == 61 )
		goto st665;
	goto tr1989;
tr2075:
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_base64_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st667;
tr2062:
	{
		if (rdata_tail < rdata_stop) {
			s->item_length2_location = rdata_tail;
			rdata_tail += 2;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_base64_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st667;
st667:
	if ( ++p == pe )
		goto _test_eof667;
case 667:
	if ( (*p) == 43 )
		goto tr2070;
	if ( (*p) < 65 ) {
		if ( 47 <= (*p) && (*p) <= 57 )
			goto tr2070;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr2070;
	} else
		goto tr2070;
	goto tr1989;
tr2070:
	{
		*(rdata_tail++) += second_left_base64_to_num[(uint8_t)(*p)];

		if (rdata_tail <= rdata_stop) {
			*rdata_tail = second_right_base64_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st668;
st668:
	if ( ++p == pe )
		goto _test_eof668;
case 668:
	switch( (*p) ) {
		case 43: goto tr2071;
		case 61: goto st671;
	}
	if ( (*p) < 65 ) {
		if ( 47 <= (*p) && (*p) <= 57 )
			goto tr2071;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr2071;
	} else
		goto tr2071;
	goto tr1989;
tr2071:
	{
		*(rdata_tail++) += third_left_base64_to_num[(uint8_t)(*p)];

		if (rdata_tail <= rdata_stop) {
			*rdata_tail = third_right_base64_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st669;
st669:
	if ( ++p == pe )
		goto _test_eof669;
case 669:
	switch( (*p) ) {
		case 43: goto tr2073;
		case 61: goto st670;
	}
	if ( (*p) < 65 ) {
		if ( 47 <= (*p) && (*p) <= 57 )
			goto tr2073;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr2073;
	} else
		goto tr2073;
	goto tr1989;
tr2073:
	{
		*(rdata_tail++) += fourth_base64_to_num[(uint8_t)(*p)];
	}
	goto st670;
st670:
	if ( ++p == pe )
		goto _test_eof670;
case 670:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2040;
		case 32: goto tr2040;
		case 40: goto tr2041;
		case 41: goto tr2042;
		case 43: goto tr2075;
		case 3082: goto tr2043;
		case 3131: goto tr2044;
		case 3338: goto tr2045;
		case 3387: goto tr2045;
		case 3594: goto tr2046;
		case 3643: goto tr2047;
	}
	if ( _widec < 65 ) {
		if ( 47 <= _widec && _widec <= 57 )
			goto tr2075;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr2075;
	} else
		goto tr2075;
	goto tr1989;
st671:
	if ( ++p == pe )
		goto _test_eof671;
case 671:
	if ( (*p) == 61 )
		goto st670;
	goto tr1989;
tr2004:
	{
		if (rdata_tail + 4 > rdata_stop + 1) { // key_len + val_len
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->svcb.param_position = rdata_tail;
	}
	goto st672;
st672:
	if ( ++p == pe )
		goto _test_eof672;
case 672:
	if ( (*p) == 112 )
		goto st673;
	goto tr1989;
st673:
	if ( ++p == pe )
		goto _test_eof673;
case 673:
	if ( (*p) == 118 )
		goto st674;
	goto tr1989;
st674:
	if ( ++p == pe )
		goto _test_eof674;
case 674:
	switch( (*p) ) {
		case 52: goto st675;
		case 54: goto st686;
	}
	goto tr1989;
st675:
	if ( ++p == pe )
		goto _test_eof675;
case 675:
	if ( (*p) == 104 )
		goto st676;
	goto tr1989;
st676:
	if ( ++p == pe )
		goto _test_eof676;
case 676:
	if ( (*p) == 105 )
		goto st677;
	goto tr1989;
st677:
	if ( ++p == pe )
		goto _test_eof677;
case 677:
	if ( (*p) == 110 )
		goto st678;
	goto tr1989;
st678:
	if ( ++p == pe )
		goto _test_eof678;
case 678:
	if ( (*p) == 116 )
		goto st679;
	goto tr1989;
st679:
	if ( ++p == pe )
		goto _test_eof679;
case 679:
	if ( (*p) == 61 )
		goto tr2084;
	goto tr1989;
tr2084:
	{
		uint16_t val = htons(4);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	goto st680;
st680:
	if ( ++p == pe )
		goto _test_eof680;
case 680:
	switch( (*p) ) {
		case 34: goto st681;
		case 46: goto tr2087;
	}
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr2087;
	goto tr2085;
st681:
	if ( ++p == pe )
		goto _test_eof681;
case 681:
	if ( (*p) == 46 )
		goto tr2088;
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr2088;
	goto tr2085;
tr2088:
	{
		if (rdata_tail < rdata_stop) {
			s->item_length2_location = rdata_tail;
			rdata_tail += 2;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st682;
tr2091:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st682;
tr2092:
	{
		s->buffer_length = 0;
	}
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st682;
st682:
	if ( ++p == pe )
		goto _test_eof682;
case 682:
	switch( (*p) ) {
		case 34: goto tr2089;
		case 44: goto tr2090;
		case 46: goto tr2091;
	}
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr2091;
	goto tr2085;
tr2090:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	goto st683;
st683:
	if ( ++p == pe )
		goto _test_eof683;
case 683:
	if ( (*p) == 46 )
		goto tr2092;
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr2092;
	goto tr2085;
tr2087:
	{
		if (rdata_tail < rdata_stop) {
			s->item_length2_location = rdata_tail;
			rdata_tail += 2;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st684;
tr2097:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st684;
tr2103:
	{
		s->buffer_length = 0;
	}
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st684;
st684:
	if ( ++p == pe )
		goto _test_eof684;
case 684:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2093;
		case 32: goto tr2093;
		case 40: goto tr2094;
		case 41: goto tr2095;
		case 44: goto tr2096;
		case 46: goto tr2097;
		case 3082: goto tr2098;
		case 3131: goto tr2099;
		case 3338: goto tr2100;
		case 3387: goto tr2100;
		case 3594: goto tr2101;
		case 3643: goto tr2102;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2097;
	goto tr2085;
tr2096:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	goto st685;
st685:
	if ( ++p == pe )
		goto _test_eof685;
case 685:
	if ( (*p) == 46 )
		goto tr2103;
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr2103;
	goto tr2085;
st686:
	if ( ++p == pe )
		goto _test_eof686;
case 686:
	if ( (*p) == 104 )
		goto st687;
	goto tr1989;
st687:
	if ( ++p == pe )
		goto _test_eof687;
case 687:
	if ( (*p) == 105 )
		goto st688;
	goto tr1989;
st688:
	if ( ++p == pe )
		goto _test_eof688;
case 688:
	if ( (*p) == 110 )
		goto st689;
	goto tr1989;
st689:
	if ( ++p == pe )
		goto _test_eof689;
case 689:
	if ( (*p) == 116 )
		goto st690;
	goto tr1989;
st690:
	if ( ++p == pe )
		goto _test_eof690;
case 690:
	if ( (*p) == 61 )
		goto tr2108;
	goto tr1989;
tr2108:
	{
		uint16_t val = htons(6);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	goto st691;
st691:
	if ( ++p == pe )
		goto _test_eof691;
case 691:
	switch( (*p) ) {
		case 34: goto st692;
		case 46: goto tr2110;
	}
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 58 )
			goto tr2110;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr2110;
	} else
		goto tr2110;
	goto tr2085;
st692:
	if ( ++p == pe )
		goto _test_eof692;
case 692:
	if ( (*p) == 46 )
		goto tr2111;
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 58 )
			goto tr2111;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr2111;
	} else
		goto tr2111;
	goto tr2085;
tr2111:
	{
		if (rdata_tail < rdata_stop) {
			s->item_length2_location = rdata_tail;
			rdata_tail += 2;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st693;
tr2114:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st693;
tr2115:
	{
		s->buffer_length = 0;
	}
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st693;
st693:
	if ( ++p == pe )
		goto _test_eof693;
case 693:
	switch( (*p) ) {
		case 34: goto tr2112;
		case 44: goto tr2113;
		case 46: goto tr2114;
	}
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 58 )
			goto tr2114;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr2114;
	} else
		goto tr2114;
	goto tr2085;
tr2113:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
		rdata_tail += ZS_INET6_ADDR_LENGTH;
	}
	goto st694;
st694:
	if ( ++p == pe )
		goto _test_eof694;
case 694:
	if ( (*p) == 46 )
		goto tr2115;
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 58 )
			goto tr2115;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr2115;
	} else
		goto tr2115;
	goto tr2085;
tr2110:
	{
		if (rdata_tail < rdata_stop) {
			s->item_length2_location = rdata_tail;
			rdata_tail += 2;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st695;
tr2120:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st695;
tr2126:
	{
		s->buffer_length = 0;
	}
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st695;
st695:
	if ( ++p == pe )
		goto _test_eof695;
case 695:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2116;
		case 32: goto tr2116;
		case 40: goto tr2117;
		case 41: goto tr2118;
		case 44: goto tr2119;
		case 46: goto tr2120;
		case 3082: goto tr2121;
		case 3131: goto tr2122;
		case 3338: goto tr2123;
		case 3387: goto tr2123;
		case 3594: goto tr2124;
		case 3643: goto tr2125;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 58 )
			goto tr2120;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr2120;
	} else
		goto tr2120;
	goto tr2085;
tr2119:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
		rdata_tail += ZS_INET6_ADDR_LENGTH;
	}
	goto st696;
st696:
	if ( ++p == pe )
		goto _test_eof696;
case 696:
	if ( (*p) == 46 )
		goto tr2126;
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 58 )
			goto tr2126;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr2126;
	} else
		goto tr2126;
	goto tr2085;
tr2005:
	{
		if (rdata_tail + 4 > rdata_stop + 1) { // key_len + val_len
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->svcb.param_position = rdata_tail;
	}
	goto st697;
st697:
	if ( ++p == pe )
		goto _test_eof697;
case 697:
	if ( (*p) == 101 )
		goto st698;
	goto tr1989;
st698:
	if ( ++p == pe )
		goto _test_eof698;
case 698:
	if ( (*p) == 121 )
		goto st699;
	goto tr1989;
st699:
	if ( ++p == pe )
		goto _test_eof699;
case 699:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr2130;
	goto tr2129;
tr2130:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st700;
tr2134:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st700;
st700:
	if ( ++p == pe )
		goto _test_eof700;
case 700:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2131;
		case 32: goto tr2131;
		case 40: goto tr2132;
		case 41: goto tr2133;
		case 61: goto tr2135;
		case 3082: goto tr2136;
		case 3131: goto tr2137;
		case 3338: goto tr2138;
		case 3387: goto tr2138;
		case 3594: goto tr2139;
		case 3643: goto tr2140;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2134;
	goto tr2129;
tr2135:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st701;
st701:
	if ( ++p == pe )
		goto _test_eof701;
case 701:
	switch( (*p) ) {
		case 32: goto tr1989;
		case 59: goto tr1989;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr1989;
	} else if ( (*p) >= 9 )
		goto tr1989;
	goto tr2038;
tr2006:
	{
		if (rdata_tail + 4 > rdata_stop + 1) { // key_len + val_len
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->svcb.param_position = rdata_tail;
	}
	goto st702;
st702:
	if ( ++p == pe )
		goto _test_eof702;
case 702:
	if ( (*p) == 97 )
		goto st703;
	goto tr1989;
st703:
	if ( ++p == pe )
		goto _test_eof703;
case 703:
	if ( (*p) == 110 )
		goto st704;
	goto tr1989;
st704:
	if ( ++p == pe )
		goto _test_eof704;
case 704:
	if ( (*p) == 100 )
		goto st705;
	goto tr1989;
st705:
	if ( ++p == pe )
		goto _test_eof705;
case 705:
	if ( (*p) == 97 )
		goto st706;
	goto tr1989;
st706:
	if ( ++p == pe )
		goto _test_eof706;
case 706:
	if ( (*p) == 116 )
		goto st707;
	goto tr1989;
st707:
	if ( ++p == pe )
		goto _test_eof707;
case 707:
	if ( (*p) == 111 )
		goto st708;
	goto tr1989;
st708:
	if ( ++p == pe )
		goto _test_eof708;
case 708:
	if ( (*p) == 114 )
		goto st709;
	goto tr1989;
st709:
	if ( ++p == pe )
		goto _test_eof709;
case 709:
	if ( (*p) == 121 )
		goto st710;
	goto tr1989;
st710:
	if ( ++p == pe )
		goto _test_eof710;
case 710:
	if ( (*p) == 61 )
		goto tr2149;
	goto tr1989;
tr2149:
	{
		uint16_t val = htons(0);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	goto st711;
st711:
	if ( ++p == pe )
		goto _test_eof711;
case 711:
	if ( (*p) == 34 )
		goto st712;
	if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr2151;
	} else if ( (*p) >= 65 )
		goto tr2151;
	goto tr1989;
st712:
	if ( ++p == pe )
		goto _test_eof712;
case 712:
	if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr2152;
	} else if ( (*p) >= 65 )
		goto tr2152;
	goto tr1989;
tr2152:
	{
		s->svcb.mandatory_position = rdata_tail + 2; // Skip 2-B prefix.
	}
	{
		if (rdata_tail < rdata_stop) {
			s->item_length2_location = rdata_tail;
			rdata_tail += 2;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{ p--; {stack[top++] = 713;goto st580;} }
	goto st713;
tr2155:
	{ p--; {stack[top++] = 713;goto st580;} }
	goto st713;
st713:
	if ( ++p == pe )
		goto _test_eof713;
case 713:
	switch( (*p) ) {
		case 34: goto tr2153;
		case 44: goto st714;
	}
	goto tr1989;
st714:
	if ( ++p == pe )
		goto _test_eof714;
case 714:
	if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr2155;
	} else if ( (*p) >= 65 )
		goto tr2155;
	goto tr1989;
tr2151:
	{
		s->svcb.mandatory_position = rdata_tail + 2; // Skip 2-B prefix.
	}
	{
		if (rdata_tail < rdata_stop) {
			s->item_length2_location = rdata_tail;
			rdata_tail += 2;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{ p--; {stack[top++] = 715;goto st580;} }
	goto st715;
tr2165:
	{ p--; {stack[top++] = 715;goto st580;} }
	goto st715;
st715:
	if ( ++p == pe )
		goto _test_eof715;
case 715:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2156;
		case 32: goto tr2156;
		case 40: goto tr2157;
		case 41: goto tr2158;
		case 44: goto st716;
		case 3082: goto tr2160;
		case 3131: goto tr2161;
		case 3338: goto tr2162;
		case 3387: goto tr2162;
		case 3594: goto tr2163;
		case 3643: goto tr2164;
	}
	goto tr1989;
st716:
	if ( ++p == pe )
		goto _test_eof716;
case 716:
	if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr2165;
	} else if ( (*p) >= 65 )
		goto tr2165;
	goto tr1989;
tr2007:
	{
		if (rdata_tail + 4 > rdata_stop + 1) { // key_len + val_len
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->svcb.param_position = rdata_tail;
	}
	goto st717;
st717:
	if ( ++p == pe )
		goto _test_eof717;
case 717:
	if ( (*p) == 111 )
		goto st718;
	goto tr1989;
st718:
	if ( ++p == pe )
		goto _test_eof718;
case 718:
	if ( (*p) == 45 )
		goto st719;
	goto tr1989;
st719:
	if ( ++p == pe )
		goto _test_eof719;
case 719:
	if ( (*p) == 100 )
		goto st720;
	goto tr1989;
st720:
	if ( ++p == pe )
		goto _test_eof720;
case 720:
	if ( (*p) == 101 )
		goto st721;
	goto tr1989;
st721:
	if ( ++p == pe )
		goto _test_eof721;
case 721:
	if ( (*p) == 102 )
		goto st722;
	goto tr1989;
st722:
	if ( ++p == pe )
		goto _test_eof722;
case 722:
	if ( (*p) == 97 )
		goto st723;
	goto tr1989;
st723:
	if ( ++p == pe )
		goto _test_eof723;
case 723:
	if ( (*p) == 117 )
		goto st724;
	goto tr1989;
st724:
	if ( ++p == pe )
		goto _test_eof724;
case 724:
	if ( (*p) == 108 )
		goto st725;
	goto tr1989;
st725:
	if ( ++p == pe )
		goto _test_eof725;
case 725:
	if ( (*p) == 116 )
		goto st726;
	goto tr1989;
st726:
	if ( ++p == pe )
		goto _test_eof726;
case 726:
	if ( (*p) == 45 )
		goto st727;
	goto tr1989;
st727:
	if ( ++p == pe )
		goto _test_eof727;
case 727:
	if ( (*p) == 97 )
		goto st728;
	goto tr1989;
st728:
	if ( ++p == pe )
		goto _test_eof728;
case 728:
	if ( (*p) == 108 )
		goto st729;
	goto tr1989;
st729:
	if ( ++p == pe )
		goto _test_eof729;
case 729:
	if ( (*p) == 112 )
		goto st730;
	goto tr1989;
st730:
	if ( ++p == pe )
		goto _test_eof730;
case 730:
	if ( (*p) == 110 )
		goto st731;
	goto tr1989;
st731:
	if ( ++p == pe )
		goto _test_eof731;
case 731:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2180;
		case 32: goto tr2180;
		case 40: goto tr2181;
		case 41: goto tr2182;
		case 3082: goto tr2183;
		case 3131: goto tr2184;
		case 3338: goto tr2185;
		case 3387: goto tr2185;
		case 3594: goto tr2186;
		case 3643: goto tr2187;
	}
	goto tr1989;
tr2008:
	{
		if (rdata_tail + 4 > rdata_stop + 1) { // key_len + val_len
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->svcb.param_position = rdata_tail;
	}
	goto st732;
st732:
	if ( ++p == pe )
		goto _test_eof732;
case 732:
	if ( (*p) == 104 )
		goto st733;
	goto tr1989;
st733:
	if ( ++p == pe )
		goto _test_eof733;
case 733:
	if ( (*p) == 116 )
		goto st734;
	goto tr1989;
st734:
	if ( ++p == pe )
		goto _test_eof734;
case 734:
	if ( (*p) == 116 )
		goto st735;
	goto tr1989;
st735:
	if ( ++p == pe )
		goto _test_eof735;
case 735:
	if ( (*p) == 112 )
		goto st736;
	goto tr1989;
st736:
	if ( ++p == pe )
		goto _test_eof736;
case 736:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2192;
		case 32: goto tr2192;
		case 40: goto tr2193;
		case 41: goto tr2194;
		case 3082: goto tr2195;
		case 3131: goto tr2196;
		case 3338: goto tr2197;
		case 3387: goto tr2197;
		case 3594: goto tr2198;
		case 3643: goto tr2199;
	}
	goto tr1989;
tr2009:
	{
		if (rdata_tail + 4 > rdata_stop + 1) { // key_len + val_len
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		s->svcb.param_position = rdata_tail;
	}
	goto st737;
st737:
	if ( ++p == pe )
		goto _test_eof737;
case 737:
	if ( (*p) == 111 )
		goto st738;
	goto tr1989;
st738:
	if ( ++p == pe )
		goto _test_eof738;
case 738:
	if ( (*p) == 114 )
		goto st739;
	goto tr1989;
st739:
	if ( ++p == pe )
		goto _test_eof739;
case 739:
	if ( (*p) == 116 )
		goto st740;
	goto tr1989;
st740:
	if ( ++p == pe )
		goto _test_eof740;
case 740:
	if ( (*p) == 61 )
		goto tr2203;
	goto tr1989;
tr2203:
	{
		uint16_t val = htons(3);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	goto st741;
st741:
	if ( ++p == pe )
		goto _test_eof741;
case 741:
	if ( (*p) == 34 )
		goto st742;
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr2205;
	goto tr2129;
st742:
	if ( ++p == pe )
		goto _test_eof742;
case 742:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr2206;
	goto tr2129;
tr2208:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st743;
tr2206:
	{
		uint16_t val = htons(2);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		if (rdata_tail + 2 > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st743;
st743:
	if ( ++p == pe )
		goto _test_eof743;
case 743:
	if ( (*p) == 34 )
		goto tr2207;
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr2208;
	goto tr2129;
tr2212:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st744;
tr2205:
	{
		uint16_t val = htons(2);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		if (rdata_tail + 2 > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st744;
st744:
	if ( ++p == pe )
		goto _test_eof744;
case 744:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2209;
		case 32: goto tr2209;
		case 40: goto tr2210;
		case 41: goto tr2211;
		case 3082: goto tr2213;
		case 3131: goto tr2214;
		case 3338: goto tr2215;
		case 3387: goto tr2215;
		case 3594: goto tr2216;
		case 3643: goto tr2217;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2212;
	goto tr2129;
tr2020:
	{
		s->comma_list = true;
		s->pending_backslash = false;
	}
	{
		if (rdata_tail < rdata_stop) {
			s->item_length2_location = rdata_tail;
			rdata_tail += 2;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail <= rdata_stop) {
			s->item_length_location = rdata_tail++;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{ p--; {stack[top++] = 745;goto st330;} }
	goto st745;
st745:
	if ( ++p == pe )
		goto _test_eof745;
case 745:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2021;
		case 32: goto tr2021;
		case 40: goto tr2022;
		case 41: goto tr2023;
		case 3082: goto tr2024;
		case 3131: goto tr2025;
		case 3338: goto tr2026;
		case 3387: goto tr2026;
		case 3594: goto tr2027;
		case 3643: goto tr2028;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr2218;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr2218;
	} else
		goto tr2218;
	goto tr1989;
tr2218:
	{
		s->comma_list = true;
		s->pending_backslash = false;
	}
	{
		if (rdata_tail < rdata_stop) {
			s->item_length2_location = rdata_tail;
			rdata_tail += 2;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail <= rdata_stop) {
			s->item_length_location = rdata_tail++;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{ p--; {stack[top++] = 746;goto st330;} }
	goto st746;
st746:
	if ( ++p == pe )
		goto _test_eof746;
case 746:
	if ( (*p) == 34 )
		goto tr2219;
	goto tr1989;
st747:
	if ( ++p == pe )
		goto _test_eof747;
case 747:
	switch( (*p) ) {
		case 68: goto st749;
		case 69: goto st764;
		case 73: goto st803;
		case 80: goto st811;
		case 82: goto st824;
		case 100: goto st749;
		case 101: goto st764;
		case 105: goto st803;
		case 112: goto st811;
		case 114: goto st824;
	}
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr2221;
	goto tr2220;
tr2221:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st748;
tr2228:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st748;
st748:
	if ( ++p == pe )
		goto _test_eof748;
case 748:
	switch( (*p) ) {
		case 32: goto tr2227;
		case 59: goto tr2227;
	}
	if ( (*p) < 40 ) {
		if ( 9 <= (*p) && (*p) <= 10 )
			goto tr2227;
	} else if ( (*p) > 41 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr2228;
	} else
		goto tr2227;
	goto tr2220;
tr2227:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1678;
tr2231:
	{
		*(rdata_tail++) = 2;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1678;
tr2233:
	{
		*(rdata_tail++) = 3;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1678;
tr2245:
	{
		*(rdata_tail++) = 6;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1678;
tr2255:
	{
		*(rdata_tail++) = 12;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1678;
tr2269:
	{
		*(rdata_tail++) = 13;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1678;
tr2278:
	{
		*(rdata_tail++) = 14;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1678;
tr2285:
	{
		*(rdata_tail++) = 15;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1678;
tr2288:
	{
		*(rdata_tail++) = 16;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1678;
tr2296:
	{
		*(rdata_tail++) = 252;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1678;
tr2307:
	{
		*(rdata_tail++) = 253;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1678;
tr2310:
	{
		*(rdata_tail++) = 254;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1678;
tr2317:
	{
		*(rdata_tail++) = 1;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1678;
tr2323:
	{
		*(rdata_tail++) = 5;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1678;
tr2335:
	{
		*(rdata_tail++) = 7;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1678;
tr2338:
	{
		*(rdata_tail++) = 8;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1678;
tr2341:
	{
		*(rdata_tail++) = 10;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1678;
st1678:
	if ( ++p == pe )
		goto _test_eof1678;
case 1678:
	goto st0;
st749:
	if ( ++p == pe )
		goto _test_eof749;
case 749:
	switch( (*p) ) {
		case 72: goto st750;
		case 83: goto st751;
		case 104: goto st750;
		case 115: goto st751;
	}
	goto tr2220;
st750:
	if ( ++p == pe )
		goto _test_eof750;
case 750:
	switch( (*p) ) {
		case 32: goto tr2231;
		case 59: goto tr2231;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2231;
	} else if ( (*p) >= 9 )
		goto tr2231;
	goto tr2220;
st751:
	if ( ++p == pe )
		goto _test_eof751;
case 751:
	switch( (*p) ) {
		case 65: goto st752;
		case 97: goto st752;
	}
	goto tr2220;
st752:
	if ( ++p == pe )
		goto _test_eof752;
case 752:
	switch( (*p) ) {
		case 32: goto tr2233;
		case 45: goto st753;
		case 59: goto tr2233;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2233;
	} else if ( (*p) >= 9 )
		goto tr2233;
	goto tr2220;
st753:
	if ( ++p == pe )
		goto _test_eof753;
case 753:
	switch( (*p) ) {
		case 78: goto st754;
		case 110: goto st754;
	}
	goto tr2220;
st754:
	if ( ++p == pe )
		goto _test_eof754;
case 754:
	switch( (*p) ) {
		case 83: goto st755;
		case 115: goto st755;
	}
	goto tr2220;
st755:
	if ( ++p == pe )
		goto _test_eof755;
case 755:
	switch( (*p) ) {
		case 69: goto st756;
		case 101: goto st756;
	}
	goto tr2220;
st756:
	if ( ++p == pe )
		goto _test_eof756;
case 756:
	switch( (*p) ) {
		case 67: goto st757;
		case 99: goto st757;
	}
	goto tr2220;
st757:
	if ( ++p == pe )
		goto _test_eof757;
case 757:
	if ( (*p) == 51 )
		goto st758;
	goto tr2220;
st758:
	if ( ++p == pe )
		goto _test_eof758;
case 758:
	if ( (*p) == 45 )
		goto st759;
	goto tr2220;
st759:
	if ( ++p == pe )
		goto _test_eof759;
case 759:
	switch( (*p) ) {
		case 83: goto st760;
		case 115: goto st760;
	}
	goto tr2220;
st760:
	if ( ++p == pe )
		goto _test_eof760;
case 760:
	switch( (*p) ) {
		case 72: goto st761;
		case 104: goto st761;
	}
	goto tr2220;
st761:
	if ( ++p == pe )
		goto _test_eof761;
case 761:
	switch( (*p) ) {
		case 65: goto st762;
		case 97: goto st762;
	}
	goto tr2220;
st762:
	if ( ++p == pe )
		goto _test_eof762;
case 762:
	if ( (*p) == 49 )
		goto st763;
	goto tr2220;
st763:
	if ( ++p == pe )
		goto _test_eof763;
case 763:
	switch( (*p) ) {
		case 32: goto tr2245;
		case 59: goto tr2245;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2245;
	} else if ( (*p) >= 9 )
		goto tr2245;
	goto tr2220;
st764:
	if ( ++p == pe )
		goto _test_eof764;
case 764:
	switch( (*p) ) {
		case 67: goto st765;
		case 68: goto st794;
		case 99: goto st765;
		case 100: goto st794;
	}
	goto tr2220;
st765:
	if ( ++p == pe )
		goto _test_eof765;
case 765:
	switch( (*p) ) {
		case 67: goto st766;
		case 68: goto st772;
		case 99: goto st766;
		case 100: goto st772;
	}
	goto tr2220;
st766:
	if ( ++p == pe )
		goto _test_eof766;
case 766:
	if ( (*p) == 45 )
		goto st767;
	goto tr2220;
st767:
	if ( ++p == pe )
		goto _test_eof767;
case 767:
	switch( (*p) ) {
		case 71: goto st768;
		case 103: goto st768;
	}
	goto tr2220;
st768:
	if ( ++p == pe )
		goto _test_eof768;
case 768:
	switch( (*p) ) {
		case 79: goto st769;
		case 111: goto st769;
	}
	goto tr2220;
st769:
	if ( ++p == pe )
		goto _test_eof769;
case 769:
	switch( (*p) ) {
		case 83: goto st770;
		case 115: goto st770;
	}
	goto tr2220;
st770:
	if ( ++p == pe )
		goto _test_eof770;
case 770:
	switch( (*p) ) {
		case 84: goto st771;
		case 116: goto st771;
	}
	goto tr2220;
st771:
	if ( ++p == pe )
		goto _test_eof771;
case 771:
	switch( (*p) ) {
		case 32: goto tr2255;
		case 59: goto tr2255;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2255;
	} else if ( (*p) >= 9 )
		goto tr2255;
	goto tr2220;
st772:
	if ( ++p == pe )
		goto _test_eof772;
case 772:
	switch( (*p) ) {
		case 83: goto st773;
		case 115: goto st773;
	}
	goto tr2220;
st773:
	if ( ++p == pe )
		goto _test_eof773;
case 773:
	switch( (*p) ) {
		case 65: goto st774;
		case 97: goto st774;
	}
	goto tr2220;
st774:
	if ( ++p == pe )
		goto _test_eof774;
case 774:
	switch( (*p) ) {
		case 80: goto st775;
		case 112: goto st775;
	}
	goto tr2220;
st775:
	if ( ++p == pe )
		goto _test_eof775;
case 775:
	switch( (*p) ) {
		case 50: goto st776;
		case 51: goto st785;
	}
	goto tr2220;
st776:
	if ( ++p == pe )
		goto _test_eof776;
case 776:
	if ( (*p) == 53 )
		goto st777;
	goto tr2220;
st777:
	if ( ++p == pe )
		goto _test_eof777;
case 777:
	if ( (*p) == 54 )
		goto st778;
	goto tr2220;
st778:
	if ( ++p == pe )
		goto _test_eof778;
case 778:
	switch( (*p) ) {
		case 83: goto st779;
		case 115: goto st779;
	}
	goto tr2220;
st779:
	if ( ++p == pe )
		goto _test_eof779;
case 779:
	switch( (*p) ) {
		case 72: goto st780;
		case 104: goto st780;
	}
	goto tr2220;
st780:
	if ( ++p == pe )
		goto _test_eof780;
case 780:
	switch( (*p) ) {
		case 65: goto st781;
		case 97: goto st781;
	}
	goto tr2220;
st781:
	if ( ++p == pe )
		goto _test_eof781;
case 781:
	if ( (*p) == 50 )
		goto st782;
	goto tr2220;
st782:
	if ( ++p == pe )
		goto _test_eof782;
case 782:
	if ( (*p) == 53 )
		goto st783;
	goto tr2220;
st783:
	if ( ++p == pe )
		goto _test_eof783;
case 783:
	if ( (*p) == 54 )
		goto st784;
	goto tr2220;
st784:
	if ( ++p == pe )
		goto _test_eof784;
case 784:
	switch( (*p) ) {
		case 32: goto tr2269;
		case 59: goto tr2269;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2269;
	} else if ( (*p) >= 9 )
		goto tr2269;
	goto tr2220;
st785:
	if ( ++p == pe )
		goto _test_eof785;
case 785:
	if ( (*p) == 56 )
		goto st786;
	goto tr2220;
st786:
	if ( ++p == pe )
		goto _test_eof786;
case 786:
	if ( (*p) == 52 )
		goto st787;
	goto tr2220;
st787:
	if ( ++p == pe )
		goto _test_eof787;
case 787:
	switch( (*p) ) {
		case 83: goto st788;
		case 115: goto st788;
	}
	goto tr2220;
st788:
	if ( ++p == pe )
		goto _test_eof788;
case 788:
	switch( (*p) ) {
		case 72: goto st789;
		case 104: goto st789;
	}
	goto tr2220;
st789:
	if ( ++p == pe )
		goto _test_eof789;
case 789:
	switch( (*p) ) {
		case 65: goto st790;
		case 97: goto st790;
	}
	goto tr2220;
st790:
	if ( ++p == pe )
		goto _test_eof790;
case 790:
	if ( (*p) == 51 )
		goto st791;
	goto tr2220;
st791:
	if ( ++p == pe )
		goto _test_eof791;
case 791:
	if ( (*p) == 56 )
		goto st792;
	goto tr2220;
st792:
	if ( ++p == pe )
		goto _test_eof792;
case 792:
	if ( (*p) == 52 )
		goto st793;
	goto tr2220;
st793:
	if ( ++p == pe )
		goto _test_eof793;
case 793:
	switch( (*p) ) {
		case 32: goto tr2278;
		case 59: goto tr2278;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2278;
	} else if ( (*p) >= 9 )
		goto tr2278;
	goto tr2220;
st794:
	if ( ++p == pe )
		goto _test_eof794;
case 794:
	switch( (*p) ) {
		case 50: goto st795;
		case 52: goto st800;
	}
	goto tr2220;
st795:
	if ( ++p == pe )
		goto _test_eof795;
case 795:
	if ( (*p) == 53 )
		goto st796;
	goto tr2220;
st796:
	if ( ++p == pe )
		goto _test_eof796;
case 796:
	if ( (*p) == 53 )
		goto st797;
	goto tr2220;
st797:
	if ( ++p == pe )
		goto _test_eof797;
case 797:
	if ( (*p) == 49 )
		goto st798;
	goto tr2220;
st798:
	if ( ++p == pe )
		goto _test_eof798;
case 798:
	if ( (*p) == 57 )
		goto st799;
	goto tr2220;
st799:
	if ( ++p == pe )
		goto _test_eof799;
case 799:
	switch( (*p) ) {
		case 32: goto tr2285;
		case 59: goto tr2285;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2285;
	} else if ( (*p) >= 9 )
		goto tr2285;
	goto tr2220;
st800:
	if ( ++p == pe )
		goto _test_eof800;
case 800:
	if ( (*p) == 52 )
		goto st801;
	goto tr2220;
st801:
	if ( ++p == pe )
		goto _test_eof801;
case 801:
	if ( (*p) == 56 )
		goto st802;
	goto tr2220;
st802:
	if ( ++p == pe )
		goto _test_eof802;
case 802:
	switch( (*p) ) {
		case 32: goto tr2288;
		case 59: goto tr2288;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2288;
	} else if ( (*p) >= 9 )
		goto tr2288;
	goto tr2220;
st803:
	if ( ++p == pe )
		goto _test_eof803;
case 803:
	switch( (*p) ) {
		case 78: goto st804;
		case 110: goto st804;
	}
	goto tr2220;
st804:
	if ( ++p == pe )
		goto _test_eof804;
case 804:
	switch( (*p) ) {
		case 68: goto st805;
		case 100: goto st805;
	}
	goto tr2220;
st805:
	if ( ++p == pe )
		goto _test_eof805;
case 805:
	switch( (*p) ) {
		case 73: goto st806;
		case 105: goto st806;
	}
	goto tr2220;
st806:
	if ( ++p == pe )
		goto _test_eof806;
case 806:
	switch( (*p) ) {
		case 82: goto st807;
		case 114: goto st807;
	}
	goto tr2220;
st807:
	if ( ++p == pe )
		goto _test_eof807;
case 807:
	switch( (*p) ) {
		case 69: goto st808;
		case 101: goto st808;
	}
	goto tr2220;
st808:
	if ( ++p == pe )
		goto _test_eof808;
case 808:
	switch( (*p) ) {
		case 67: goto st809;
		case 99: goto st809;
	}
	goto tr2220;
st809:
	if ( ++p == pe )
		goto _test_eof809;
case 809:
	switch( (*p) ) {
		case 84: goto st810;
		case 116: goto st810;
	}
	goto tr2220;
st810:
	if ( ++p == pe )
		goto _test_eof810;
case 810:
	switch( (*p) ) {
		case 32: goto tr2296;
		case 59: goto tr2296;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2296;
	} else if ( (*p) >= 9 )
		goto tr2296;
	goto tr2220;
st811:
	if ( ++p == pe )
		goto _test_eof811;
case 811:
	switch( (*p) ) {
		case 82: goto st812;
		case 114: goto st812;
	}
	goto tr2220;
st812:
	if ( ++p == pe )
		goto _test_eof812;
case 812:
	switch( (*p) ) {
		case 73: goto st813;
		case 105: goto st813;
	}
	goto tr2220;
st813:
	if ( ++p == pe )
		goto _test_eof813;
case 813:
	switch( (*p) ) {
		case 86: goto st814;
		case 118: goto st814;
	}
	goto tr2220;
st814:
	if ( ++p == pe )
		goto _test_eof814;
case 814:
	switch( (*p) ) {
		case 65: goto st815;
		case 97: goto st815;
	}
	goto tr2220;
st815:
	if ( ++p == pe )
		goto _test_eof815;
case 815:
	switch( (*p) ) {
		case 84: goto st816;
		case 116: goto st816;
	}
	goto tr2220;
st816:
	if ( ++p == pe )
		goto _test_eof816;
case 816:
	switch( (*p) ) {
		case 69: goto st817;
		case 101: goto st817;
	}
	goto tr2220;
st817:
	if ( ++p == pe )
		goto _test_eof817;
case 817:
	switch( (*p) ) {
		case 68: goto st818;
		case 79: goto st821;
		case 100: goto st818;
		case 111: goto st821;
	}
	goto tr2220;
st818:
	if ( ++p == pe )
		goto _test_eof818;
case 818:
	switch( (*p) ) {
		case 78: goto st819;
		case 110: goto st819;
	}
	goto tr2220;
st819:
	if ( ++p == pe )
		goto _test_eof819;
case 819:
	switch( (*p) ) {
		case 83: goto st820;
		case 115: goto st820;
	}
	goto tr2220;
st820:
	if ( ++p == pe )
		goto _test_eof820;
case 820:
	switch( (*p) ) {
		case 32: goto tr2307;
		case 59: goto tr2307;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2307;
	} else if ( (*p) >= 9 )
		goto tr2307;
	goto tr2220;
st821:
	if ( ++p == pe )
		goto _test_eof821;
case 821:
	switch( (*p) ) {
		case 73: goto st822;
		case 105: goto st822;
	}
	goto tr2220;
st822:
	if ( ++p == pe )
		goto _test_eof822;
case 822:
	switch( (*p) ) {
		case 68: goto st823;
		case 100: goto st823;
	}
	goto tr2220;
st823:
	if ( ++p == pe )
		goto _test_eof823;
case 823:
	switch( (*p) ) {
		case 32: goto tr2310;
		case 59: goto tr2310;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2310;
	} else if ( (*p) >= 9 )
		goto tr2310;
	goto tr2220;
st824:
	if ( ++p == pe )
		goto _test_eof824;
case 824:
	switch( (*p) ) {
		case 83: goto st825;
		case 115: goto st825;
	}
	goto tr2220;
st825:
	if ( ++p == pe )
		goto _test_eof825;
case 825:
	switch( (*p) ) {
		case 65: goto st826;
		case 97: goto st826;
	}
	goto tr2220;
st826:
	if ( ++p == pe )
		goto _test_eof826;
case 826:
	switch( (*p) ) {
		case 77: goto st827;
		case 83: goto st830;
		case 109: goto st827;
		case 115: goto st830;
	}
	goto tr2220;
st827:
	if ( ++p == pe )
		goto _test_eof827;
case 827:
	switch( (*p) ) {
		case 68: goto st828;
		case 100: goto st828;
	}
	goto tr2220;
st828:
	if ( ++p == pe )
		goto _test_eof828;
case 828:
	if ( (*p) == 53 )
		goto st829;
	goto tr2220;
st829:
	if ( ++p == pe )
		goto _test_eof829;
case 829:
	switch( (*p) ) {
		case 32: goto tr2317;
		case 59: goto tr2317;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2317;
	} else if ( (*p) >= 9 )
		goto tr2317;
	goto tr2220;
st830:
	if ( ++p == pe )
		goto _test_eof830;
case 830:
	switch( (*p) ) {
		case 72: goto st831;
		case 104: goto st831;
	}
	goto tr2220;
st831:
	if ( ++p == pe )
		goto _test_eof831;
case 831:
	switch( (*p) ) {
		case 65: goto st832;
		case 97: goto st832;
	}
	goto tr2220;
st832:
	if ( ++p == pe )
		goto _test_eof832;
case 832:
	switch( (*p) ) {
		case 49: goto st833;
		case 50: goto st845;
		case 53: goto st848;
	}
	goto tr2220;
st833:
	if ( ++p == pe )
		goto _test_eof833;
case 833:
	switch( (*p) ) {
		case 32: goto tr2323;
		case 45: goto st834;
		case 59: goto tr2323;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2323;
	} else if ( (*p) >= 9 )
		goto tr2323;
	goto tr2220;
st834:
	if ( ++p == pe )
		goto _test_eof834;
case 834:
	switch( (*p) ) {
		case 78: goto st835;
		case 110: goto st835;
	}
	goto tr2220;
st835:
	if ( ++p == pe )
		goto _test_eof835;
case 835:
	switch( (*p) ) {
		case 83: goto st836;
		case 115: goto st836;
	}
	goto tr2220;
st836:
	if ( ++p == pe )
		goto _test_eof836;
case 836:
	switch( (*p) ) {
		case 69: goto st837;
		case 101: goto st837;
	}
	goto tr2220;
st837:
	if ( ++p == pe )
		goto _test_eof837;
case 837:
	switch( (*p) ) {
		case 67: goto st838;
		case 99: goto st838;
	}
	goto tr2220;
st838:
	if ( ++p == pe )
		goto _test_eof838;
case 838:
	if ( (*p) == 51 )
		goto st839;
	goto tr2220;
st839:
	if ( ++p == pe )
		goto _test_eof839;
case 839:
	if ( (*p) == 45 )
		goto st840;
	goto tr2220;
st840:
	if ( ++p == pe )
		goto _test_eof840;
case 840:
	switch( (*p) ) {
		case 83: goto st841;
		case 115: goto st841;
	}
	goto tr2220;
st841:
	if ( ++p == pe )
		goto _test_eof841;
case 841:
	switch( (*p) ) {
		case 72: goto st842;
		case 104: goto st842;
	}
	goto tr2220;
st842:
	if ( ++p == pe )
		goto _test_eof842;
case 842:
	switch( (*p) ) {
		case 65: goto st843;
		case 97: goto st843;
	}
	goto tr2220;
st843:
	if ( ++p == pe )
		goto _test_eof843;
case 843:
	if ( (*p) == 49 )
		goto st844;
	goto tr2220;
st844:
	if ( ++p == pe )
		goto _test_eof844;
case 844:
	switch( (*p) ) {
		case 32: goto tr2335;
		case 59: goto tr2335;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2335;
	} else if ( (*p) >= 9 )
		goto tr2335;
	goto tr2220;
st845:
	if ( ++p == pe )
		goto _test_eof845;
case 845:
	if ( (*p) == 53 )
		goto st846;
	goto tr2220;
st846:
	if ( ++p == pe )
		goto _test_eof846;
case 846:
	if ( (*p) == 54 )
		goto st847;
	goto tr2220;
st847:
	if ( ++p == pe )
		goto _test_eof847;
case 847:
	switch( (*p) ) {
		case 32: goto tr2338;
		case 59: goto tr2338;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2338;
	} else if ( (*p) >= 9 )
		goto tr2338;
	goto tr2220;
st848:
	if ( ++p == pe )
		goto _test_eof848;
case 848:
	if ( (*p) == 49 )
		goto st849;
	goto tr2220;
st849:
	if ( ++p == pe )
		goto _test_eof849;
case 849:
	if ( (*p) == 50 )
		goto st850;
	goto tr2220;
st850:
	if ( ++p == pe )
		goto _test_eof850;
case 850:
	switch( (*p) ) {
		case 32: goto tr2341;
		case 59: goto tr2341;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2341;
	} else if ( (*p) >= 9 )
		goto tr2341;
	goto tr2220;
st851:
	if ( ++p == pe )
		goto _test_eof851;
case 851:
	switch( (*p) ) {
		case 65: goto st853;
		case 73: goto st859;
		case 79: goto st876;
		case 80: goto st879;
		case 83: goto st885;
		case 85: goto st889;
		case 97: goto st853;
		case 105: goto st859;
		case 111: goto st876;
		case 112: goto st879;
		case 115: goto st885;
		case 117: goto st889;
	}
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr2343;
	goto tr2342;
tr2343:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st852;
tr2351:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st852;
st852:
	if ( ++p == pe )
		goto _test_eof852;
case 852:
	switch( (*p) ) {
		case 32: goto tr2350;
		case 59: goto tr2350;
	}
	if ( (*p) < 40 ) {
		if ( 9 <= (*p) && (*p) <= 10 )
			goto tr2350;
	} else if ( (*p) > 41 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr2351;
	} else
		goto tr2350;
	goto tr2342;
tr2387:
	{
		uint16_t val = htons(1);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1679;
tr2357:
	{
		uint16_t val = htons(7);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1679;
tr2377:
	{
		uint16_t val = htons(5);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1679;
tr2373:
	{
		uint16_t val = htons(4);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1679;
tr2370:
	{
		uint16_t val = htons(6);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1679;
tr2350:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1679;
tr2391:
	{
		uint16_t val = htons(2);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1679;
tr2366:
	{
		uint16_t val = htons(8);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1679;
tr2384:
	{
		uint16_t val = htons(3);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1679;
tr2380:
	{
		uint16_t val = htons(254);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1679;
tr2394:
	{
		uint16_t val = htons(253);
		memcpy(rdata_tail, &val, 2);
		rdata_tail += 2;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1679;
st1679:
	if ( ++p == pe )
		goto _test_eof1679;
case 1679:
	goto st0;
st853:
	if ( ++p == pe )
		goto _test_eof853;
case 853:
	switch( (*p) ) {
		case 67: goto st854;
		case 99: goto st854;
	}
	goto tr2342;
st854:
	if ( ++p == pe )
		goto _test_eof854;
case 854:
	switch( (*p) ) {
		case 80: goto st855;
		case 112: goto st855;
	}
	goto tr2342;
st855:
	if ( ++p == pe )
		goto _test_eof855;
case 855:
	switch( (*p) ) {
		case 75: goto st856;
		case 107: goto st856;
	}
	goto tr2342;
st856:
	if ( ++p == pe )
		goto _test_eof856;
case 856:
	switch( (*p) ) {
		case 73: goto st857;
		case 105: goto st857;
	}
	goto tr2342;
st857:
	if ( ++p == pe )
		goto _test_eof857;
case 857:
	switch( (*p) ) {
		case 88: goto st858;
		case 120: goto st858;
	}
	goto tr2342;
st858:
	if ( ++p == pe )
		goto _test_eof858;
case 858:
	switch( (*p) ) {
		case 32: goto tr2357;
		case 59: goto tr2357;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2357;
	} else if ( (*p) >= 9 )
		goto tr2357;
	goto tr2342;
st859:
	if ( ++p == pe )
		goto _test_eof859;
case 859:
	switch( (*p) ) {
		case 65: goto st860;
		case 80: goto st866;
		case 83: goto st872;
		case 97: goto st860;
		case 112: goto st866;
		case 115: goto st872;
	}
	goto tr2342;
st860:
	if ( ++p == pe )
		goto _test_eof860;
case 860:
	switch( (*p) ) {
		case 67: goto st861;
		case 99: goto st861;
	}
	goto tr2342;
st861:
	if ( ++p == pe )
		goto _test_eof861;
case 861:
	switch( (*p) ) {
		case 80: goto st862;
		case 112: goto st862;
	}
	goto tr2342;
st862:
	if ( ++p == pe )
		goto _test_eof862;
case 862:
	switch( (*p) ) {
		case 75: goto st863;
		case 107: goto st863;
	}
	goto tr2342;
st863:
	if ( ++p == pe )
		goto _test_eof863;
case 863:
	switch( (*p) ) {
		case 73: goto st864;
		case 105: goto st864;
	}
	goto tr2342;
st864:
	if ( ++p == pe )
		goto _test_eof864;
case 864:
	switch( (*p) ) {
		case 88: goto st865;
		case 120: goto st865;
	}
	goto tr2342;
st865:
	if ( ++p == pe )
		goto _test_eof865;
case 865:
	switch( (*p) ) {
		case 32: goto tr2366;
		case 59: goto tr2366;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2366;
	} else if ( (*p) >= 9 )
		goto tr2366;
	goto tr2342;
st866:
	if ( ++p == pe )
		goto _test_eof866;
case 866:
	switch( (*p) ) {
		case 71: goto st867;
		case 75: goto st869;
		case 103: goto st867;
		case 107: goto st869;
	}
	goto tr2342;
st867:
	if ( ++p == pe )
		goto _test_eof867;
case 867:
	switch( (*p) ) {
		case 80: goto st868;
		case 112: goto st868;
	}
	goto tr2342;
st868:
	if ( ++p == pe )
		goto _test_eof868;
case 868:
	switch( (*p) ) {
		case 32: goto tr2370;
		case 59: goto tr2370;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2370;
	} else if ( (*p) >= 9 )
		goto tr2370;
	goto tr2342;
st869:
	if ( ++p == pe )
		goto _test_eof869;
case 869:
	switch( (*p) ) {
		case 73: goto st870;
		case 105: goto st870;
	}
	goto tr2342;
st870:
	if ( ++p == pe )
		goto _test_eof870;
case 870:
	switch( (*p) ) {
		case 88: goto st871;
		case 120: goto st871;
	}
	goto tr2342;
st871:
	if ( ++p == pe )
		goto _test_eof871;
case 871:
	switch( (*p) ) {
		case 32: goto tr2373;
		case 59: goto tr2373;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2373;
	} else if ( (*p) >= 9 )
		goto tr2373;
	goto tr2342;
st872:
	if ( ++p == pe )
		goto _test_eof872;
case 872:
	switch( (*p) ) {
		case 80: goto st873;
		case 112: goto st873;
	}
	goto tr2342;
st873:
	if ( ++p == pe )
		goto _test_eof873;
case 873:
	switch( (*p) ) {
		case 75: goto st874;
		case 107: goto st874;
	}
	goto tr2342;
st874:
	if ( ++p == pe )
		goto _test_eof874;
case 874:
	switch( (*p) ) {
		case 73: goto st875;
		case 105: goto st875;
	}
	goto tr2342;
st875:
	if ( ++p == pe )
		goto _test_eof875;
case 875:
	switch( (*p) ) {
		case 32: goto tr2377;
		case 59: goto tr2377;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2377;
	} else if ( (*p) >= 9 )
		goto tr2377;
	goto tr2342;
st876:
	if ( ++p == pe )
		goto _test_eof876;
case 876:
	switch( (*p) ) {
		case 73: goto st877;
		case 105: goto st877;
	}
	goto tr2342;
st877:
	if ( ++p == pe )
		goto _test_eof877;
case 877:
	switch( (*p) ) {
		case 68: goto st878;
		case 100: goto st878;
	}
	goto tr2342;
st878:
	if ( ++p == pe )
		goto _test_eof878;
case 878:
	switch( (*p) ) {
		case 32: goto tr2380;
		case 59: goto tr2380;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2380;
	} else if ( (*p) >= 9 )
		goto tr2380;
	goto tr2342;
st879:
	if ( ++p == pe )
		goto _test_eof879;
case 879:
	switch( (*p) ) {
		case 71: goto st880;
		case 75: goto st882;
		case 103: goto st880;
		case 107: goto st882;
	}
	goto tr2342;
st880:
	if ( ++p == pe )
		goto _test_eof880;
case 880:
	switch( (*p) ) {
		case 80: goto st881;
		case 112: goto st881;
	}
	goto tr2342;
st881:
	if ( ++p == pe )
		goto _test_eof881;
case 881:
	switch( (*p) ) {
		case 32: goto tr2384;
		case 59: goto tr2384;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2384;
	} else if ( (*p) >= 9 )
		goto tr2384;
	goto tr2342;
st882:
	if ( ++p == pe )
		goto _test_eof882;
case 882:
	switch( (*p) ) {
		case 73: goto st883;
		case 105: goto st883;
	}
	goto tr2342;
st883:
	if ( ++p == pe )
		goto _test_eof883;
case 883:
	switch( (*p) ) {
		case 88: goto st884;
		case 120: goto st884;
	}
	goto tr2342;
st884:
	if ( ++p == pe )
		goto _test_eof884;
case 884:
	switch( (*p) ) {
		case 32: goto tr2387;
		case 59: goto tr2387;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2387;
	} else if ( (*p) >= 9 )
		goto tr2387;
	goto tr2342;
st885:
	if ( ++p == pe )
		goto _test_eof885;
case 885:
	switch( (*p) ) {
		case 80: goto st886;
		case 112: goto st886;
	}
	goto tr2342;
st886:
	if ( ++p == pe )
		goto _test_eof886;
case 886:
	switch( (*p) ) {
		case 75: goto st887;
		case 107: goto st887;
	}
	goto tr2342;
st887:
	if ( ++p == pe )
		goto _test_eof887;
case 887:
	switch( (*p) ) {
		case 73: goto st888;
		case 105: goto st888;
	}
	goto tr2342;
st888:
	if ( ++p == pe )
		goto _test_eof888;
case 888:
	switch( (*p) ) {
		case 32: goto tr2391;
		case 59: goto tr2391;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2391;
	} else if ( (*p) >= 9 )
		goto tr2391;
	goto tr2342;
st889:
	if ( ++p == pe )
		goto _test_eof889;
case 889:
	switch( (*p) ) {
		case 82: goto st890;
		case 114: goto st890;
	}
	goto tr2342;
st890:
	if ( ++p == pe )
		goto _test_eof890;
case 890:
	switch( (*p) ) {
		case 73: goto st891;
		case 105: goto st891;
	}
	goto tr2342;
st891:
	if ( ++p == pe )
		goto _test_eof891;
case 891:
	switch( (*p) ) {
		case 32: goto tr2394;
		case 59: goto tr2394;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2394;
	} else if ( (*p) >= 9 )
		goto tr2394;
	goto tr2342;
st892:
	if ( ++p == pe )
		goto _test_eof892;
case 892:
	switch( (*p) ) {
		case 78: goto st894;
		case 110: goto st894;
	}
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr2396;
	goto tr2395;
tr2396:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st893;
tr2399:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st893;
st893:
	if ( ++p == pe )
		goto _test_eof893;
case 893:
	switch( (*p) ) {
		case 32: goto tr2398;
		case 59: goto tr2398;
	}
	if ( (*p) < 40 ) {
		if ( 9 <= (*p) && (*p) <= 10 )
			goto tr2398;
	} else if ( (*p) > 41 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr2399;
	} else
		goto tr2398;
	goto tr2395;
tr2398:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1680;
tr2405:
	{
		*(rdata_tail++) = 1;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1680;
st1680:
	if ( ++p == pe )
		goto _test_eof1680;
case 1680:
	goto st0;
st894:
	if ( ++p == pe )
		goto _test_eof894;
case 894:
	switch( (*p) ) {
		case 79: goto st895;
		case 111: goto st895;
	}
	goto tr2395;
st895:
	if ( ++p == pe )
		goto _test_eof895;
case 895:
	switch( (*p) ) {
		case 84: goto st896;
		case 116: goto st896;
	}
	goto tr2395;
st896:
	if ( ++p == pe )
		goto _test_eof896;
case 896:
	switch( (*p) ) {
		case 73: goto st897;
		case 105: goto st897;
	}
	goto tr2395;
st897:
	if ( ++p == pe )
		goto _test_eof897;
case 897:
	switch( (*p) ) {
		case 70: goto st898;
		case 102: goto st898;
	}
	goto tr2395;
st898:
	if ( ++p == pe )
		goto _test_eof898;
case 898:
	switch( (*p) ) {
		case 89: goto st899;
		case 121: goto st899;
	}
	goto tr2395;
st899:
	if ( ++p == pe )
		goto _test_eof899;
case 899:
	switch( (*p) ) {
		case 32: goto tr2405;
		case 59: goto tr2405;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2405;
	} else if ( (*p) >= 9 )
		goto tr2405;
	goto tr2395;
st900:
	if ( ++p == pe )
		goto _test_eof900;
case 900:
	if ( (*p) == 46 )
		goto tr2407;
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr2407;
	goto tr2406;
tr2409:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st901;
tr2407:
	{
		s->buffer_length = 0;
	}
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st901;
st901:
	if ( ++p == pe )
		goto _test_eof901;
case 901:
	switch( (*p) ) {
		case 32: goto tr2408;
		case 46: goto tr2409;
		case 59: goto tr2408;
	}
	if ( (*p) < 40 ) {
		if ( 9 <= (*p) && (*p) <= 10 )
			goto tr2408;
	} else if ( (*p) > 41 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr2409;
	} else
		goto tr2408;
	goto tr2406;
tr2408:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1681;
st1681:
	if ( ++p == pe )
		goto _test_eof1681;
case 1681:
	goto st0;
st902:
	if ( ++p == pe )
		goto _test_eof902;
case 902:
	switch( (*p) ) {
		case 42: goto tr2410;
		case 92: goto tr2410;
		case 95: goto tr2410;
	}
	if ( (*p) < 64 ) {
		if ( 45 <= (*p) && (*p) <= 57 )
			goto tr2410;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr2410;
	} else
		goto tr2410;
	goto tr77;
tr2410:
	{
		s->dname = rdata_tail;
	}
	{ p--; {stack[top++] = 903;goto st321;} }
	goto st903;
st903:
	if ( ++p == pe )
		goto _test_eof903;
case 903:
	switch( (*p) ) {
		case 32: goto tr2411;
		case 59: goto tr2411;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2411;
	} else if ( (*p) >= 9 )
		goto tr2411;
	goto tr77;
tr2411:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1682;
st1682:
	if ( ++p == pe )
		goto _test_eof1682;
case 1682:
	goto st0;
st904:
	if ( ++p == pe )
		goto _test_eof904;
case 904:
	switch( (*p) ) {
		case 42: goto tr2412;
		case 92: goto tr2412;
		case 95: goto tr2412;
	}
	if ( (*p) < 64 ) {
		if ( 45 <= (*p) && (*p) <= 57 )
			goto tr2412;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr2412;
	} else
		goto tr2412;
	goto tr77;
tr2412:
	{
		s->dname = rdata_tail;
	}
	{ p--; {stack[top++] = 905;goto st321;} }
	goto st905;
st905:
	if ( ++p == pe )
		goto _test_eof905;
case 905:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2413;
		case 32: goto tr2413;
		case 40: goto tr2414;
		case 41: goto tr2415;
		case 2058: goto tr2416;
		case 2107: goto tr2417;
	}
	goto tr77;
tr2419:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st906;
tr2420:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st906;
tr2422:
	{
		s->line_counter++;
	}
	goto st906;
tr2566:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 906; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st906;
tr2413:
	{
		rdata_tail += s->dname_tmp_length;
	}
	goto st906;
tr2414:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st906;
tr2415:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st906;
tr2416:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	goto st906;
st906:
	if ( ++p == pe )
		goto _test_eof906;
case 906:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st906;
		case 32: goto st906;
		case 40: goto tr2419;
		case 41: goto tr2420;
		case 42: goto tr2421;
		case 92: goto tr2421;
		case 95: goto tr2421;
		case 2058: goto tr2422;
		case 2107: goto tr2423;
	}
	if ( _widec < 64 ) {
		if ( 45 <= _widec && _widec <= 57 )
			goto tr2421;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr2421;
	} else
		goto tr2421;
	goto tr77;
tr2421:
	{
		s->dname = rdata_tail;
	}
	{ p--; {stack[top++] = 907;goto st321;} }
	goto st907;
st907:
	if ( ++p == pe )
		goto _test_eof907;
case 907:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2424;
		case 32: goto tr2424;
		case 40: goto tr2425;
		case 41: goto tr2426;
		case 2058: goto tr2427;
		case 2107: goto tr2428;
	}
	goto tr77;
tr2431:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st908;
tr2432:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st908;
tr2434:
	{
		s->line_counter++;
	}
	goto st908;
tr2564:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 908; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st908;
tr2424:
	{
		rdata_tail += s->dname_tmp_length;
	}
	goto st908;
tr2425:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st908;
tr2426:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st908;
tr2427:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	goto st908;
st908:
	if ( ++p == pe )
		goto _test_eof908;
case 908:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st908;
		case 32: goto st908;
		case 40: goto tr2431;
		case 41: goto tr2432;
		case 2058: goto tr2434;
		case 2107: goto tr2435;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2433;
	goto tr2429;
tr2433:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st909;
tr2439:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st909;
st909:
	if ( ++p == pe )
		goto _test_eof909;
case 909:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2436;
		case 32: goto tr2436;
		case 40: goto tr2437;
		case 41: goto tr2438;
		case 2058: goto tr2440;
		case 2107: goto tr2441;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2439;
	goto tr2429;
tr2443:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st910;
tr2444:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st910;
tr2446:
	{
		s->line_counter++;
	}
	goto st910;
tr2562:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 910; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st910;
tr2436:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st910;
tr2437:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st910;
tr2438:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st910;
tr2440:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st910;
st910:
	if ( ++p == pe )
		goto _test_eof910;
case 910:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st910;
		case 32: goto st910;
		case 40: goto tr2443;
		case 41: goto tr2444;
		case 2058: goto tr2446;
		case 2107: goto tr2447;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2445;
	goto tr2429;
tr2445:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st911;
tr2452:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st911;
st911:
	if ( ++p == pe )
		goto _test_eof911;
case 911:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2449;
		case 32: goto tr2449;
		case 40: goto tr2450;
		case 41: goto tr2451;
		case 68: goto tr2453;
		case 72: goto tr2454;
		case 77: goto tr2455;
		case 83: goto st930;
		case 87: goto tr2457;
		case 100: goto tr2453;
		case 104: goto tr2454;
		case 109: goto tr2455;
		case 115: goto st930;
		case 119: goto tr2457;
		case 2058: goto tr2458;
		case 2107: goto tr2459;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2452;
	goto tr2448;
tr2461:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st912;
tr2462:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st912;
tr2464:
	{
		s->line_counter++;
	}
	goto st912;
tr2547:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 912; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st912;
tr2449:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st912;
tr2450:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st912;
tr2451:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st912;
tr2458:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st912;
tr2555:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st912;
tr2556:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st912;
tr2557:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st912;
tr2559:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st912;
st912:
	if ( ++p == pe )
		goto _test_eof912;
case 912:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st912;
		case 32: goto st912;
		case 40: goto tr2461;
		case 41: goto tr2462;
		case 2058: goto tr2464;
		case 2107: goto tr2465;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2463;
	goto tr2429;
tr2463:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st913;
tr2469:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st913;
st913:
	if ( ++p == pe )
		goto _test_eof913;
case 913:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2466;
		case 32: goto tr2466;
		case 40: goto tr2467;
		case 41: goto tr2468;
		case 68: goto tr2470;
		case 72: goto tr2471;
		case 77: goto tr2472;
		case 83: goto st926;
		case 87: goto tr2474;
		case 100: goto tr2470;
		case 104: goto tr2471;
		case 109: goto tr2472;
		case 115: goto st926;
		case 119: goto tr2474;
		case 2058: goto tr2475;
		case 2107: goto tr2476;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2469;
	goto tr2448;
tr2478:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st914;
tr2479:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st914;
tr2481:
	{
		s->line_counter++;
	}
	goto st914;
tr2532:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 914; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st914;
tr2466:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st914;
tr2467:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st914;
tr2468:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st914;
tr2475:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st914;
tr2540:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st914;
tr2541:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st914;
tr2542:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st914;
tr2544:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st914;
st914:
	if ( ++p == pe )
		goto _test_eof914;
case 914:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st914;
		case 32: goto st914;
		case 40: goto tr2478;
		case 41: goto tr2479;
		case 2058: goto tr2481;
		case 2107: goto tr2482;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2480;
	goto tr2429;
tr2480:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st915;
tr2486:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st915;
st915:
	if ( ++p == pe )
		goto _test_eof915;
case 915:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2483;
		case 32: goto tr2483;
		case 40: goto tr2484;
		case 41: goto tr2485;
		case 68: goto tr2487;
		case 72: goto tr2488;
		case 77: goto tr2489;
		case 83: goto st922;
		case 87: goto tr2491;
		case 100: goto tr2487;
		case 104: goto tr2488;
		case 109: goto tr2489;
		case 115: goto st922;
		case 119: goto tr2491;
		case 2058: goto tr2492;
		case 2107: goto tr2493;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2486;
	goto tr2448;
tr2495:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st916;
tr2496:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st916;
tr2498:
	{
		s->line_counter++;
	}
	goto st916;
tr2517:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 916; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st916;
tr2483:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st916;
tr2484:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st916;
tr2485:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st916;
tr2492:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st916;
tr2525:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st916;
tr2526:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st916;
tr2527:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st916;
tr2529:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st916;
st916:
	if ( ++p == pe )
		goto _test_eof916;
case 916:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st916;
		case 32: goto st916;
		case 40: goto tr2495;
		case 41: goto tr2496;
		case 2058: goto tr2498;
		case 2107: goto tr2499;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2497;
	goto tr2429;
tr2497:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st917;
tr2501:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st917;
st917:
	if ( ++p == pe )
		goto _test_eof917;
case 917:
	switch( (*p) ) {
		case 32: goto tr2500;
		case 59: goto tr2500;
		case 68: goto tr2502;
		case 72: goto tr2503;
		case 77: goto tr2504;
		case 83: goto st918;
		case 87: goto tr2506;
		case 100: goto tr2502;
		case 104: goto tr2503;
		case 109: goto tr2504;
		case 115: goto st918;
		case 119: goto tr2506;
	}
	if ( (*p) < 40 ) {
		if ( 9 <= (*p) && (*p) <= 10 )
			goto tr2500;
	} else if ( (*p) > 41 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr2501;
	} else
		goto tr2500;
	goto tr2448;
tr2500:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1683;
tr2514:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1683;
st1683:
	if ( ++p == pe )
		goto _test_eof1683;
case 1683:
	goto st0;
tr2502:
	{ if (s->number64 <= (UINT32_MAX / 86400)) {
	                  s->number64 *= 86400;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st918;
tr2503:
	{ if (s->number64 <= (UINT32_MAX / 3600)) {
	                  s->number64 *= 3600;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st918;
tr2504:
	{ if (s->number64 <= (UINT32_MAX / 60)) {
	                  s->number64 *= 60;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st918;
tr2506:
	{ if (s->number64 <= (UINT32_MAX / 604800)) {
	                  s->number64 *= 604800;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st918;
st918:
	if ( ++p == pe )
		goto _test_eof918;
case 918:
	switch( (*p) ) {
		case 32: goto tr2500;
		case 59: goto tr2500;
	}
	if ( (*p) < 40 ) {
		if ( 9 <= (*p) && (*p) <= 10 )
			goto tr2500;
	} else if ( (*p) > 41 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr2507;
	} else
		goto tr2500;
	goto tr2448;
tr2508:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st919;
tr2507:
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st919;
tr2515:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st919;
st919:
	if ( ++p == pe )
		goto _test_eof919;
case 919:
	switch( (*p) ) {
		case 68: goto tr2509;
		case 72: goto tr2510;
		case 77: goto tr2511;
		case 83: goto st920;
		case 87: goto tr2513;
		case 100: goto tr2509;
		case 104: goto tr2510;
		case 109: goto tr2511;
		case 115: goto st920;
		case 119: goto tr2513;
	}
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr2508;
	goto tr2448;
tr2509:
	{ if (s->number64 <= (UINT32_MAX / 86400)) {
	                  s->number64 *= 86400;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st920;
tr2510:
	{ if (s->number64 <= (UINT32_MAX / 3600)) {
	                  s->number64 *= 3600;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st920;
tr2511:
	{ if (s->number64 <= (UINT32_MAX / 60)) {
	                  s->number64 *= 60;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st920;
tr2513:
	{ if (s->number64 <= (UINT32_MAX / 604800)) {
	                  s->number64 *= 604800;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st920;
st920:
	if ( ++p == pe )
		goto _test_eof920;
case 920:
	switch( (*p) ) {
		case 32: goto tr2514;
		case 59: goto tr2514;
	}
	if ( (*p) < 40 ) {
		if ( 9 <= (*p) && (*p) <= 10 )
			goto tr2514;
	} else if ( (*p) > 41 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr2515;
	} else
		goto tr2514;
	goto tr2448;
tr2499:
	{
		s->buffer_length = 0;
	}
	goto st921;
tr2516:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st921;
tr2493:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st921;
tr2530:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st921;
st921:
	if ( ++p == pe )
		goto _test_eof921;
case 921:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr2517;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr2516;
	goto tr77;
tr2487:
	{ if (s->number64 <= (UINT32_MAX / 86400)) {
	                  s->number64 *= 86400;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st922;
tr2488:
	{ if (s->number64 <= (UINT32_MAX / 3600)) {
	                  s->number64 *= 3600;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st922;
tr2489:
	{ if (s->number64 <= (UINT32_MAX / 60)) {
	                  s->number64 *= 60;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st922;
tr2491:
	{ if (s->number64 <= (UINT32_MAX / 604800)) {
	                  s->number64 *= 604800;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st922;
st922:
	if ( ++p == pe )
		goto _test_eof922;
case 922:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2483;
		case 32: goto tr2483;
		case 40: goto tr2484;
		case 41: goto tr2485;
		case 2058: goto tr2492;
		case 2107: goto tr2493;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2518;
	goto tr2448;
tr2519:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st923;
tr2518:
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st923;
tr2528:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st923;
st923:
	if ( ++p == pe )
		goto _test_eof923;
case 923:
	switch( (*p) ) {
		case 68: goto tr2520;
		case 72: goto tr2521;
		case 77: goto tr2522;
		case 83: goto st924;
		case 87: goto tr2524;
		case 100: goto tr2520;
		case 104: goto tr2521;
		case 109: goto tr2522;
		case 115: goto st924;
		case 119: goto tr2524;
	}
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr2519;
	goto tr2448;
tr2520:
	{ if (s->number64 <= (UINT32_MAX / 86400)) {
	                  s->number64 *= 86400;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st924;
tr2521:
	{ if (s->number64 <= (UINT32_MAX / 3600)) {
	                  s->number64 *= 3600;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st924;
tr2522:
	{ if (s->number64 <= (UINT32_MAX / 60)) {
	                  s->number64 *= 60;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st924;
tr2524:
	{ if (s->number64 <= (UINT32_MAX / 604800)) {
	                  s->number64 *= 604800;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st924;
st924:
	if ( ++p == pe )
		goto _test_eof924;
case 924:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2525;
		case 32: goto tr2525;
		case 40: goto tr2526;
		case 41: goto tr2527;
		case 2058: goto tr2529;
		case 2107: goto tr2530;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2528;
	goto tr2448;
tr2482:
	{
		s->buffer_length = 0;
	}
	goto st925;
tr2531:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st925;
tr2476:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st925;
tr2545:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st925;
st925:
	if ( ++p == pe )
		goto _test_eof925;
case 925:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr2532;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr2531;
	goto tr77;
tr2470:
	{ if (s->number64 <= (UINT32_MAX / 86400)) {
	                  s->number64 *= 86400;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st926;
tr2471:
	{ if (s->number64 <= (UINT32_MAX / 3600)) {
	                  s->number64 *= 3600;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st926;
tr2472:
	{ if (s->number64 <= (UINT32_MAX / 60)) {
	                  s->number64 *= 60;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st926;
tr2474:
	{ if (s->number64 <= (UINT32_MAX / 604800)) {
	                  s->number64 *= 604800;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st926;
st926:
	if ( ++p == pe )
		goto _test_eof926;
case 926:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2466;
		case 32: goto tr2466;
		case 40: goto tr2467;
		case 41: goto tr2468;
		case 2058: goto tr2475;
		case 2107: goto tr2476;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2533;
	goto tr2448;
tr2534:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st927;
tr2533:
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st927;
tr2543:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st927;
st927:
	if ( ++p == pe )
		goto _test_eof927;
case 927:
	switch( (*p) ) {
		case 68: goto tr2535;
		case 72: goto tr2536;
		case 77: goto tr2537;
		case 83: goto st928;
		case 87: goto tr2539;
		case 100: goto tr2535;
		case 104: goto tr2536;
		case 109: goto tr2537;
		case 115: goto st928;
		case 119: goto tr2539;
	}
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr2534;
	goto tr2448;
tr2535:
	{ if (s->number64 <= (UINT32_MAX / 86400)) {
	                  s->number64 *= 86400;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st928;
tr2536:
	{ if (s->number64 <= (UINT32_MAX / 3600)) {
	                  s->number64 *= 3600;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st928;
tr2537:
	{ if (s->number64 <= (UINT32_MAX / 60)) {
	                  s->number64 *= 60;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st928;
tr2539:
	{ if (s->number64 <= (UINT32_MAX / 604800)) {
	                  s->number64 *= 604800;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st928;
st928:
	if ( ++p == pe )
		goto _test_eof928;
case 928:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2540;
		case 32: goto tr2540;
		case 40: goto tr2541;
		case 41: goto tr2542;
		case 2058: goto tr2544;
		case 2107: goto tr2545;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2543;
	goto tr2448;
tr2465:
	{
		s->buffer_length = 0;
	}
	goto st929;
tr2546:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st929;
tr2459:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st929;
tr2560:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st929;
st929:
	if ( ++p == pe )
		goto _test_eof929;
case 929:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr2547;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr2546;
	goto tr77;
tr2453:
	{ if (s->number64 <= (UINT32_MAX / 86400)) {
	                  s->number64 *= 86400;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st930;
tr2454:
	{ if (s->number64 <= (UINT32_MAX / 3600)) {
	                  s->number64 *= 3600;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st930;
tr2455:
	{ if (s->number64 <= (UINT32_MAX / 60)) {
	                  s->number64 *= 60;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st930;
tr2457:
	{ if (s->number64 <= (UINT32_MAX / 604800)) {
	                  s->number64 *= 604800;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st930;
st930:
	if ( ++p == pe )
		goto _test_eof930;
case 930:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2449;
		case 32: goto tr2449;
		case 40: goto tr2450;
		case 41: goto tr2451;
		case 2058: goto tr2458;
		case 2107: goto tr2459;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2548;
	goto tr2448;
tr2549:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st931;
tr2548:
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st931;
tr2558:
	{
		if (s->number64 + s->number64_tmp < UINT32_MAX) {
			s->number64 += s->number64_tmp;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st931;
st931:
	if ( ++p == pe )
		goto _test_eof931;
case 931:
	switch( (*p) ) {
		case 68: goto tr2550;
		case 72: goto tr2551;
		case 77: goto tr2552;
		case 83: goto st932;
		case 87: goto tr2554;
		case 100: goto tr2550;
		case 104: goto tr2551;
		case 109: goto tr2552;
		case 115: goto st932;
		case 119: goto tr2554;
	}
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr2549;
	goto tr2448;
tr2550:
	{ if (s->number64 <= (UINT32_MAX / 86400)) {
	                  s->number64 *= 86400;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st932;
tr2551:
	{ if (s->number64 <= (UINT32_MAX / 3600)) {
	                  s->number64 *= 3600;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st932;
tr2552:
	{ if (s->number64 <= (UINT32_MAX / 60)) {
	                  s->number64 *= 60;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st932;
tr2554:
	{ if (s->number64 <= (UINT32_MAX / 604800)) {
	                  s->number64 *= 604800;
	              } else {
	                  WARN(ZS_NUMBER32_OVERFLOW);
	                  p--; {goto st319;}
	              }
	            }
	goto st932;
st932:
	if ( ++p == pe )
		goto _test_eof932;
case 932:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2555;
		case 32: goto tr2555;
		case 40: goto tr2556;
		case 41: goto tr2557;
		case 2058: goto tr2559;
		case 2107: goto tr2560;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2558;
	goto tr2448;
tr2447:
	{
		s->buffer_length = 0;
	}
	goto st933;
tr2561:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st933;
tr2441:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st933;
st933:
	if ( ++p == pe )
		goto _test_eof933;
case 933:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr2562;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr2561;
	goto tr77;
tr2435:
	{
		s->buffer_length = 0;
	}
	goto st934;
tr2563:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st934;
tr2428:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		s->buffer_length = 0;
	}
	goto st934;
st934:
	if ( ++p == pe )
		goto _test_eof934;
case 934:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr2564;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr2563;
	goto tr77;
tr2423:
	{
		s->buffer_length = 0;
	}
	goto st935;
tr2565:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st935;
tr2417:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		s->buffer_length = 0;
	}
	goto st935;
st935:
	if ( ++p == pe )
		goto _test_eof935;
case 935:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr2566;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr2565;
	goto tr77;
st936:
	if ( ++p == pe )
		goto _test_eof936;
case 936:
	switch( (*p) ) {
		case 32: goto tr77;
		case 59: goto tr77;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr77;
	} else if ( (*p) >= 9 )
		goto tr77;
	goto tr2567;
tr2567:
	{
		if (rdata_tail <= rdata_stop) {
			s->item_length_location = rdata_tail++;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{ p--; {stack[top++] = 937;goto st330;} }
	goto st937;
st937:
	if ( ++p == pe )
		goto _test_eof937;
case 937:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2568;
		case 32: goto tr2568;
		case 40: goto tr2569;
		case 41: goto tr2570;
		case 2058: goto tr2571;
		case 2107: goto tr2572;
	}
	goto tr77;
tr2575:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st938;
tr2576:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st938;
tr2577:
	{
		s->line_counter++;
	}
	goto st938;
tr2581:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 938; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st938;
tr2568:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st938;
tr2569:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st938;
tr2570:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st938;
tr2571:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st938;
st938:
	if ( ++p == pe )
		goto _test_eof938;
case 938:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st938;
		case 32: goto st938;
		case 40: goto tr2575;
		case 41: goto tr2576;
		case 2058: goto tr2577;
		case 2107: goto tr2578;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr2573;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr2573;
	} else
		goto tr2573;
	goto tr77;
tr2573:
	{
		if (rdata_tail <= rdata_stop) {
			s->item_length_location = rdata_tail++;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{ p--; {stack[top++] = 939;goto st330;} }
	goto st939;
st939:
	if ( ++p == pe )
		goto _test_eof939;
case 939:
	switch( (*p) ) {
		case 32: goto tr2579;
		case 59: goto tr2579;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2579;
	} else if ( (*p) >= 9 )
		goto tr2579;
	goto tr77;
tr2579:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1684;
st1684:
	if ( ++p == pe )
		goto _test_eof1684;
case 1684:
	goto st0;
tr2578:
	{
		s->buffer_length = 0;
	}
	goto st940;
tr2580:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st940;
tr2572:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st940;
st940:
	if ( ++p == pe )
		goto _test_eof940;
case 940:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr2581;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr2580;
	goto tr77;
st941:
	if ( ++p == pe )
		goto _test_eof941;
case 941:
	switch( (*p) ) {
		case 42: goto tr2582;
		case 92: goto tr2582;
		case 95: goto tr2582;
	}
	if ( (*p) < 64 ) {
		if ( 45 <= (*p) && (*p) <= 57 )
			goto tr2582;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr2582;
	} else
		goto tr2582;
	goto tr77;
tr2582:
	{
		s->dname = rdata_tail;
	}
	{ p--; {stack[top++] = 942;goto st321;} }
	goto st942;
st942:
	if ( ++p == pe )
		goto _test_eof942;
case 942:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2583;
		case 32: goto tr2583;
		case 40: goto tr2584;
		case 41: goto tr2585;
		case 2058: goto tr2586;
		case 2107: goto tr2587;
	}
	goto tr77;
tr2589:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st943;
tr2590:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st943;
tr2592:
	{
		s->line_counter++;
	}
	goto st943;
tr2596:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 943; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st943;
tr2583:
	{
		rdata_tail += s->dname_tmp_length;
	}
	goto st943;
tr2584:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st943;
tr2585:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st943;
tr2586:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	goto st943;
st943:
	if ( ++p == pe )
		goto _test_eof943;
case 943:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st943;
		case 32: goto st943;
		case 40: goto tr2589;
		case 41: goto tr2590;
		case 42: goto tr2591;
		case 92: goto tr2591;
		case 95: goto tr2591;
		case 2058: goto tr2592;
		case 2107: goto tr2593;
	}
	if ( _widec < 64 ) {
		if ( 45 <= _widec && _widec <= 57 )
			goto tr2591;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr2591;
	} else
		goto tr2591;
	goto tr77;
tr2591:
	{
		s->dname = rdata_tail;
	}
	{ p--; {stack[top++] = 944;goto st321;} }
	goto st944;
st944:
	if ( ++p == pe )
		goto _test_eof944;
case 944:
	switch( (*p) ) {
		case 32: goto tr2594;
		case 59: goto tr2594;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2594;
	} else if ( (*p) >= 9 )
		goto tr2594;
	goto tr77;
tr2594:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1685;
st1685:
	if ( ++p == pe )
		goto _test_eof1685;
case 1685:
	goto st0;
tr2593:
	{
		s->buffer_length = 0;
	}
	goto st945;
tr2595:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st945;
tr2587:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		s->buffer_length = 0;
	}
	goto st945;
st945:
	if ( ++p == pe )
		goto _test_eof945;
case 945:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr2596;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr2595;
	goto tr77;
st946:
	if ( ++p == pe )
		goto _test_eof946;
case 946:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr2597;
	goto tr2429;
tr2597:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st947;
tr2601:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st947;
st947:
	if ( ++p == pe )
		goto _test_eof947;
case 947:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2598;
		case 32: goto tr2598;
		case 40: goto tr2599;
		case 41: goto tr2600;
		case 2058: goto tr2602;
		case 2107: goto tr2603;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2601;
	goto tr2429;
tr2605:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st948;
tr2606:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st948;
tr2608:
	{
		s->line_counter++;
	}
	goto st948;
tr2612:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 948; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st948;
tr2598:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st948;
tr2599:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st948;
tr2600:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st948;
tr2602:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st948;
st948:
	if ( ++p == pe )
		goto _test_eof948;
case 948:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st948;
		case 32: goto st948;
		case 40: goto tr2605;
		case 41: goto tr2606;
		case 42: goto tr2607;
		case 92: goto tr2607;
		case 95: goto tr2607;
		case 2058: goto tr2608;
		case 2107: goto tr2609;
	}
	if ( _widec < 64 ) {
		if ( 45 <= _widec && _widec <= 57 )
			goto tr2607;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr2607;
	} else
		goto tr2607;
	goto tr77;
tr2607:
	{
		s->dname = rdata_tail;
	}
	{ p--; {stack[top++] = 949;goto st321;} }
	goto st949;
st949:
	if ( ++p == pe )
		goto _test_eof949;
case 949:
	switch( (*p) ) {
		case 32: goto tr2610;
		case 59: goto tr2610;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2610;
	} else if ( (*p) >= 9 )
		goto tr2610;
	goto tr77;
tr2610:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1686;
st1686:
	if ( ++p == pe )
		goto _test_eof1686;
case 1686:
	goto st0;
tr2609:
	{
		s->buffer_length = 0;
	}
	goto st950;
tr2611:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st950;
tr2603:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st950;
st950:
	if ( ++p == pe )
		goto _test_eof950;
case 950:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr2612;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr2611;
	goto tr77;
st951:
	if ( ++p == pe )
		goto _test_eof951;
case 951:
	switch( (*p) ) {
		case 32: goto tr2614;
		case 59: goto tr2614;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2614;
	} else if ( (*p) >= 9 )
		goto tr2614;
	goto tr2613;
tr2623:
	{
		if (rdata_tail <= rdata_stop) {
			s->item_length_location = rdata_tail++;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{ p--; {stack[top++] = 952;goto st330;} }
	goto st952;
tr2613:
	{
		s->long_string = true;
	}
	{
		if (rdata_tail <= rdata_stop) {
			s->item_length_location = rdata_tail++;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{ p--; {stack[top++] = 952;goto st330;} }
	goto st952;
st952:
	if ( ++p == pe )
		goto _test_eof952;
case 952:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2615;
		case 32: goto tr2615;
		case 40: goto tr2616;
		case 41: goto tr2617;
		case 3082: goto tr2618;
		case 3131: goto tr2619;
		case 3338: goto tr2620;
		case 3387: goto tr2620;
		case 3594: goto tr2621;
		case 3643: goto tr2622;
	}
	goto tr2614;
tr2625:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st953;
tr2626:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st953;
tr2627:
	{
		s->line_counter++;
	}
	goto st953;
tr2633:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 953; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st953;
tr2615:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st953;
tr2616:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st953;
tr2617:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st953;
tr2618:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st953;
st953:
	if ( ++p == pe )
		goto _test_eof953;
case 953:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st953;
		case 32: goto st953;
		case 40: goto tr2625;
		case 41: goto tr2626;
		case 3082: goto tr2627;
		case 3131: goto tr2628;
		case 3338: goto tr2629;
		case 3387: goto tr2629;
		case 3594: goto tr2630;
		case 3643: goto tr2631;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr2623;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr2623;
	} else
		goto tr2623;
	goto tr2614;
tr2628:
	{
		s->buffer_length = 0;
	}
	goto st954;
tr2632:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st954;
tr2619:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st954;
st954:
	if ( ++p == pe )
		goto _test_eof954;
case 954:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr2633;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr2632;
	goto tr2614;
tr2620:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->long_string = false;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1687;
tr2629:
	{
		s->long_string = false;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1687;
st1687:
	if ( ++p == pe )
		goto _test_eof1687;
case 1687:
	goto st0;
tr2621:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	{
		s->long_string = false;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1688;
tr2630:
	{
		s->line_counter++;
	}
	{
		s->long_string = false;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1688;
st1688:
	if ( ++p == pe )
		goto _test_eof1688;
case 1688:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st953;
		case 32: goto st953;
		case 40: goto tr2625;
		case 41: goto tr2626;
		case 3082: goto tr2627;
		case 3131: goto tr2628;
		case 3338: goto tr2629;
		case 3387: goto tr2629;
		case 3594: goto tr2630;
		case 3643: goto tr2631;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr2623;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr2623;
	} else
		goto tr2623;
	goto tr2614;
tr2622:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	{
		s->long_string = false;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1689;
tr2631:
	{
		s->buffer_length = 0;
	}
	{
		s->long_string = false;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1689;
st1689:
	if ( ++p == pe )
		goto _test_eof1689;
case 1689:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr2633;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr2632;
	goto tr2614;
st955:
	if ( ++p == pe )
		goto _test_eof955;
case 955:
	if ( (*p) == 46 )
		goto tr2634;
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 58 )
			goto tr2634;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr2634;
	} else
		goto tr2634;
	goto tr2406;
tr2636:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st956;
tr2634:
	{
		s->buffer_length = 0;
	}
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st956;
st956:
	if ( ++p == pe )
		goto _test_eof956;
case 956:
	switch( (*p) ) {
		case 32: goto tr2635;
		case 46: goto tr2636;
		case 59: goto tr2635;
	}
	if ( (*p) < 48 ) {
		if ( (*p) > 10 ) {
			if ( 40 <= (*p) && (*p) <= 41 )
				goto tr2635;
		} else if ( (*p) >= 9 )
			goto tr2635;
	} else if ( (*p) > 58 ) {
		if ( (*p) > 70 ) {
			if ( 97 <= (*p) && (*p) <= 102 )
				goto tr2636;
		} else if ( (*p) >= 65 )
			goto tr2636;
	} else
		goto tr2636;
	goto tr2406;
tr2635:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
		rdata_tail += ZS_INET6_ADDR_LENGTH;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1690;
st1690:
	if ( ++p == pe )
		goto _test_eof1690;
case 1690:
	goto st0;
st957:
	if ( ++p == pe )
		goto _test_eof957;
case 957:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr2638;
	goto tr2637;
tr2642:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st958;
tr2638:
	{
		memset(&(s->loc), 0, sizeof(s->loc));
		// Defaults.
		s->loc.siz = 100;
		s->loc.vp  = 1000;
		s->loc.hp  = 1000000;
		s->loc.lat_sign  = 1;
		s->loc.long_sign = 1;
		s->loc.alt_sign  = 1;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st958;
st958:
	if ( ++p == pe )
		goto _test_eof958;
case 958:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2639;
		case 32: goto tr2639;
		case 40: goto tr2640;
		case 41: goto tr2641;
		case 2058: goto tr2643;
		case 2107: goto tr2644;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2642;
	goto tr2637;
tr2646:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st959;
tr2647:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st959;
tr2651:
	{
		s->line_counter++;
	}
	goto st959;
tr2894:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 959; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st959;
tr2639:
	{
		if (s->number64 <= 90) {
			s->loc.d1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	goto st959;
tr2640:
	{
		if (s->number64 <= 90) {
			s->loc.d1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st959;
tr2641:
	{
		if (s->number64 <= 90) {
			s->loc.d1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st959;
tr2643:
	{
		if (s->number64 <= 90) {
			s->loc.d1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st959;
st959:
	if ( ++p == pe )
		goto _test_eof959;
case 959:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st959;
		case 32: goto st959;
		case 40: goto tr2646;
		case 41: goto tr2647;
		case 78: goto st964;
		case 83: goto st1006;
		case 2058: goto tr2651;
		case 2107: goto tr2652;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2648;
	goto tr2637;
tr2648:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st960;
tr2656:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st960;
st960:
	if ( ++p == pe )
		goto _test_eof960;
case 960:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2653;
		case 32: goto tr2653;
		case 40: goto tr2654;
		case 41: goto tr2655;
		case 2058: goto tr2657;
		case 2107: goto tr2658;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2656;
	goto tr2637;
tr2660:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st961;
tr2661:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st961;
tr2663:
	{
		s->line_counter++;
	}
	goto st961;
tr2892:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 961; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st961;
tr2653:
	{
		if (s->number64 <= 59) {
			s->loc.m1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	goto st961;
tr2654:
	{
		if (s->number64 <= 59) {
			s->loc.m1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st961;
tr2655:
	{
		if (s->number64 <= 59) {
			s->loc.m1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st961;
tr2657:
	{
		if (s->number64 <= 59) {
			s->loc.m1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st961;
st961:
	if ( ++p == pe )
		goto _test_eof961;
case 961:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st961;
		case 32: goto st961;
		case 40: goto tr2660;
		case 41: goto tr2661;
		case 78: goto st964;
		case 83: goto st1006;
		case 2058: goto tr2663;
		case 2107: goto tr2664;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2662;
	goto tr2637;
tr2669:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st962;
tr2662:
	{
		s->decimals = 3;
	}
	{
		s->decimal_counter = 0;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st962;
st962:
	if ( ++p == pe )
		goto _test_eof962;
case 962:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2665;
		case 32: goto tr2665;
		case 40: goto tr2666;
		case 41: goto tr2667;
		case 46: goto st1008;
		case 2058: goto tr2670;
		case 2107: goto tr2671;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2669;
	goto tr2637;
tr2673:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st963;
tr2674:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st963;
tr2675:
	{
		s->line_counter++;
	}
	goto st963;
tr2883:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 963; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st963;
tr2665:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	goto st963;
tr2666:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st963;
tr2667:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st963;
tr2670:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st963;
tr2884:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	goto st963;
tr2885:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st963;
tr2886:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st963;
tr2888:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st963;
st963:
	if ( ++p == pe )
		goto _test_eof963;
case 963:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st963;
		case 32: goto st963;
		case 40: goto tr2673;
		case 41: goto tr2674;
		case 78: goto st964;
		case 83: goto st1006;
		case 2058: goto tr2675;
		case 2107: goto tr2676;
	}
	goto tr2637;
st964:
	if ( ++p == pe )
		goto _test_eof964;
case 964:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st965;
		case 32: goto st965;
		case 40: goto tr2678;
		case 41: goto tr2679;
		case 2058: goto tr2680;
		case 2107: goto tr2681;
	}
	goto tr2637;
tr2678:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st965;
tr2679:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st965;
tr2680:
	{
		s->line_counter++;
	}
	goto st965;
tr2876:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 965; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st965;
tr2877:
	{
		s->loc.lat_sign = -1;
	}
	goto st965;
tr2878:
	{
		s->loc.lat_sign = -1;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st965;
tr2879:
	{
		s->loc.lat_sign = -1;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st965;
tr2880:
	{
		s->loc.lat_sign = -1;
	}
	{
		s->line_counter++;
	}
	goto st965;
st965:
	if ( ++p == pe )
		goto _test_eof965;
case 965:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st965;
		case 32: goto st965;
		case 40: goto tr2678;
		case 41: goto tr2679;
		case 2058: goto tr2680;
		case 2107: goto tr2681;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2682;
	goto tr2637;
tr2682:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st966;
tr2686:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st966;
st966:
	if ( ++p == pe )
		goto _test_eof966;
case 966:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2683;
		case 32: goto tr2683;
		case 40: goto tr2684;
		case 41: goto tr2685;
		case 2058: goto tr2687;
		case 2107: goto tr2688;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2686;
	goto tr2637;
tr2690:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st967;
tr2691:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st967;
tr2695:
	{
		s->line_counter++;
	}
	goto st967;
tr2874:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 967; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st967;
tr2683:
	{
		if (s->number64 <= 180) {
			s->loc.d2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	goto st967;
tr2684:
	{
		if (s->number64 <= 180) {
			s->loc.d2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st967;
tr2685:
	{
		if (s->number64 <= 180) {
			s->loc.d2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st967;
tr2687:
	{
		if (s->number64 <= 180) {
			s->loc.d2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st967;
st967:
	if ( ++p == pe )
		goto _test_eof967;
case 967:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st967;
		case 32: goto st967;
		case 40: goto tr2690;
		case 41: goto tr2691;
		case 69: goto st972;
		case 87: goto st999;
		case 2058: goto tr2695;
		case 2107: goto tr2696;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2692;
	goto tr2637;
tr2692:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st968;
tr2700:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st968;
st968:
	if ( ++p == pe )
		goto _test_eof968;
case 968:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2697;
		case 32: goto tr2697;
		case 40: goto tr2698;
		case 41: goto tr2699;
		case 2058: goto tr2701;
		case 2107: goto tr2702;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2700;
	goto tr2637;
tr2704:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st969;
tr2705:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st969;
tr2707:
	{
		s->line_counter++;
	}
	goto st969;
tr2872:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 969; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st969;
tr2697:
	{
		if (s->number64 <= 59) {
			s->loc.m2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	goto st969;
tr2698:
	{
		if (s->number64 <= 59) {
			s->loc.m2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st969;
tr2699:
	{
		if (s->number64 <= 59) {
			s->loc.m2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st969;
tr2701:
	{
		if (s->number64 <= 59) {
			s->loc.m2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st969;
st969:
	if ( ++p == pe )
		goto _test_eof969;
case 969:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st969;
		case 32: goto st969;
		case 40: goto tr2704;
		case 41: goto tr2705;
		case 69: goto st972;
		case 87: goto st999;
		case 2058: goto tr2707;
		case 2107: goto tr2708;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2706;
	goto tr2637;
tr2713:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st970;
tr2706:
	{
		s->decimals = 3;
	}
	{
		s->decimal_counter = 0;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st970;
st970:
	if ( ++p == pe )
		goto _test_eof970;
case 970:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2709;
		case 32: goto tr2709;
		case 40: goto tr2710;
		case 41: goto tr2711;
		case 46: goto st1001;
		case 2058: goto tr2714;
		case 2107: goto tr2715;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2713;
	goto tr2637;
tr2717:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st971;
tr2718:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st971;
tr2719:
	{
		s->line_counter++;
	}
	goto st971;
tr2863:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 971; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st971;
tr2709:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	goto st971;
tr2710:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st971;
tr2711:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st971;
tr2714:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st971;
tr2864:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	goto st971;
tr2865:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st971;
tr2866:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st971;
tr2868:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st971;
st971:
	if ( ++p == pe )
		goto _test_eof971;
case 971:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st971;
		case 32: goto st971;
		case 40: goto tr2717;
		case 41: goto tr2718;
		case 69: goto st972;
		case 87: goto st999;
		case 2058: goto tr2719;
		case 2107: goto tr2720;
	}
	goto tr2637;
st972:
	if ( ++p == pe )
		goto _test_eof972;
case 972:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st973;
		case 32: goto st973;
		case 40: goto tr2722;
		case 41: goto tr2723;
		case 2058: goto tr2724;
		case 2107: goto tr2725;
	}
	goto tr2637;
tr2722:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st973;
tr2723:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st973;
tr2724:
	{
		s->line_counter++;
	}
	goto st973;
tr2856:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 973; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st973;
tr2857:
	{
		s->loc.long_sign = -1;
	}
	goto st973;
tr2858:
	{
		s->loc.long_sign = -1;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st973;
tr2859:
	{
		s->loc.long_sign = -1;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st973;
tr2860:
	{
		s->loc.long_sign = -1;
	}
	{
		s->line_counter++;
	}
	goto st973;
st973:
	if ( ++p == pe )
		goto _test_eof973;
case 973:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st973;
		case 32: goto st973;
		case 40: goto tr2722;
		case 41: goto tr2723;
		case 45: goto st974;
		case 2058: goto tr2724;
		case 2107: goto tr2725;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2727;
	goto tr2637;
st974:
	if ( ++p == pe )
		goto _test_eof974;
case 974:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr2728;
	goto tr2637;
tr2733:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st975;
tr2727:
	{
		s->decimals = 2;
	}
	{
		s->decimal_counter = 0;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st975;
tr2728:
	{
		s->loc.alt_sign = -1;
	}
	{
		s->decimals = 2;
	}
	{
		s->decimal_counter = 0;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st975;
st975:
	if ( ++p == pe )
		goto _test_eof975;
case 975:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2729;
		case 32: goto tr2729;
		case 40: goto tr2730;
		case 41: goto tr2731;
		case 46: goto st995;
		case 109: goto tr2734;
		case 3082: goto tr2735;
		case 3131: goto tr2736;
		case 3338: goto tr2737;
		case 3387: goto tr2737;
		case 3594: goto tr2738;
		case 3643: goto tr2739;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2733;
	goto tr2637;
tr2741:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st976;
tr2742:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st976;
tr2744:
	{
		s->line_counter++;
	}
	goto st976;
tr2843:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 976; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st976;
tr2729:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	goto st976;
tr2730:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st976;
tr2731:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st976;
tr2735:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st976;
tr2844:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	goto st976;
tr2845:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st976;
tr2846:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st976;
tr2849:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st976;
st976:
	if ( ++p == pe )
		goto _test_eof976;
case 976:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st976;
		case 32: goto st976;
		case 40: goto tr2741;
		case 41: goto tr2742;
		case 3082: goto tr2744;
		case 3131: goto tr2745;
		case 3338: goto tr2746;
		case 3387: goto tr2746;
		case 3594: goto tr2747;
		case 3643: goto tr2748;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2743;
	goto tr2637;
tr2753:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st977;
tr2743:
	{
		s->decimals = 2;
	}
	{
		s->decimal_counter = 0;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st977;
st977:
	if ( ++p == pe )
		goto _test_eof977;
case 977:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2749;
		case 32: goto tr2749;
		case 40: goto tr2750;
		case 41: goto tr2751;
		case 46: goto st991;
		case 109: goto tr2754;
		case 3082: goto tr2755;
		case 3131: goto tr2756;
		case 3338: goto tr2757;
		case 3387: goto tr2757;
		case 3594: goto tr2758;
		case 3643: goto tr2759;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2753;
	goto tr2637;
tr2761:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st978;
tr2762:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st978;
tr2764:
	{
		s->line_counter++;
	}
	goto st978;
tr2830:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 978; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st978;
tr2749:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	goto st978;
tr2750:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st978;
tr2751:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st978;
tr2755:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st978;
tr2831:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	goto st978;
tr2832:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st978;
tr2833:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st978;
tr2836:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st978;
st978:
	if ( ++p == pe )
		goto _test_eof978;
case 978:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st978;
		case 32: goto st978;
		case 40: goto tr2761;
		case 41: goto tr2762;
		case 3082: goto tr2764;
		case 3131: goto tr2765;
		case 3338: goto tr2746;
		case 3387: goto tr2746;
		case 3594: goto tr2766;
		case 3643: goto tr2767;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2763;
	goto tr2637;
tr2772:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st979;
tr2763:
	{
		s->decimals = 2;
	}
	{
		s->decimal_counter = 0;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st979;
st979:
	if ( ++p == pe )
		goto _test_eof979;
case 979:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2768;
		case 32: goto tr2768;
		case 40: goto tr2769;
		case 41: goto tr2770;
		case 46: goto st987;
		case 109: goto tr2773;
		case 3082: goto tr2774;
		case 3131: goto tr2775;
		case 3338: goto tr2776;
		case 3387: goto tr2776;
		case 3594: goto tr2777;
		case 3643: goto tr2778;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2772;
	goto tr2637;
tr2780:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st980;
tr2781:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st980;
tr2783:
	{
		s->line_counter++;
	}
	goto st980;
tr2817:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 980; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st980;
tr2768:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	goto st980;
tr2769:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st980;
tr2770:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st980;
tr2774:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st980;
tr2818:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	goto st980;
tr2819:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st980;
tr2820:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st980;
tr2823:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st980;
st980:
	if ( ++p == pe )
		goto _test_eof980;
case 980:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st980;
		case 32: goto st980;
		case 40: goto tr2780;
		case 41: goto tr2781;
		case 3082: goto tr2783;
		case 3131: goto tr2784;
		case 3338: goto tr2746;
		case 3387: goto tr2746;
		case 3594: goto tr2785;
		case 3643: goto tr2786;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2782;
	goto tr2637;
tr2791:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st981;
tr2782:
	{
		s->decimals = 2;
	}
	{
		s->decimal_counter = 0;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st981;
st981:
	if ( ++p == pe )
		goto _test_eof981;
case 981:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2787;
		case 32: goto tr2787;
		case 40: goto tr2788;
		case 41: goto tr2789;
		case 46: goto st984;
		case 109: goto tr2787;
		case 3082: goto tr2792;
		case 3131: goto tr2793;
		case 3338: goto tr2794;
		case 3387: goto tr2794;
		case 3594: goto tr2795;
		case 3643: goto tr2796;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2791;
	goto tr2637;
tr2798:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st982;
tr2799:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st982;
tr2800:
	{
		s->line_counter++;
	}
	goto st982;
tr2805:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 982; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st982;
tr2787:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.vp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	goto st982;
tr2788:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.vp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st982;
tr2789:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.vp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st982;
tr2792:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.vp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st982;
tr2806:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.vp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	goto st982;
tr2807:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.vp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st982;
tr2808:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.vp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st982;
tr2810:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.vp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st982;
st982:
	if ( ++p == pe )
		goto _test_eof982;
case 982:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st982;
		case 32: goto st982;
		case 40: goto tr2798;
		case 41: goto tr2799;
		case 3082: goto tr2800;
		case 3131: goto tr2801;
		case 3338: goto tr2746;
		case 3387: goto tr2746;
		case 3594: goto tr2802;
		case 3643: goto tr2803;
	}
	goto tr2637;
tr2801:
	{
		s->buffer_length = 0;
	}
	goto st983;
tr2804:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st983;
tr2793:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.vp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st983;
tr2811:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.vp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st983;
st983:
	if ( ++p == pe )
		goto _test_eof983;
case 983:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr2805;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr2804;
	goto tr2637;
tr2737:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1691;
tr2746:
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1691;
tr2757:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1691;
tr2776:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1691;
tr2794:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.vp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1691;
tr2812:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.vp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1691;
tr2825:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1691;
tr2838:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1691;
tr2851:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1691;
st1691:
	if ( ++p == pe )
		goto _test_eof1691;
case 1691:
	goto st0;
tr2802:
	{
		s->line_counter++;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1692;
tr2795:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.vp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1692;
tr2813:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.vp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1692;
st1692:
	if ( ++p == pe )
		goto _test_eof1692;
case 1692:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st982;
		case 32: goto st982;
		case 40: goto tr2798;
		case 41: goto tr2799;
		case 3082: goto tr2800;
		case 3131: goto tr2801;
		case 3338: goto tr2746;
		case 3387: goto tr2746;
		case 3594: goto tr2802;
		case 3643: goto tr2803;
	}
	goto tr2637;
tr2803:
	{
		s->buffer_length = 0;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1693;
tr2796:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.vp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1693;
tr2814:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.vp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1693;
st1693:
	if ( ++p == pe )
		goto _test_eof1693;
case 1693:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr2805;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr2804;
	goto tr2637;
st984:
	if ( ++p == pe )
		goto _test_eof984;
case 984:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2806;
		case 32: goto tr2806;
		case 40: goto tr2807;
		case 41: goto tr2808;
		case 109: goto tr2806;
		case 3082: goto tr2810;
		case 3131: goto tr2811;
		case 3338: goto tr2812;
		case 3387: goto tr2812;
		case 3594: goto tr2813;
		case 3643: goto tr2814;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2809;
	goto tr2637;
tr2809:
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->decimal_counter++;
	}
	goto st985;
tr2815:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->decimal_counter++;
	}
	goto st985;
st985:
	if ( ++p == pe )
		goto _test_eof985;
case 985:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2787;
		case 32: goto tr2787;
		case 40: goto tr2788;
		case 41: goto tr2789;
		case 109: goto tr2787;
		case 3082: goto tr2792;
		case 3131: goto tr2793;
		case 3338: goto tr2794;
		case 3387: goto tr2794;
		case 3594: goto tr2795;
		case 3643: goto tr2796;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2815;
	goto tr2637;
tr2784:
	{
		s->buffer_length = 0;
	}
	goto st986;
tr2816:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st986;
tr2775:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st986;
tr2824:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st986;
st986:
	if ( ++p == pe )
		goto _test_eof986;
case 986:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr2817;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr2816;
	goto tr2637;
tr2785:
	{
		s->line_counter++;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1694;
tr2777:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1694;
tr2826:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1694;
st1694:
	if ( ++p == pe )
		goto _test_eof1694;
case 1694:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st980;
		case 32: goto st980;
		case 40: goto tr2780;
		case 41: goto tr2781;
		case 3082: goto tr2783;
		case 3131: goto tr2784;
		case 3338: goto tr2746;
		case 3387: goto tr2746;
		case 3594: goto tr2785;
		case 3643: goto tr2786;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2782;
	goto tr2637;
tr2786:
	{
		s->buffer_length = 0;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1695;
tr2778:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1695;
tr2827:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1695;
st1695:
	if ( ++p == pe )
		goto _test_eof1695;
case 1695:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr2817;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr2816;
	goto tr2637;
st987:
	if ( ++p == pe )
		goto _test_eof987;
case 987:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2818;
		case 32: goto tr2818;
		case 40: goto tr2819;
		case 41: goto tr2820;
		case 109: goto tr2822;
		case 3082: goto tr2823;
		case 3131: goto tr2824;
		case 3338: goto tr2825;
		case 3387: goto tr2825;
		case 3594: goto tr2826;
		case 3643: goto tr2827;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2821;
	goto tr2637;
tr2821:
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->decimal_counter++;
	}
	goto st988;
tr2828:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->decimal_counter++;
	}
	goto st988;
st988:
	if ( ++p == pe )
		goto _test_eof988;
case 988:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2768;
		case 32: goto tr2768;
		case 40: goto tr2769;
		case 41: goto tr2770;
		case 109: goto tr2773;
		case 3082: goto tr2774;
		case 3131: goto tr2775;
		case 3338: goto tr2776;
		case 3387: goto tr2776;
		case 3594: goto tr2777;
		case 3643: goto tr2778;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2828;
	goto tr2637;
tr2773:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	goto st989;
tr2822:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.hp = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	goto st989;
st989:
	if ( ++p == pe )
		goto _test_eof989;
case 989:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st980;
		case 32: goto st980;
		case 40: goto tr2780;
		case 41: goto tr2781;
		case 3082: goto tr2783;
		case 3131: goto tr2784;
		case 3338: goto tr2746;
		case 3387: goto tr2746;
		case 3594: goto tr2785;
		case 3643: goto tr2786;
	}
	goto tr2637;
tr2765:
	{
		s->buffer_length = 0;
	}
	goto st990;
tr2829:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st990;
tr2756:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st990;
tr2837:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st990;
st990:
	if ( ++p == pe )
		goto _test_eof990;
case 990:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr2830;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr2829;
	goto tr2637;
tr2766:
	{
		s->line_counter++;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1696;
tr2758:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1696;
tr2839:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1696;
st1696:
	if ( ++p == pe )
		goto _test_eof1696;
case 1696:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st978;
		case 32: goto st978;
		case 40: goto tr2761;
		case 41: goto tr2762;
		case 3082: goto tr2764;
		case 3131: goto tr2765;
		case 3338: goto tr2746;
		case 3387: goto tr2746;
		case 3594: goto tr2766;
		case 3643: goto tr2767;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2763;
	goto tr2637;
tr2767:
	{
		s->buffer_length = 0;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1697;
tr2759:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1697;
tr2840:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1697;
st1697:
	if ( ++p == pe )
		goto _test_eof1697;
case 1697:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr2830;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr2829;
	goto tr2637;
st991:
	if ( ++p == pe )
		goto _test_eof991;
case 991:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2831;
		case 32: goto tr2831;
		case 40: goto tr2832;
		case 41: goto tr2833;
		case 109: goto tr2835;
		case 3082: goto tr2836;
		case 3131: goto tr2837;
		case 3338: goto tr2838;
		case 3387: goto tr2838;
		case 3594: goto tr2839;
		case 3643: goto tr2840;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2834;
	goto tr2637;
tr2834:
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->decimal_counter++;
	}
	goto st992;
tr2841:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->decimal_counter++;
	}
	goto st992;
st992:
	if ( ++p == pe )
		goto _test_eof992;
case 992:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2749;
		case 32: goto tr2749;
		case 40: goto tr2750;
		case 41: goto tr2751;
		case 109: goto tr2754;
		case 3082: goto tr2755;
		case 3131: goto tr2756;
		case 3338: goto tr2757;
		case 3387: goto tr2757;
		case 3594: goto tr2758;
		case 3643: goto tr2759;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2841;
	goto tr2637;
tr2754:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	goto st993;
tr2835:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 9000000000ULL) {
			s->loc.siz = s->number64;
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	goto st993;
st993:
	if ( ++p == pe )
		goto _test_eof993;
case 993:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st978;
		case 32: goto st978;
		case 40: goto tr2761;
		case 41: goto tr2762;
		case 3082: goto tr2764;
		case 3131: goto tr2765;
		case 3338: goto tr2746;
		case 3387: goto tr2746;
		case 3594: goto tr2766;
		case 3643: goto tr2767;
	}
	goto tr2637;
tr2745:
	{
		s->buffer_length = 0;
	}
	goto st994;
tr2842:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st994;
tr2736:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st994;
tr2850:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st994;
st994:
	if ( ++p == pe )
		goto _test_eof994;
case 994:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr2843;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr2842;
	goto tr2637;
tr2738:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1698;
tr2747:
	{
		s->line_counter++;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1698;
tr2852:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1698;
st1698:
	if ( ++p == pe )
		goto _test_eof1698;
case 1698:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st976;
		case 32: goto st976;
		case 40: goto tr2741;
		case 41: goto tr2742;
		case 3082: goto tr2744;
		case 3131: goto tr2745;
		case 3338: goto tr2746;
		case 3387: goto tr2746;
		case 3594: goto tr2747;
		case 3643: goto tr2748;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2743;
	goto tr2637;
tr2739:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1699;
tr2748:
	{
		s->buffer_length = 0;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1699;
tr2853:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	{
		// Write version.
		*(rdata_tail) = 0;
		rdata_tail += 1;
		// Write size.
		*(rdata_tail) = loc64to8(s->loc.siz);
		rdata_tail += 1;
		// Write horizontal precision.
		*(rdata_tail) = loc64to8(s->loc.hp);
		rdata_tail += 1;
		// Write vertical precision.
		*(rdata_tail) = loc64to8(s->loc.vp);
		rdata_tail += 1;
		// Write latitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LAT_ZERO + s->loc.lat_sign *
			(3600000 * s->loc.d1 + 60000 * s->loc.m1 + s->loc.s1));
		rdata_tail += 4;
		// Write longitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_LONG_ZERO + s->loc.long_sign *
			(3600000 * s->loc.d2 + 60000 * s->loc.m2 + s->loc.s2));
		rdata_tail += 4;
		// Write altitude.
		*((uint32_t *)rdata_tail) = htonl(LOC_ALT_ZERO + s->loc.alt_sign *
			(s->loc.alt));
		rdata_tail += 4;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1699;
st1699:
	if ( ++p == pe )
		goto _test_eof1699;
case 1699:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr2843;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr2842;
	goto tr2637;
st995:
	if ( ++p == pe )
		goto _test_eof995;
case 995:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2844;
		case 32: goto tr2844;
		case 40: goto tr2845;
		case 41: goto tr2846;
		case 109: goto tr2848;
		case 3082: goto tr2849;
		case 3131: goto tr2850;
		case 3338: goto tr2851;
		case 3387: goto tr2851;
		case 3594: goto tr2852;
		case 3643: goto tr2853;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2847;
	goto tr2637;
tr2847:
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->decimal_counter++;
	}
	goto st996;
tr2854:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->decimal_counter++;
	}
	goto st996;
st996:
	if ( ++p == pe )
		goto _test_eof996;
case 996:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr2729;
		case 32: goto tr2729;
		case 40: goto tr2730;
		case 41: goto tr2731;
		case 109: goto tr2734;
		case 3082: goto tr2735;
		case 3131: goto tr2736;
		case 3338: goto tr2737;
		case 3387: goto tr2737;
		case 3594: goto tr2738;
		case 3643: goto tr2739;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2854;
	goto tr2637;
tr2734:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	goto st997;
tr2848:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if ((s->loc.alt_sign ==  1 && s->number64 <= 4284967295) ||
		    (s->loc.alt_sign == -1 && s->number64 <=   10000000))
		{
			s->loc.alt = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	goto st997;
st997:
	if ( ++p == pe )
		goto _test_eof997;
case 997:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st976;
		case 32: goto st976;
		case 40: goto tr2741;
		case 41: goto tr2742;
		case 3082: goto tr2744;
		case 3131: goto tr2745;
		case 3338: goto tr2746;
		case 3387: goto tr2746;
		case 3594: goto tr2747;
		case 3643: goto tr2748;
	}
	goto tr2637;
tr2725:
	{
		s->buffer_length = 0;
	}
	goto st998;
tr2855:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st998;
tr2861:
	{
		s->loc.long_sign = -1;
	}
	{
		s->buffer_length = 0;
	}
	goto st998;
st998:
	if ( ++p == pe )
		goto _test_eof998;
case 998:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr2856;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr2855;
	goto tr2637;
st999:
	if ( ++p == pe )
		goto _test_eof999;
case 999:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2857;
		case 32: goto tr2857;
		case 40: goto tr2858;
		case 41: goto tr2859;
		case 2058: goto tr2860;
		case 2107: goto tr2861;
	}
	goto tr2637;
tr2720:
	{
		s->buffer_length = 0;
	}
	goto st1000;
tr2862:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1000;
tr2715:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1000;
tr2869:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1000;
st1000:
	if ( ++p == pe )
		goto _test_eof1000;
case 1000:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr2863;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr2862;
	goto tr2637;
st1001:
	if ( ++p == pe )
		goto _test_eof1001;
case 1001:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2864;
		case 32: goto tr2864;
		case 40: goto tr2865;
		case 41: goto tr2866;
		case 2058: goto tr2868;
		case 2107: goto tr2869;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2867;
	goto tr2637;
tr2867:
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->decimal_counter++;
	}
	goto st1002;
tr2870:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->decimal_counter++;
	}
	goto st1002;
st1002:
	if ( ++p == pe )
		goto _test_eof1002;
case 1002:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2709;
		case 32: goto tr2709;
		case 40: goto tr2710;
		case 41: goto tr2711;
		case 2058: goto tr2714;
		case 2107: goto tr2715;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2870;
	goto tr2637;
tr2708:
	{
		s->buffer_length = 0;
	}
	goto st1003;
tr2871:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1003;
tr2702:
	{
		if (s->number64 <= 59) {
			s->loc.m2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1003;
st1003:
	if ( ++p == pe )
		goto _test_eof1003;
case 1003:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr2872;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr2871;
	goto tr2637;
tr2696:
	{
		s->buffer_length = 0;
	}
	goto st1004;
tr2873:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1004;
tr2688:
	{
		if (s->number64 <= 180) {
			s->loc.d2 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1004;
st1004:
	if ( ++p == pe )
		goto _test_eof1004;
case 1004:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr2874;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr2873;
	goto tr2637;
tr2681:
	{
		s->buffer_length = 0;
	}
	goto st1005;
tr2875:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1005;
tr2881:
	{
		s->loc.lat_sign = -1;
	}
	{
		s->buffer_length = 0;
	}
	goto st1005;
st1005:
	if ( ++p == pe )
		goto _test_eof1005;
case 1005:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr2876;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr2875;
	goto tr2637;
st1006:
	if ( ++p == pe )
		goto _test_eof1006;
case 1006:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2877;
		case 32: goto tr2877;
		case 40: goto tr2878;
		case 41: goto tr2879;
		case 2058: goto tr2880;
		case 2107: goto tr2881;
	}
	goto tr2637;
tr2676:
	{
		s->buffer_length = 0;
	}
	goto st1007;
tr2882:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1007;
tr2671:
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1007;
tr2889:
	{
		s->number64_tmp = s->number64;
	}
	{
		if (s->decimal_counter == 0 && s->number64 < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals);
		} else if (s->decimal_counter <= s->decimals &&
				 s->number64_tmp < UINT32_MAX) {
			s->number64 *= pow(10, s->decimals - s->decimal_counter);
			s->number64 += s->number64_tmp * pow(10, s->decimals);
		} else {
			WARN(ZS_FLOAT_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->number64 <= 59999) {
			s->loc.s1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1007;
st1007:
	if ( ++p == pe )
		goto _test_eof1007;
case 1007:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr2883;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr2882;
	goto tr2637;
st1008:
	if ( ++p == pe )
		goto _test_eof1008;
case 1008:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2884;
		case 32: goto tr2884;
		case 40: goto tr2885;
		case 41: goto tr2886;
		case 2058: goto tr2888;
		case 2107: goto tr2889;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2887;
	goto tr2637;
tr2887:
	{
		s->number64_tmp = s->number64;
	}
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->decimal_counter++;
	}
	goto st1009;
tr2890:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->decimal_counter++;
	}
	goto st1009;
st1009:
	if ( ++p == pe )
		goto _test_eof1009;
case 1009:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2665;
		case 32: goto tr2665;
		case 40: goto tr2666;
		case 41: goto tr2667;
		case 2058: goto tr2670;
		case 2107: goto tr2671;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2890;
	goto tr2637;
tr2664:
	{
		s->buffer_length = 0;
	}
	goto st1010;
tr2891:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1010;
tr2658:
	{
		if (s->number64 <= 59) {
			s->loc.m1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1010;
st1010:
	if ( ++p == pe )
		goto _test_eof1010;
case 1010:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr2892;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr2891;
	goto tr2637;
tr2652:
	{
		s->buffer_length = 0;
	}
	goto st1011;
tr2893:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1011;
tr2644:
	{
		if (s->number64 <= 90) {
			s->loc.d1 = (uint32_t)(s->number64);
		} else {
			WARN(ZS_BAD_NUMBER);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1011;
st1011:
	if ( ++p == pe )
		goto _test_eof1011;
case 1011:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr2894;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr2893;
	goto tr2637;
st1012:
	if ( ++p == pe )
		goto _test_eof1012;
case 1012:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr2895;
	goto tr2429;
tr2895:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1013;
tr2899:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1013;
st1013:
	if ( ++p == pe )
		goto _test_eof1013;
case 1013:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2896;
		case 32: goto tr2896;
		case 40: goto tr2897;
		case 41: goto tr2898;
		case 2058: goto tr2900;
		case 2107: goto tr2901;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2899;
	goto tr2429;
tr2903:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1014;
tr2904:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1014;
tr2906:
	{
		s->line_counter++;
	}
	goto st1014;
tr2938:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1014; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1014;
tr2896:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1014;
tr2897:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1014;
tr2898:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1014;
tr2900:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1014;
st1014:
	if ( ++p == pe )
		goto _test_eof1014;
case 1014:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1014;
		case 32: goto st1014;
		case 40: goto tr2903;
		case 41: goto tr2904;
		case 2058: goto tr2906;
		case 2107: goto tr2907;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2905;
	goto tr2429;
tr2905:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1015;
tr2911:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1015;
st1015:
	if ( ++p == pe )
		goto _test_eof1015;
case 1015:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2908;
		case 32: goto tr2908;
		case 40: goto tr2909;
		case 41: goto tr2910;
		case 2058: goto tr2912;
		case 2107: goto tr2913;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2911;
	goto tr2429;
tr2915:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1016;
tr2916:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1016;
tr2918:
	{
		s->line_counter++;
	}
	goto st1016;
tr2936:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1016; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1016;
tr2908:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1016;
tr2909:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1016;
tr2910:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1016;
tr2912:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1016;
st1016:
	if ( ++p == pe )
		goto _test_eof1016;
case 1016:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1016;
		case 32: goto st1016;
		case 40: goto tr2915;
		case 41: goto tr2916;
		case 2058: goto tr2918;
		case 2107: goto tr2919;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2917;
	goto tr2429;
tr2917:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1017;
tr2923:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1017;
st1017:
	if ( ++p == pe )
		goto _test_eof1017;
case 1017:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2920;
		case 32: goto tr2920;
		case 40: goto tr2921;
		case 41: goto tr2922;
		case 2058: goto tr2924;
		case 2107: goto tr2925;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2923;
	goto tr2429;
tr2927:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1018;
tr2928:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1018;
tr2930:
	{
		s->line_counter++;
	}
	goto st1018;
tr2934:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1018; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1018;
tr2920:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1018;
tr2921:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1018;
tr2922:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1018;
tr2924:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1018;
st1018:
	if ( ++p == pe )
		goto _test_eof1018;
case 1018:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1018;
		case 32: goto st1018;
		case 40: goto tr2927;
		case 41: goto tr2928;
		case 42: goto tr2929;
		case 92: goto tr2929;
		case 95: goto tr2929;
		case 2058: goto tr2930;
		case 2107: goto tr2931;
	}
	if ( _widec < 64 ) {
		if ( 45 <= _widec && _widec <= 57 )
			goto tr2929;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr2929;
	} else
		goto tr2929;
	goto tr77;
tr2929:
	{
		s->dname = rdata_tail;
	}
	{ p--; {stack[top++] = 1019;goto st321;} }
	goto st1019;
st1019:
	if ( ++p == pe )
		goto _test_eof1019;
case 1019:
	switch( (*p) ) {
		case 32: goto tr2932;
		case 59: goto tr2932;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2932;
	} else if ( (*p) >= 9 )
		goto tr2932;
	goto tr77;
tr2932:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1700;
st1700:
	if ( ++p == pe )
		goto _test_eof1700;
case 1700:
	goto st0;
tr2931:
	{
		s->buffer_length = 0;
	}
	goto st1020;
tr2933:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1020;
tr2925:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1020;
st1020:
	if ( ++p == pe )
		goto _test_eof1020;
case 1020:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr2934;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr2933;
	goto tr77;
tr2919:
	{
		s->buffer_length = 0;
	}
	goto st1021;
tr2935:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1021;
tr2913:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1021;
st1021:
	if ( ++p == pe )
		goto _test_eof1021;
case 1021:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr2936;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr2935;
	goto tr77;
tr2907:
	{
		s->buffer_length = 0;
	}
	goto st1022;
tr2937:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1022;
tr2901:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1022;
st1022:
	if ( ++p == pe )
		goto _test_eof1022;
case 1022:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr2938;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr2937;
	goto tr77;
st1023:
	if ( ++p == pe )
		goto _test_eof1023;
case 1023:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr2939;
	goto tr2429;
tr2939:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1024;
tr2943:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1024;
st1024:
	if ( ++p == pe )
		goto _test_eof1024;
case 1024:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2940;
		case 32: goto tr2940;
		case 40: goto tr2941;
		case 41: goto tr2942;
		case 2058: goto tr2944;
		case 2107: goto tr2945;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2943;
	goto tr2429;
tr2947:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1025;
tr2948:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1025;
tr2950:
	{
		s->line_counter++;
	}
	goto st1025;
tr3007:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1025; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1025;
tr2940:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1025;
tr2941:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1025;
tr2942:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1025;
tr2944:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1025;
st1025:
	if ( ++p == pe )
		goto _test_eof1025;
case 1025:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1025;
		case 32: goto st1025;
		case 40: goto tr2947;
		case 41: goto tr2948;
		case 2058: goto tr2950;
		case 2107: goto tr2951;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2949;
	goto tr2429;
tr2949:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1026;
tr2955:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1026;
st1026:
	if ( ++p == pe )
		goto _test_eof1026;
case 1026:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2952;
		case 32: goto tr2952;
		case 40: goto tr2953;
		case 41: goto tr2954;
		case 2058: goto tr2956;
		case 2107: goto tr2957;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr2955;
	goto tr2429;
tr2960:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1027;
tr2961:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1027;
tr2962:
	{
		s->line_counter++;
	}
	goto st1027;
tr3005:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1027; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1027;
tr2952:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1027;
tr2953:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1027;
tr2954:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1027;
tr2956:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1027;
st1027:
	if ( ++p == pe )
		goto _test_eof1027;
case 1027:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1027;
		case 32: goto st1027;
		case 40: goto tr2960;
		case 41: goto tr2961;
		case 2058: goto tr2962;
		case 2107: goto tr2963;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr2958;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr2958;
	} else
		goto tr2958;
	goto tr77;
tr2958:
	{
		if (rdata_tail <= rdata_stop) {
			s->item_length_location = rdata_tail++;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{ p--; {stack[top++] = 1028;goto st330;} }
	goto st1028;
st1028:
	if ( ++p == pe )
		goto _test_eof1028;
case 1028:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2964;
		case 32: goto tr2964;
		case 40: goto tr2965;
		case 41: goto tr2966;
		case 2058: goto tr2967;
		case 2107: goto tr2968;
	}
	goto tr77;
tr2971:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1029;
tr2972:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1029;
tr2973:
	{
		s->line_counter++;
	}
	goto st1029;
tr3003:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1029; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1029;
tr2964:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1029;
tr2965:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1029;
tr2966:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1029;
tr2967:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1029;
st1029:
	if ( ++p == pe )
		goto _test_eof1029;
case 1029:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1029;
		case 32: goto st1029;
		case 40: goto tr2971;
		case 41: goto tr2972;
		case 2058: goto tr2973;
		case 2107: goto tr2974;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr2969;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr2969;
	} else
		goto tr2969;
	goto tr77;
tr2969:
	{
		if (rdata_tail <= rdata_stop) {
			s->item_length_location = rdata_tail++;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{ p--; {stack[top++] = 1030;goto st330;} }
	goto st1030;
st1030:
	if ( ++p == pe )
		goto _test_eof1030;
case 1030:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2975;
		case 32: goto tr2975;
		case 40: goto tr2976;
		case 41: goto tr2977;
		case 2058: goto tr2978;
		case 2107: goto tr2979;
	}
	goto tr77;
tr2982:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1031;
tr2983:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1031;
tr2984:
	{
		s->line_counter++;
	}
	goto st1031;
tr3001:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1031; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1031;
tr2975:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1031;
tr2976:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1031;
tr2977:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1031;
tr2978:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1031;
st1031:
	if ( ++p == pe )
		goto _test_eof1031;
case 1031:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1031;
		case 32: goto st1031;
		case 40: goto tr2982;
		case 41: goto tr2983;
		case 2058: goto tr2984;
		case 2107: goto tr2985;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr2980;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr2980;
	} else
		goto tr2980;
	goto tr77;
tr2980:
	{
		if (rdata_tail <= rdata_stop) {
			s->item_length_location = rdata_tail++;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{ p--; {stack[top++] = 1032;goto st330;} }
	goto st1032;
st1032:
	if ( ++p == pe )
		goto _test_eof1032;
case 1032:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr2986;
		case 32: goto tr2986;
		case 40: goto tr2987;
		case 41: goto tr2988;
		case 2058: goto tr2989;
		case 2107: goto tr2990;
	}
	goto tr77;
tr2992:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1033;
tr2993:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1033;
tr2995:
	{
		s->line_counter++;
	}
	goto st1033;
tr2999:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1033; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1033;
tr2986:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1033;
tr2987:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1033;
tr2988:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1033;
tr2989:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1033;
st1033:
	if ( ++p == pe )
		goto _test_eof1033;
case 1033:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1033;
		case 32: goto st1033;
		case 40: goto tr2992;
		case 41: goto tr2993;
		case 42: goto tr2994;
		case 92: goto tr2994;
		case 95: goto tr2994;
		case 2058: goto tr2995;
		case 2107: goto tr2996;
	}
	if ( _widec < 64 ) {
		if ( 45 <= _widec && _widec <= 57 )
			goto tr2994;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr2994;
	} else
		goto tr2994;
	goto tr77;
tr2994:
	{
		s->dname = rdata_tail;
	}
	{ p--; {stack[top++] = 1034;goto st321;} }
	goto st1034;
st1034:
	if ( ++p == pe )
		goto _test_eof1034;
case 1034:
	switch( (*p) ) {
		case 32: goto tr2997;
		case 59: goto tr2997;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr2997;
	} else if ( (*p) >= 9 )
		goto tr2997;
	goto tr77;
tr2997:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1701;
st1701:
	if ( ++p == pe )
		goto _test_eof1701;
case 1701:
	goto st0;
tr2996:
	{
		s->buffer_length = 0;
	}
	goto st1035;
tr2998:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1035;
tr2990:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1035;
st1035:
	if ( ++p == pe )
		goto _test_eof1035;
case 1035:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr2999;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr2998;
	goto tr77;
tr2985:
	{
		s->buffer_length = 0;
	}
	goto st1036;
tr3000:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1036;
tr2979:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1036;
st1036:
	if ( ++p == pe )
		goto _test_eof1036;
case 1036:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3001;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3000;
	goto tr77;
tr2974:
	{
		s->buffer_length = 0;
	}
	goto st1037;
tr3002:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1037;
tr2968:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1037;
st1037:
	if ( ++p == pe )
		goto _test_eof1037;
case 1037:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3003;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3002;
	goto tr77;
tr2963:
	{
		s->buffer_length = 0;
	}
	goto st1038;
tr3004:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1038;
tr2957:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1038;
st1038:
	if ( ++p == pe )
		goto _test_eof1038;
case 1038:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3005;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3004;
	goto tr77;
tr2951:
	{
		s->buffer_length = 0;
	}
	goto st1039;
tr3006:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1039;
tr2945:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1039;
st1039:
	if ( ++p == pe )
		goto _test_eof1039;
case 1039:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3007;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3006;
	goto tr77;
st1040:
	if ( ++p == pe )
		goto _test_eof1040;
case 1040:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr3008;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr3008;
	} else
		goto tr3008;
	goto tr77;
tr3008:
	{ p--; {stack[top++] = 1041;goto st851;} }
	goto st1041;
st1041:
	if ( ++p == pe )
		goto _test_eof1041;
case 1041:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1042;
		case 32: goto st1042;
		case 40: goto tr3010;
		case 41: goto tr3011;
		case 2058: goto tr3012;
		case 2107: goto tr3013;
	}
	goto tr77;
tr3010:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1042;
tr3011:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1042;
tr3012:
	{
		s->line_counter++;
	}
	goto st1042;
tr3039:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1042; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1042;
st1042:
	if ( ++p == pe )
		goto _test_eof1042;
case 1042:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1042;
		case 32: goto st1042;
		case 40: goto tr3010;
		case 41: goto tr3011;
		case 2058: goto tr3012;
		case 2107: goto tr3013;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3014;
	goto tr2429;
tr3014:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1043;
tr3018:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1043;
st1043:
	if ( ++p == pe )
		goto _test_eof1043;
case 1043:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3015;
		case 32: goto tr3015;
		case 40: goto tr3016;
		case 41: goto tr3017;
		case 2058: goto tr3019;
		case 2107: goto tr3020;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3018;
	goto tr2429;
tr3022:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1044;
tr3023:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1044;
tr3025:
	{
		s->line_counter++;
	}
	goto st1044;
tr3037:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1044; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1044;
tr3015:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1044;
tr3016:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1044;
tr3017:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1044;
tr3019:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1044;
st1044:
	if ( ++p == pe )
		goto _test_eof1044;
case 1044:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1044;
		case 32: goto st1044;
		case 40: goto tr3022;
		case 41: goto tr3023;
		case 2058: goto tr3025;
		case 2107: goto tr3026;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr3024;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr3024;
	} else
		goto tr3024;
	goto tr77;
tr3024:
	{ p--; {stack[top++] = 1045;goto st747;} }
	goto st1045;
st1045:
	if ( ++p == pe )
		goto _test_eof1045;
case 1045:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1046;
		case 32: goto st1046;
		case 40: goto tr3028;
		case 41: goto tr3029;
		case 2058: goto tr3030;
		case 2107: goto tr3031;
	}
	goto tr77;
tr3028:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1046;
tr3029:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1046;
tr3030:
	{
		s->line_counter++;
	}
	goto st1046;
tr3035:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1046; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1046;
st1046:
	if ( ++p == pe )
		goto _test_eof1046;
case 1046:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1046;
		case 32: goto st1046;
		case 40: goto tr3028;
		case 41: goto tr3029;
		case 43: goto tr3032;
		case 2058: goto tr3030;
		case 2107: goto tr3031;
	}
	if ( _widec < 65 ) {
		if ( 47 <= _widec && _widec <= 57 )
			goto tr3032;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr3032;
	} else
		goto tr3032;
	goto tr77;
tr3032:
	{ p--; {stack[top++] = 1047;goto st381;} }
	goto st1047;
st1047:
	if ( ++p == pe )
		goto _test_eof1047;
case 1047:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2176 + ((*p) - -128));
			if (
 !s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2176 + ((*p) - -128));
		if (
 !s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 2570: goto tr3033;
		case 2619: goto tr3033;
	}
	goto tr77;
tr3033:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1702;
st1702:
	if ( ++p == pe )
		goto _test_eof1702;
case 1702:
	goto st0;
tr3031:
	{
		s->buffer_length = 0;
	}
	goto st1048;
tr3034:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1048;
st1048:
	if ( ++p == pe )
		goto _test_eof1048;
case 1048:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3035;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3034;
	goto tr77;
tr3026:
	{
		s->buffer_length = 0;
	}
	goto st1049;
tr3036:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1049;
tr3020:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1049;
st1049:
	if ( ++p == pe )
		goto _test_eof1049;
case 1049:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3037;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3036;
	goto tr77;
tr3013:
	{
		s->buffer_length = 0;
	}
	goto st1050;
tr3038:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1050;
st1050:
	if ( ++p == pe )
		goto _test_eof1050;
case 1050:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3039;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3038;
	goto tr77;
tr3043:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1051;
tr3044:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1051;
tr3047:
	{
		s->line_counter++;
	}
	goto st1051;
tr3070:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1051; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1051;
tr3060:
	{
		if ((s->apl.addr_family == 1 && s->number64 <= 32) ||
		    (s->apl.addr_family == 2 && s->number64 <= 128)) {
			s->apl.prefix_length = (uint8_t)(s->number64);
		} else {
			WARN(ZS_BAD_APL);
			p--; {goto st319;}
		}
	}
	{
		// Copy address to buffer.
		uint8_t len;
		switch (s->apl.addr_family) {
		case 1:
			len = ZS_INET4_ADDR_LENGTH;
			memcpy(s->buffer, s->addr, len);
			break;
		case 2:
			len = ZS_INET6_ADDR_LENGTH;
			memcpy(s->buffer, s->addr, len);
			break;
		default:
			WARN(ZS_BAD_APL);
			p--; {goto st319;}
		}
		// Find prefix without trailing zeroes.
		while (len > 0) {
			if ((s->buffer[len - 1] & 255) != 0) {
				break;
			}
			len--;
		}
		// Check for rdata overflow.
		if (rdata_tail + 4 + len > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		// Write address family.
		uint16_t af = htons(s->apl.addr_family);
		memcpy(rdata_tail, &af, sizeof(af));
		rdata_tail += 2;
		// Write prefix length in bits.
		*(rdata_tail) = s->apl.prefix_length;
		rdata_tail += 1;
		// Write negation flag + prefix length in bytes.
		*(rdata_tail) = len + s->apl.excl_flag;
		rdata_tail += 1;
		// Write address prefix non-null data.
		memcpy(rdata_tail, s->buffer, len);
		rdata_tail += len;
	}
	goto st1051;
tr3061:
	{
		if ((s->apl.addr_family == 1 && s->number64 <= 32) ||
		    (s->apl.addr_family == 2 && s->number64 <= 128)) {
			s->apl.prefix_length = (uint8_t)(s->number64);
		} else {
			WARN(ZS_BAD_APL);
			p--; {goto st319;}
		}
	}
	{
		// Copy address to buffer.
		uint8_t len;
		switch (s->apl.addr_family) {
		case 1:
			len = ZS_INET4_ADDR_LENGTH;
			memcpy(s->buffer, s->addr, len);
			break;
		case 2:
			len = ZS_INET6_ADDR_LENGTH;
			memcpy(s->buffer, s->addr, len);
			break;
		default:
			WARN(ZS_BAD_APL);
			p--; {goto st319;}
		}
		// Find prefix without trailing zeroes.
		while (len > 0) {
			if ((s->buffer[len - 1] & 255) != 0) {
				break;
			}
			len--;
		}
		// Check for rdata overflow.
		if (rdata_tail + 4 + len > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		// Write address family.
		uint16_t af = htons(s->apl.addr_family);
		memcpy(rdata_tail, &af, sizeof(af));
		rdata_tail += 2;
		// Write prefix length in bits.
		*(rdata_tail) = s->apl.prefix_length;
		rdata_tail += 1;
		// Write negation flag + prefix length in bytes.
		*(rdata_tail) = len + s->apl.excl_flag;
		rdata_tail += 1;
		// Write address prefix non-null data.
		memcpy(rdata_tail, s->buffer, len);
		rdata_tail += len;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1051;
tr3062:
	{
		if ((s->apl.addr_family == 1 && s->number64 <= 32) ||
		    (s->apl.addr_family == 2 && s->number64 <= 128)) {
			s->apl.prefix_length = (uint8_t)(s->number64);
		} else {
			WARN(ZS_BAD_APL);
			p--; {goto st319;}
		}
	}
	{
		// Copy address to buffer.
		uint8_t len;
		switch (s->apl.addr_family) {
		case 1:
			len = ZS_INET4_ADDR_LENGTH;
			memcpy(s->buffer, s->addr, len);
			break;
		case 2:
			len = ZS_INET6_ADDR_LENGTH;
			memcpy(s->buffer, s->addr, len);
			break;
		default:
			WARN(ZS_BAD_APL);
			p--; {goto st319;}
		}
		// Find prefix without trailing zeroes.
		while (len > 0) {
			if ((s->buffer[len - 1] & 255) != 0) {
				break;
			}
			len--;
		}
		// Check for rdata overflow.
		if (rdata_tail + 4 + len > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		// Write address family.
		uint16_t af = htons(s->apl.addr_family);
		memcpy(rdata_tail, &af, sizeof(af));
		rdata_tail += 2;
		// Write prefix length in bits.
		*(rdata_tail) = s->apl.prefix_length;
		rdata_tail += 1;
		// Write negation flag + prefix length in bytes.
		*(rdata_tail) = len + s->apl.excl_flag;
		rdata_tail += 1;
		// Write address prefix non-null data.
		memcpy(rdata_tail, s->buffer, len);
		rdata_tail += len;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1051;
tr3064:
	{
		if ((s->apl.addr_family == 1 && s->number64 <= 32) ||
		    (s->apl.addr_family == 2 && s->number64 <= 128)) {
			s->apl.prefix_length = (uint8_t)(s->number64);
		} else {
			WARN(ZS_BAD_APL);
			p--; {goto st319;}
		}
	}
	{
		// Copy address to buffer.
		uint8_t len;
		switch (s->apl.addr_family) {
		case 1:
			len = ZS_INET4_ADDR_LENGTH;
			memcpy(s->buffer, s->addr, len);
			break;
		case 2:
			len = ZS_INET6_ADDR_LENGTH;
			memcpy(s->buffer, s->addr, len);
			break;
		default:
			WARN(ZS_BAD_APL);
			p--; {goto st319;}
		}
		// Find prefix without trailing zeroes.
		while (len > 0) {
			if ((s->buffer[len - 1] & 255) != 0) {
				break;
			}
			len--;
		}
		// Check for rdata overflow.
		if (rdata_tail + 4 + len > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		// Write address family.
		uint16_t af = htons(s->apl.addr_family);
		memcpy(rdata_tail, &af, sizeof(af));
		rdata_tail += 2;
		// Write prefix length in bits.
		*(rdata_tail) = s->apl.prefix_length;
		rdata_tail += 1;
		// Write negation flag + prefix length in bytes.
		*(rdata_tail) = len + s->apl.excl_flag;
		rdata_tail += 1;
		// Write address prefix non-null data.
		memcpy(rdata_tail, s->buffer, len);
		rdata_tail += len;
	}
	{
		s->line_counter++;
	}
	goto st1051;
st1051:
	if ( ++p == pe )
		goto _test_eof1051;
case 1051:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st1051;
		case 32: goto st1051;
		case 33: goto tr3042;
		case 40: goto tr3043;
		case 41: goto tr3044;
		case 49: goto tr3045;
		case 50: goto tr3046;
		case 3082: goto tr3047;
		case 3131: goto tr3048;
		case 3338: goto tr3049;
		case 3387: goto tr3049;
		case 3594: goto tr3050;
		case 3643: goto tr3051;
	}
	goto tr3040;
tr3042:
	{
		memset(&(s->apl), 0, sizeof(s->apl));
	}
	{
		s->apl.excl_flag = 128; // dec 128  = bin 10000000.
	}
	goto st1052;
st1052:
	if ( ++p == pe )
		goto _test_eof1052;
case 1052:
	switch( (*p) ) {
		case 49: goto tr3052;
		case 50: goto tr3053;
	}
	goto tr3040;
tr3045:
	{
		memset(&(s->apl), 0, sizeof(s->apl));
	}
	{
		s->apl.addr_family = 1;
	}
	goto st1053;
tr3052:
	{
		s->apl.addr_family = 1;
	}
	goto st1053;
st1053:
	if ( ++p == pe )
		goto _test_eof1053;
case 1053:
	if ( (*p) == 58 )
		goto st1054;
	goto tr3040;
st1054:
	if ( ++p == pe )
		goto _test_eof1054;
case 1054:
	if ( (*p) == 46 )
		goto tr3056;
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr3056;
	goto tr3055;
tr3057:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1055;
tr3056:
	{
		s->buffer_length = 0;
	}
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1055;
st1055:
	if ( ++p == pe )
		goto _test_eof1055;
case 1055:
	if ( (*p) == 47 )
		goto tr3058;
	if ( 46 <= (*p) && (*p) <= 57 )
		goto tr3057;
	goto tr3055;
tr3058:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	goto st1056;
tr3074:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	goto st1056;
st1056:
	if ( ++p == pe )
		goto _test_eof1056;
case 1056:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr3059;
	goto tr3040;
tr3059:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1057;
tr3063:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1057;
st1057:
	if ( ++p == pe )
		goto _test_eof1057;
case 1057:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto tr3060;
		case 32: goto tr3060;
		case 40: goto tr3061;
		case 41: goto tr3062;
		case 3082: goto tr3064;
		case 3131: goto tr3065;
		case 3338: goto tr3066;
		case 3387: goto tr3066;
		case 3594: goto tr3067;
		case 3643: goto tr3068;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3063;
	goto tr3040;
tr3048:
	{
		s->buffer_length = 0;
	}
	goto st1058;
tr3069:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1058;
tr3065:
	{
		if ((s->apl.addr_family == 1 && s->number64 <= 32) ||
		    (s->apl.addr_family == 2 && s->number64 <= 128)) {
			s->apl.prefix_length = (uint8_t)(s->number64);
		} else {
			WARN(ZS_BAD_APL);
			p--; {goto st319;}
		}
	}
	{
		// Copy address to buffer.
		uint8_t len;
		switch (s->apl.addr_family) {
		case 1:
			len = ZS_INET4_ADDR_LENGTH;
			memcpy(s->buffer, s->addr, len);
			break;
		case 2:
			len = ZS_INET6_ADDR_LENGTH;
			memcpy(s->buffer, s->addr, len);
			break;
		default:
			WARN(ZS_BAD_APL);
			p--; {goto st319;}
		}
		// Find prefix without trailing zeroes.
		while (len > 0) {
			if ((s->buffer[len - 1] & 255) != 0) {
				break;
			}
			len--;
		}
		// Check for rdata overflow.
		if (rdata_tail + 4 + len > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		// Write address family.
		uint16_t af = htons(s->apl.addr_family);
		memcpy(rdata_tail, &af, sizeof(af));
		rdata_tail += 2;
		// Write prefix length in bits.
		*(rdata_tail) = s->apl.prefix_length;
		rdata_tail += 1;
		// Write negation flag + prefix length in bytes.
		*(rdata_tail) = len + s->apl.excl_flag;
		rdata_tail += 1;
		// Write address prefix non-null data.
		memcpy(rdata_tail, s->buffer, len);
		rdata_tail += len;
	}
	{
		s->buffer_length = 0;
	}
	goto st1058;
st1058:
	if ( ++p == pe )
		goto _test_eof1058;
case 1058:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3070;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3069;
	goto tr77;
tr3049:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1703;
tr3066:
	{
		if ((s->apl.addr_family == 1 && s->number64 <= 32) ||
		    (s->apl.addr_family == 2 && s->number64 <= 128)) {
			s->apl.prefix_length = (uint8_t)(s->number64);
		} else {
			WARN(ZS_BAD_APL);
			p--; {goto st319;}
		}
	}
	{
		// Copy address to buffer.
		uint8_t len;
		switch (s->apl.addr_family) {
		case 1:
			len = ZS_INET4_ADDR_LENGTH;
			memcpy(s->buffer, s->addr, len);
			break;
		case 2:
			len = ZS_INET6_ADDR_LENGTH;
			memcpy(s->buffer, s->addr, len);
			break;
		default:
			WARN(ZS_BAD_APL);
			p--; {goto st319;}
		}
		// Find prefix without trailing zeroes.
		while (len > 0) {
			if ((s->buffer[len - 1] & 255) != 0) {
				break;
			}
			len--;
		}
		// Check for rdata overflow.
		if (rdata_tail + 4 + len > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		// Write address family.
		uint16_t af = htons(s->apl.addr_family);
		memcpy(rdata_tail, &af, sizeof(af));
		rdata_tail += 2;
		// Write prefix length in bits.
		*(rdata_tail) = s->apl.prefix_length;
		rdata_tail += 1;
		// Write negation flag + prefix length in bytes.
		*(rdata_tail) = len + s->apl.excl_flag;
		rdata_tail += 1;
		// Write address prefix non-null data.
		memcpy(rdata_tail, s->buffer, len);
		rdata_tail += len;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1703;
st1703:
	if ( ++p == pe )
		goto _test_eof1703;
case 1703:
	goto st0;
tr3050:
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1704;
tr3067:
	{
		if ((s->apl.addr_family == 1 && s->number64 <= 32) ||
		    (s->apl.addr_family == 2 && s->number64 <= 128)) {
			s->apl.prefix_length = (uint8_t)(s->number64);
		} else {
			WARN(ZS_BAD_APL);
			p--; {goto st319;}
		}
	}
	{
		// Copy address to buffer.
		uint8_t len;
		switch (s->apl.addr_family) {
		case 1:
			len = ZS_INET4_ADDR_LENGTH;
			memcpy(s->buffer, s->addr, len);
			break;
		case 2:
			len = ZS_INET6_ADDR_LENGTH;
			memcpy(s->buffer, s->addr, len);
			break;
		default:
			WARN(ZS_BAD_APL);
			p--; {goto st319;}
		}
		// Find prefix without trailing zeroes.
		while (len > 0) {
			if ((s->buffer[len - 1] & 255) != 0) {
				break;
			}
			len--;
		}
		// Check for rdata overflow.
		if (rdata_tail + 4 + len > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		// Write address family.
		uint16_t af = htons(s->apl.addr_family);
		memcpy(rdata_tail, &af, sizeof(af));
		rdata_tail += 2;
		// Write prefix length in bits.
		*(rdata_tail) = s->apl.prefix_length;
		rdata_tail += 1;
		// Write negation flag + prefix length in bytes.
		*(rdata_tail) = len + s->apl.excl_flag;
		rdata_tail += 1;
		// Write address prefix non-null data.
		memcpy(rdata_tail, s->buffer, len);
		rdata_tail += len;
	}
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1704;
st1704:
	if ( ++p == pe )
		goto _test_eof1704;
case 1704:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st1051;
		case 32: goto st1051;
		case 33: goto tr3042;
		case 40: goto tr3043;
		case 41: goto tr3044;
		case 49: goto tr3045;
		case 50: goto tr3046;
		case 3082: goto tr3047;
		case 3131: goto tr3048;
		case 3338: goto tr3049;
		case 3387: goto tr3049;
		case 3594: goto tr3050;
		case 3643: goto tr3051;
	}
	goto tr3040;
tr3046:
	{
		memset(&(s->apl), 0, sizeof(s->apl));
	}
	{
		s->apl.addr_family = 2;
	}
	goto st1059;
tr3053:
	{
		s->apl.addr_family = 2;
	}
	goto st1059;
st1059:
	if ( ++p == pe )
		goto _test_eof1059;
case 1059:
	if ( (*p) == 58 )
		goto st1060;
	goto tr3040;
st1060:
	if ( ++p == pe )
		goto _test_eof1060;
case 1060:
	if ( (*p) == 46 )
		goto tr3072;
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 58 )
			goto tr3072;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr3072;
	} else
		goto tr3072;
	goto tr3055;
tr3073:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1061;
tr3072:
	{
		s->buffer_length = 0;
	}
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1061;
st1061:
	if ( ++p == pe )
		goto _test_eof1061;
case 1061:
	if ( (*p) == 47 )
		goto tr3074;
	if ( (*p) < 65 ) {
		if ( 46 <= (*p) && (*p) <= 58 )
			goto tr3073;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr3073;
	} else
		goto tr3073;
	goto tr3055;
tr3051:
	{
		s->buffer_length = 0;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1705;
tr3068:
	{
		if ((s->apl.addr_family == 1 && s->number64 <= 32) ||
		    (s->apl.addr_family == 2 && s->number64 <= 128)) {
			s->apl.prefix_length = (uint8_t)(s->number64);
		} else {
			WARN(ZS_BAD_APL);
			p--; {goto st319;}
		}
	}
	{
		// Copy address to buffer.
		uint8_t len;
		switch (s->apl.addr_family) {
		case 1:
			len = ZS_INET4_ADDR_LENGTH;
			memcpy(s->buffer, s->addr, len);
			break;
		case 2:
			len = ZS_INET6_ADDR_LENGTH;
			memcpy(s->buffer, s->addr, len);
			break;
		default:
			WARN(ZS_BAD_APL);
			p--; {goto st319;}
		}
		// Find prefix without trailing zeroes.
		while (len > 0) {
			if ((s->buffer[len - 1] & 255) != 0) {
				break;
			}
			len--;
		}
		// Check for rdata overflow.
		if (rdata_tail + 4 + len > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		// Write address family.
		uint16_t af = htons(s->apl.addr_family);
		memcpy(rdata_tail, &af, sizeof(af));
		rdata_tail += 2;
		// Write prefix length in bits.
		*(rdata_tail) = s->apl.prefix_length;
		rdata_tail += 1;
		// Write negation flag + prefix length in bytes.
		*(rdata_tail) = len + s->apl.excl_flag;
		rdata_tail += 1;
		// Write address prefix non-null data.
		memcpy(rdata_tail, s->buffer, len);
		rdata_tail += len;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1705;
st1705:
	if ( ++p == pe )
		goto _test_eof1705;
case 1705:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3070;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3069;
	goto tr77;
st1062:
	if ( ++p == pe )
		goto _test_eof1062;
case 1062:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr3075;
	goto tr2429;
tr3075:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1063;
tr3079:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1063;
st1063:
	if ( ++p == pe )
		goto _test_eof1063;
case 1063:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3076;
		case 32: goto tr3076;
		case 40: goto tr3077;
		case 41: goto tr3078;
		case 2058: goto tr3080;
		case 2107: goto tr3081;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3079;
	goto tr2429;
tr3083:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1064;
tr3084:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1064;
tr3086:
	{
		s->line_counter++;
	}
	goto st1064;
tr3123:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1064; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1064;
tr3076:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1064;
tr3077:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1064;
tr3078:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1064;
tr3080:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1064;
st1064:
	if ( ++p == pe )
		goto _test_eof1064;
case 1064:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1064;
		case 32: goto st1064;
		case 40: goto tr3083;
		case 41: goto tr3084;
		case 2058: goto tr3086;
		case 2107: goto tr3087;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr3085;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr3085;
	} else
		goto tr3085;
	goto tr77;
tr3085:
	{ p--; {stack[top++] = 1065;goto st747;} }
	goto st1065;
st1065:
	if ( ++p == pe )
		goto _test_eof1065;
case 1065:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1066;
		case 32: goto st1066;
		case 40: goto tr3089;
		case 41: goto tr3090;
		case 2058: goto tr3091;
		case 2107: goto tr3092;
	}
	goto tr77;
tr3089:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1066;
tr3090:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1066;
tr3091:
	{
		s->line_counter++;
	}
	goto st1066;
tr3121:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1066; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1066;
st1066:
	if ( ++p == pe )
		goto _test_eof1066;
case 1066:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1066;
		case 32: goto st1066;
		case 40: goto tr3089;
		case 41: goto tr3090;
		case 2058: goto tr3091;
		case 2107: goto tr3092;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3093;
	goto tr2429;
tr3093:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1067;
tr3097:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1067;
st1067:
	if ( ++p == pe )
		goto _test_eof1067;
case 1067:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3094;
		case 32: goto tr3094;
		case 40: goto tr3095;
		case 41: goto tr3096;
		case 2058: goto tr3098;
		case 2107: goto tr3099;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3097;
	goto tr2429;
tr3102:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1068;
tr3103:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1068;
tr3105:
	{
		s->line_counter++;
	}
	goto st1068;
tr3119:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1068; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1068;
tr3094:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1068;
tr3095:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1068;
tr3096:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1068;
tr3098:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1068;
st1068:
	if ( ++p == pe )
		goto _test_eof1068;
case 1068:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1068;
		case 32: goto st1068;
		case 40: goto tr3102;
		case 41: goto tr3103;
		case 2058: goto tr3105;
		case 2107: goto tr3106;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr3104;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr3104;
	} else
		goto tr3104;
	goto tr3100;
tr3104:
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1069;
st1069:
	if ( ++p == pe )
		goto _test_eof1069;
case 1069:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr3107;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr3107;
	} else
		goto tr3107;
	goto tr3100;
tr3109:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1070;
tr3110:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1070;
tr3111:
	{
		s->line_counter++;
	}
	goto st1070;
tr3117:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1070; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1070;
tr3107:
	{
		*rdata_tail += second_hex_to_num[(uint8_t)(*p)];
		rdata_tail++;
	}
	goto st1070;
st1070:
	if ( ++p == pe )
		goto _test_eof1070;
case 1070:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st1070;
		case 32: goto st1070;
		case 40: goto tr3109;
		case 41: goto tr3110;
		case 3082: goto tr3111;
		case 3131: goto tr3112;
		case 3338: goto tr3113;
		case 3387: goto tr3113;
		case 3594: goto tr3114;
		case 3643: goto tr3115;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr3104;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr3104;
	} else
		goto tr3104;
	goto tr3100;
tr3112:
	{
		s->buffer_length = 0;
	}
	goto st1071;
tr3116:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1071;
st1071:
	if ( ++p == pe )
		goto _test_eof1071;
case 1071:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3117;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3116;
	goto tr3100;
tr3113:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1706;
st1706:
	if ( ++p == pe )
		goto _test_eof1706;
case 1706:
	goto st0;
tr3114:
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1707;
st1707:
	if ( ++p == pe )
		goto _test_eof1707;
case 1707:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st1070;
		case 32: goto st1070;
		case 40: goto tr3109;
		case 41: goto tr3110;
		case 3082: goto tr3111;
		case 3131: goto tr3112;
		case 3338: goto tr3113;
		case 3387: goto tr3113;
		case 3594: goto tr3114;
		case 3643: goto tr3115;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr3104;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr3104;
	} else
		goto tr3104;
	goto tr3100;
tr3115:
	{
		s->buffer_length = 0;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1708;
st1708:
	if ( ++p == pe )
		goto _test_eof1708;
case 1708:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3117;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3116;
	goto tr3100;
tr3106:
	{
		s->buffer_length = 0;
	}
	goto st1072;
tr3118:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1072;
tr3099:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1072;
st1072:
	if ( ++p == pe )
		goto _test_eof1072;
case 1072:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3119;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3118;
	goto tr77;
tr3092:
	{
		s->buffer_length = 0;
	}
	goto st1073;
tr3120:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1073;
st1073:
	if ( ++p == pe )
		goto _test_eof1073;
case 1073:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3121;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3120;
	goto tr77;
tr3087:
	{
		s->buffer_length = 0;
	}
	goto st1074;
tr3122:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1074;
tr3081:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1074;
st1074:
	if ( ++p == pe )
		goto _test_eof1074;
case 1074:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3123;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3122;
	goto tr77;
st1075:
	if ( ++p == pe )
		goto _test_eof1075;
case 1075:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr3124;
	goto tr2429;
tr3124:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1076;
tr3128:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1076;
st1076:
	if ( ++p == pe )
		goto _test_eof1076;
case 1076:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3125;
		case 32: goto tr3125;
		case 40: goto tr3126;
		case 41: goto tr3127;
		case 2058: goto tr3129;
		case 2107: goto tr3130;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3128;
	goto tr2429;
tr3132:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1077;
tr3133:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1077;
tr3135:
	{
		s->line_counter++;
	}
	goto st1077;
tr3163:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1077; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1077;
tr3125:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1077;
tr3126:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1077;
tr3127:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1077;
tr3129:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1077;
st1077:
	if ( ++p == pe )
		goto _test_eof1077;
case 1077:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1077;
		case 32: goto st1077;
		case 40: goto tr3132;
		case 41: goto tr3133;
		case 2058: goto tr3135;
		case 2107: goto tr3136;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3134;
	goto tr2429;
tr3134:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1078;
tr3140:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1078;
st1078:
	if ( ++p == pe )
		goto _test_eof1078;
case 1078:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3137;
		case 32: goto tr3137;
		case 40: goto tr3138;
		case 41: goto tr3139;
		case 2058: goto tr3141;
		case 2107: goto tr3142;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3140;
	goto tr2429;
tr3144:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1079;
tr3145:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1079;
tr3147:
	{
		s->line_counter++;
	}
	goto st1079;
tr3161:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1079; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1079;
tr3137:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1079;
tr3138:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1079;
tr3139:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1079;
tr3141:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1079;
st1079:
	if ( ++p == pe )
		goto _test_eof1079;
case 1079:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1079;
		case 32: goto st1079;
		case 40: goto tr3144;
		case 41: goto tr3145;
		case 2058: goto tr3147;
		case 2107: goto tr3148;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr3146;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr3146;
	} else
		goto tr3146;
	goto tr3100;
tr3146:
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1080;
st1080:
	if ( ++p == pe )
		goto _test_eof1080;
case 1080:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr3149;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr3149;
	} else
		goto tr3149;
	goto tr3100;
tr3151:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1081;
tr3152:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1081;
tr3153:
	{
		s->line_counter++;
	}
	goto st1081;
tr3159:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1081; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1081;
tr3149:
	{
		*rdata_tail += second_hex_to_num[(uint8_t)(*p)];
		rdata_tail++;
	}
	goto st1081;
st1081:
	if ( ++p == pe )
		goto _test_eof1081;
case 1081:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st1081;
		case 32: goto st1081;
		case 40: goto tr3151;
		case 41: goto tr3152;
		case 3082: goto tr3153;
		case 3131: goto tr3154;
		case 3338: goto tr3155;
		case 3387: goto tr3155;
		case 3594: goto tr3156;
		case 3643: goto tr3157;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr3146;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr3146;
	} else
		goto tr3146;
	goto tr3100;
tr3154:
	{
		s->buffer_length = 0;
	}
	goto st1082;
tr3158:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1082;
st1082:
	if ( ++p == pe )
		goto _test_eof1082;
case 1082:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3159;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3158;
	goto tr3100;
tr3155:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1709;
st1709:
	if ( ++p == pe )
		goto _test_eof1709;
case 1709:
	goto st0;
tr3156:
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1710;
st1710:
	if ( ++p == pe )
		goto _test_eof1710;
case 1710:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st1081;
		case 32: goto st1081;
		case 40: goto tr3151;
		case 41: goto tr3152;
		case 3082: goto tr3153;
		case 3131: goto tr3154;
		case 3338: goto tr3155;
		case 3387: goto tr3155;
		case 3594: goto tr3156;
		case 3643: goto tr3157;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr3146;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr3146;
	} else
		goto tr3146;
	goto tr3100;
tr3157:
	{
		s->buffer_length = 0;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1711;
st1711:
	if ( ++p == pe )
		goto _test_eof1711;
case 1711:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3159;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3158;
	goto tr3100;
tr3148:
	{
		s->buffer_length = 0;
	}
	goto st1083;
tr3160:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1083;
tr3142:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1083;
st1083:
	if ( ++p == pe )
		goto _test_eof1083;
case 1083:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3161;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3160;
	goto tr77;
tr3136:
	{
		s->buffer_length = 0;
	}
	goto st1084;
tr3162:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1084;
tr3130:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1084;
st1084:
	if ( ++p == pe )
		goto _test_eof1084;
case 1084:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3163;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3162;
	goto tr77;
st1085:
	if ( ++p == pe )
		goto _test_eof1085;
case 1085:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr3164;
	goto tr2429;
tr3164:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1086;
tr3168:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1086;
st1086:
	if ( ++p == pe )
		goto _test_eof1086;
case 1086:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3165;
		case 32: goto tr3165;
		case 40: goto tr3166;
		case 41: goto tr3167;
		case 2058: goto tr3169;
		case 2107: goto tr3170;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3168;
	goto tr2429;
tr3173:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1087;
tr3174:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1087;
tr3179:
	{
		s->line_counter++;
	}
	goto st1087;
tr3372:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1087; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1087;
tr3165:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1087;
tr3166:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1087;
tr3167:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1087;
tr3169:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1087;
st1087:
	if ( ++p == pe )
		goto _test_eof1087;
case 1087:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1087;
		case 32: goto st1087;
		case 40: goto tr3173;
		case 41: goto tr3174;
		case 48: goto tr3175;
		case 49: goto tr3176;
		case 50: goto tr3177;
		case 51: goto tr3178;
		case 2058: goto tr3179;
		case 2107: goto tr3180;
	}
	goto tr3171;
tr3175:
	{
		*(rdata_tail++) = 0;
	}
	goto st1088;
st1088:
	if ( ++p == pe )
		goto _test_eof1088;
case 1088:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1089;
		case 32: goto st1089;
		case 40: goto tr3182;
		case 41: goto tr3183;
		case 2058: goto tr3184;
		case 2107: goto tr3185;
	}
	goto tr3171;
tr3182:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1089;
tr3183:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1089;
tr3184:
	{
		s->line_counter++;
	}
	goto st1089;
tr3234:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1089; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1089;
st1089:
	if ( ++p == pe )
		goto _test_eof1089;
case 1089:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1089;
		case 32: goto st1089;
		case 40: goto tr3182;
		case 41: goto tr3183;
		case 2058: goto tr3184;
		case 2107: goto tr3185;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3187;
	goto tr3186;
tr3187:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1090;
tr3191:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1090;
st1090:
	if ( ++p == pe )
		goto _test_eof1090;
case 1090:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3188;
		case 32: goto tr3188;
		case 40: goto tr3189;
		case 41: goto tr3190;
		case 2058: goto tr3192;
		case 2107: goto tr3193;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3191;
	goto tr3186;
tr3195:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1091;
tr3196:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1091;
tr3198:
	{
		s->line_counter++;
	}
	goto st1091;
tr3232:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1091; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1091;
tr3188:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1091;
tr3189:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1091;
tr3190:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1091;
tr3192:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1091;
st1091:
	if ( ++p == pe )
		goto _test_eof1091;
case 1091:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1091;
		case 32: goto st1091;
		case 40: goto tr3195;
		case 41: goto tr3196;
		case 46: goto st1092;
		case 2058: goto tr3198;
		case 2107: goto tr3199;
	}
	goto tr3171;
st1092:
	if ( ++p == pe )
		goto _test_eof1092;
case 1092:
	_widec = (*p);
	if ( (*p) < 32 ) {
		if ( (*p) > 9 ) {
			if ( 10 <= (*p) && (*p) <= 10 ) {
				_widec = (short)(9856 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
				if (
 !s->multiline  ) _widec += 512;
				if (
 s->number64 != 0  ) _widec += 1024;
				if (
 s->number64 == 0  ) _widec += 2048;
			}
		} else if ( (*p) >= 9 ) {
			_widec = (short)(6784 + ((*p) - -128));
			if (
 s->number64 != 0  ) _widec += 256;
			if (
 s->number64 == 0  ) _widec += 512;
		}
	} else if ( (*p) > 32 ) {
		if ( (*p) < 41 ) {
			if ( 40 <= (*p) && (*p) <= 40 ) {
				_widec = (short)(6784 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
				if (
 s->number64 == 0  ) _widec += 512;
			}
		} else if ( (*p) > 41 ) {
			if ( 59 <= (*p) && (*p) <= 59 ) {
				_widec = (short)(9856 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
				if (
 !s->multiline  ) _widec += 512;
				if (
 s->number64 != 0  ) _widec += 1024;
				if (
 s->number64 == 0  ) _widec += 2048;
			}
		} else {
			_widec = (short)(6784 + ((*p) - -128));
			if (
 s->number64 != 0  ) _widec += 256;
			if (
 s->number64 == 0  ) _widec += 512;
		}
	} else {
		_widec = (short)(6784 + ((*p) - -128));
		if (
 s->number64 != 0  ) _widec += 256;
		if (
 s->number64 == 0  ) _widec += 512;
	}
	switch( _widec ) {
		case 7177: goto st1093;
		case 7200: goto st1093;
		case 7208: goto tr3202;
		case 7209: goto tr3203;
		case 7433: goto st1096;
		case 7456: goto st1096;
		case 7464: goto tr3205;
		case 7465: goto tr3206;
		case 7689: goto st1098;
		case 7712: goto st1098;
		case 7720: goto tr3208;
		case 7721: goto tr3209;
		case 10506: goto tr3210;
		case 10555: goto tr3210;
		case 10762: goto tr3210;
		case 10811: goto tr3210;
		case 11274: goto tr3211;
		case 11323: goto tr3212;
		case 11530: goto tr3210;
		case 11579: goto tr3210;
		case 11786: goto tr3213;
		case 11835: goto tr3214;
		case 12298: goto tr3215;
		case 12347: goto tr3216;
		case 12554: goto tr3210;
		case 12603: goto tr3210;
		case 12810: goto tr3217;
		case 12859: goto tr3218;
		case 13322: goto tr3219;
		case 13371: goto tr3220;
		case 13578: goto tr3210;
		case 13627: goto tr3210;
		case 13834: goto tr3221;
		case 13883: goto tr3222;
	}
	goto tr3200;
tr3202:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1093;
tr3203:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1093;
tr3211:
	{
		s->line_counter++;
	}
	goto st1093;
tr3226:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1093; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1093;
tr3256:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	goto st1093;
tr3301:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
		rdata_tail += ZS_INET6_ADDR_LENGTH;
	}
	goto st1093;
tr3345:
	{
		rdata_tail += s->dname_tmp_length;
	}
	goto st1093;
tr3346:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1093;
tr3347:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1093;
tr3355:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	goto st1093;
tr3257:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1093;
tr3258:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1093;
tr3266:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	{
		s->line_counter++;
	}
	goto st1093;
tr3302:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
		rdata_tail += ZS_INET6_ADDR_LENGTH;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1093;
tr3303:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
		rdata_tail += ZS_INET6_ADDR_LENGTH;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1093;
tr3311:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
		rdata_tail += ZS_INET6_ADDR_LENGTH;
	}
	{
		s->line_counter++;
	}
	goto st1093;
st1093:
	if ( ++p == pe )
		goto _test_eof1093;
case 1093:
	_widec = (*p);
	if ( (*p) < 43 ) {
		if ( (*p) < 32 ) {
			if ( (*p) > 9 ) {
				if ( 10 <= (*p) && (*p) <= 10 ) {
					_widec = (short)(4224 + ((*p) - -128));
					if (
 s->multiline  ) _widec += 256;
					if (
 s->number64 != 0  ) _widec += 512;
				}
			} else if ( (*p) >= 9 ) {
				_widec = (short)(3712 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
			}
		} else if ( (*p) > 32 ) {
			if ( (*p) > 40 ) {
				if ( 41 <= (*p) && (*p) <= 41 ) {
					_widec = (short)(3712 + ((*p) - -128));
					if (
 s->number64 != 0  ) _widec += 256;
				}
			} else if ( (*p) >= 40 ) {
				_widec = (short)(3712 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
			}
		} else {
			_widec = (short)(3712 + ((*p) - -128));
			if (
 s->number64 != 0  ) _widec += 256;
		}
	} else if ( (*p) > 43 ) {
		if ( (*p) < 59 ) {
			if ( (*p) > 47 ) {
				if ( 48 <= (*p) && (*p) <= 57 ) {
					_widec = (short)(3712 + ((*p) - -128));
					if (
 s->number64 != 0  ) _widec += 256;
				}
			} else if ( (*p) >= 47 ) {
				_widec = (short)(3712 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
			}
		} else if ( (*p) > 59 ) {
			if ( (*p) > 90 ) {
				if ( 97 <= (*p) && (*p) <= 122 ) {
					_widec = (short)(3712 + ((*p) - -128));
					if (
 s->number64 != 0  ) _widec += 256;
				}
			} else if ( (*p) >= 65 ) {
				_widec = (short)(3712 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
			}
		} else {
			_widec = (short)(4224 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 s->number64 != 0  ) _widec += 512;
		}
	} else {
		_widec = (short)(3712 + ((*p) - -128));
		if (
 s->number64 != 0  ) _widec += 256;
	}
	switch( _widec ) {
		case 4105: goto st1093;
		case 4128: goto st1093;
		case 4136: goto tr3202;
		case 4137: goto tr3203;
		case 4139: goto tr3224;
		case 5130: goto tr3211;
		case 5179: goto tr3212;
	}
	if ( _widec < 4161 ) {
		if ( 4143 <= _widec && _widec <= 4153 )
			goto tr3224;
	} else if ( _widec > 4186 ) {
		if ( 4193 <= _widec && _widec <= 4218 )
			goto tr3224;
	} else
		goto tr3224;
	goto tr3223;
tr3224:
	{ p--; {stack[top++] = 1094;goto st381;} }
	goto st1094;
st1094:
	if ( ++p == pe )
		goto _test_eof1094;
case 1094:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2176 + ((*p) - -128));
			if (
 !s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2176 + ((*p) - -128));
		if (
 !s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 2570: goto tr3210;
		case 2619: goto tr3210;
	}
	goto tr3223;
tr3210:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1712;
tr3265:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1712;
tr3354:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1712;
tr3310:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
		rdata_tail += ZS_INET6_ADDR_LENGTH;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1712;
st1712:
	if ( ++p == pe )
		goto _test_eof1712;
case 1712:
	goto st0;
tr3212:
	{
		s->buffer_length = 0;
	}
	goto st1095;
tr3225:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1095;
tr3356:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		s->buffer_length = 0;
	}
	goto st1095;
tr3267:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	{
		s->buffer_length = 0;
	}
	goto st1095;
tr3312:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
		rdata_tail += ZS_INET6_ADDR_LENGTH;
	}
	{
		s->buffer_length = 0;
	}
	goto st1095;
st1095:
	if ( ++p == pe )
		goto _test_eof1095;
case 1095:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(4224 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 s->number64 != 0  ) _widec += 512;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(4224 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 s->number64 != 0  ) _widec += 512;
		}
	} else {
		_widec = (short)(4224 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 s->number64 != 0  ) _widec += 512;
	}
	if ( _widec == 5130 )
		goto tr3226;
	if ( 4992 <= _widec && _widec <= 5247 )
		goto tr3225;
	goto tr3223;
tr3205:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1096;
tr3206:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1096;
tr3215:
	{
		s->line_counter++;
	}
	goto st1096;
tr3228:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1096; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1096;
tr3259:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	goto st1096;
tr3304:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
		rdata_tail += ZS_INET6_ADDR_LENGTH;
	}
	goto st1096;
tr3348:
	{
		rdata_tail += s->dname_tmp_length;
	}
	goto st1096;
tr3349:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1096;
tr3350:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1096;
tr3359:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	goto st1096;
tr3260:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1096;
tr3261:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1096;
tr3270:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	{
		s->line_counter++;
	}
	goto st1096;
tr3305:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
		rdata_tail += ZS_INET6_ADDR_LENGTH;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1096;
tr3306:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
		rdata_tail += ZS_INET6_ADDR_LENGTH;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1096;
tr3315:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
		rdata_tail += ZS_INET6_ADDR_LENGTH;
	}
	{
		s->line_counter++;
	}
	goto st1096;
st1096:
	if ( ++p == pe )
		goto _test_eof1096;
case 1096:
	_widec = (*p);
	if ( (*p) < 32 ) {
		if ( (*p) > 9 ) {
			if ( 10 <= (*p) && (*p) <= 10 ) {
				_widec = (short)(13952 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
				if (
 !s->multiline  ) _widec += 512;
				if (
 s->number64 == 0  ) _widec += 1024;
			}
		} else if ( (*p) >= 9 ) {
			_widec = (short)(5248 + ((*p) - -128));
			if (
 s->number64 == 0  ) _widec += 256;
		}
	} else if ( (*p) > 32 ) {
		if ( (*p) < 41 ) {
			if ( 40 <= (*p) && (*p) <= 40 ) {
				_widec = (short)(5248 + ((*p) - -128));
				if (
 s->number64 == 0  ) _widec += 256;
			}
		} else if ( (*p) > 41 ) {
			if ( 59 <= (*p) && (*p) <= 59 ) {
				_widec = (short)(13952 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
				if (
 !s->multiline  ) _widec += 512;
				if (
 s->number64 == 0  ) _widec += 1024;
			}
		} else {
			_widec = (short)(5248 + ((*p) - -128));
			if (
 s->number64 == 0  ) _widec += 256;
		}
	} else {
		_widec = (short)(5248 + ((*p) - -128));
		if (
 s->number64 == 0  ) _widec += 256;
	}
	switch( _widec ) {
		case 5641: goto st1096;
		case 5664: goto st1096;
		case 5672: goto tr3205;
		case 5673: goto tr3206;
		case 14602: goto tr3210;
		case 14651: goto tr3210;
		case 14858: goto tr3210;
		case 14907: goto tr3210;
		case 15370: goto tr3215;
		case 15419: goto tr3216;
		case 15626: goto tr3210;
		case 15675: goto tr3210;
		case 15882: goto tr3217;
		case 15931: goto tr3218;
	}
	goto tr3223;
tr3216:
	{
		s->buffer_length = 0;
	}
	goto st1097;
tr3227:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1097;
tr3360:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		s->buffer_length = 0;
	}
	goto st1097;
tr3271:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	{
		s->buffer_length = 0;
	}
	goto st1097;
tr3316:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
		rdata_tail += ZS_INET6_ADDR_LENGTH;
	}
	{
		s->buffer_length = 0;
	}
	goto st1097;
st1097:
	if ( ++p == pe )
		goto _test_eof1097;
case 1097:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(5760 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 s->number64 == 0  ) _widec += 512;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(5760 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 s->number64 == 0  ) _widec += 512;
		}
	} else {
		_widec = (short)(5760 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 s->number64 == 0  ) _widec += 512;
	}
	if ( _widec == 6666 )
		goto tr3228;
	if ( 6528 <= _widec && _widec <= 6783 )
		goto tr3227;
	goto tr3223;
tr3217:
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1713;
tr3272:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1713;
tr3317:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
		rdata_tail += ZS_INET6_ADDR_LENGTH;
	}
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1713;
tr3361:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1713;
st1713:
	if ( ++p == pe )
		goto _test_eof1713;
case 1713:
	_widec = (*p);
	if ( (*p) < 32 ) {
		if ( (*p) > 9 ) {
			if ( 10 <= (*p) && (*p) <= 10 ) {
				_widec = (short)(13952 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
				if (
 !s->multiline  ) _widec += 512;
				if (
 s->number64 == 0  ) _widec += 1024;
			}
		} else if ( (*p) >= 9 ) {
			_widec = (short)(5248 + ((*p) - -128));
			if (
 s->number64 == 0  ) _widec += 256;
		}
	} else if ( (*p) > 32 ) {
		if ( (*p) < 41 ) {
			if ( 40 <= (*p) && (*p) <= 40 ) {
				_widec = (short)(5248 + ((*p) - -128));
				if (
 s->number64 == 0  ) _widec += 256;
			}
		} else if ( (*p) > 41 ) {
			if ( 59 <= (*p) && (*p) <= 59 ) {
				_widec = (short)(13952 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
				if (
 !s->multiline  ) _widec += 512;
				if (
 s->number64 == 0  ) _widec += 1024;
			}
		} else {
			_widec = (short)(5248 + ((*p) - -128));
			if (
 s->number64 == 0  ) _widec += 256;
		}
	} else {
		_widec = (short)(5248 + ((*p) - -128));
		if (
 s->number64 == 0  ) _widec += 256;
	}
	switch( _widec ) {
		case 5641: goto st1096;
		case 5664: goto st1096;
		case 5672: goto tr3205;
		case 5673: goto tr3206;
		case 14602: goto tr3210;
		case 14651: goto tr3210;
		case 14858: goto tr3210;
		case 14907: goto tr3210;
		case 15370: goto tr3215;
		case 15419: goto tr3216;
		case 15626: goto tr3210;
		case 15675: goto tr3210;
		case 15882: goto tr3217;
		case 15931: goto tr3218;
	}
	goto tr3223;
tr3218:
	{
		s->buffer_length = 0;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1714;
tr3273:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1714;
tr3318:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
		rdata_tail += ZS_INET6_ADDR_LENGTH;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1714;
tr3362:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1714;
st1714:
	if ( ++p == pe )
		goto _test_eof1714;
case 1714:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(5760 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 s->number64 == 0  ) _widec += 512;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(5760 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 s->number64 == 0  ) _widec += 512;
		}
	} else {
		_widec = (short)(5760 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 s->number64 == 0  ) _widec += 512;
	}
	if ( _widec == 6666 )
		goto tr3228;
	if ( 6528 <= _widec && _widec <= 6783 )
		goto tr3227;
	goto tr3223;
tr3208:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1098;
tr3209:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1098;
tr3219:
	{
		s->line_counter++;
	}
	goto st1098;
tr3230:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1098; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1098;
tr3262:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	goto st1098;
tr3307:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
		rdata_tail += ZS_INET6_ADDR_LENGTH;
	}
	goto st1098;
tr3351:
	{
		rdata_tail += s->dname_tmp_length;
	}
	goto st1098;
tr3352:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1098;
tr3353:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1098;
tr3363:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	goto st1098;
tr3263:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1098;
tr3264:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1098;
tr3274:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	{
		s->line_counter++;
	}
	goto st1098;
tr3308:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
		rdata_tail += ZS_INET6_ADDR_LENGTH;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1098;
tr3309:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
		rdata_tail += ZS_INET6_ADDR_LENGTH;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1098;
tr3319:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
		rdata_tail += ZS_INET6_ADDR_LENGTH;
	}
	{
		s->line_counter++;
	}
	goto st1098;
st1098:
	if ( ++p == pe )
		goto _test_eof1098;
case 1098:
	_widec = (*p);
	if ( (*p) < 43 ) {
		if ( (*p) < 32 ) {
			if ( (*p) > 9 ) {
				if ( 10 <= (*p) && (*p) <= 10 ) {
					_widec = (short)(9856 + ((*p) - -128));
					if (
 s->multiline  ) _widec += 256;
					if (
 !s->multiline  ) _widec += 512;
					if (
 s->number64 != 0  ) _widec += 1024;
					if (
 s->number64 == 0  ) _widec += 2048;
				}
			} else if ( (*p) >= 9 ) {
				_widec = (short)(6784 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
				if (
 s->number64 == 0  ) _widec += 512;
			}
		} else if ( (*p) > 32 ) {
			if ( (*p) > 40 ) {
				if ( 41 <= (*p) && (*p) <= 41 ) {
					_widec = (short)(6784 + ((*p) - -128));
					if (
 s->number64 != 0  ) _widec += 256;
					if (
 s->number64 == 0  ) _widec += 512;
				}
			} else if ( (*p) >= 40 ) {
				_widec = (short)(6784 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
				if (
 s->number64 == 0  ) _widec += 512;
			}
		} else {
			_widec = (short)(6784 + ((*p) - -128));
			if (
 s->number64 != 0  ) _widec += 256;
			if (
 s->number64 == 0  ) _widec += 512;
		}
	} else if ( (*p) > 43 ) {
		if ( (*p) < 59 ) {
			if ( (*p) > 47 ) {
				if ( 48 <= (*p) && (*p) <= 57 ) {
					_widec = (short)(3712 + ((*p) - -128));
					if (
 s->number64 != 0  ) _widec += 256;
				}
			} else if ( (*p) >= 47 ) {
				_widec = (short)(3712 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
			}
		} else if ( (*p) > 59 ) {
			if ( (*p) > 90 ) {
				if ( 97 <= (*p) && (*p) <= 122 ) {
					_widec = (short)(3712 + ((*p) - -128));
					if (
 s->number64 != 0  ) _widec += 256;
				}
			} else if ( (*p) >= 65 ) {
				_widec = (short)(3712 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
			}
		} else {
			_widec = (short)(9856 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
			if (
 s->number64 != 0  ) _widec += 1024;
			if (
 s->number64 == 0  ) _widec += 2048;
		}
	} else {
		_widec = (short)(3712 + ((*p) - -128));
		if (
 s->number64 != 0  ) _widec += 256;
	}
	switch( _widec ) {
		case 4139: goto tr3224;
		case 7177: goto st1093;
		case 7200: goto st1093;
		case 7208: goto tr3202;
		case 7209: goto tr3203;
		case 7433: goto st1096;
		case 7456: goto st1096;
		case 7464: goto tr3205;
		case 7465: goto tr3206;
		case 7689: goto st1098;
		case 7712: goto st1098;
		case 7720: goto tr3208;
		case 7721: goto tr3209;
		case 10506: goto tr3210;
		case 10555: goto tr3210;
		case 10762: goto tr3210;
		case 10811: goto tr3210;
		case 11274: goto tr3211;
		case 11323: goto tr3212;
		case 11530: goto tr3210;
		case 11579: goto tr3210;
		case 11786: goto tr3213;
		case 11835: goto tr3214;
		case 12298: goto tr3215;
		case 12347: goto tr3216;
		case 12554: goto tr3210;
		case 12603: goto tr3210;
		case 12810: goto tr3217;
		case 12859: goto tr3218;
		case 13322: goto tr3219;
		case 13371: goto tr3220;
		case 13578: goto tr3210;
		case 13627: goto tr3210;
		case 13834: goto tr3221;
		case 13883: goto tr3222;
	}
	if ( _widec < 4161 ) {
		if ( 4143 <= _widec && _widec <= 4153 )
			goto tr3224;
	} else if ( _widec > 4186 ) {
		if ( 4193 <= _widec && _widec <= 4218 )
			goto tr3224;
	} else
		goto tr3224;
	goto tr3223;
tr3213:
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1715;
tr3268:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1715;
tr3313:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
		rdata_tail += ZS_INET6_ADDR_LENGTH;
	}
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1715;
tr3357:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1715;
st1715:
	if ( ++p == pe )
		goto _test_eof1715;
case 1715:
	_widec = (*p);
	if ( (*p) < 43 ) {
		if ( (*p) < 32 ) {
			if ( (*p) > 9 ) {
				if ( 10 <= (*p) && (*p) <= 10 ) {
					_widec = (short)(4224 + ((*p) - -128));
					if (
 s->multiline  ) _widec += 256;
					if (
 s->number64 != 0  ) _widec += 512;
				}
			} else if ( (*p) >= 9 ) {
				_widec = (short)(3712 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
			}
		} else if ( (*p) > 32 ) {
			if ( (*p) > 40 ) {
				if ( 41 <= (*p) && (*p) <= 41 ) {
					_widec = (short)(3712 + ((*p) - -128));
					if (
 s->number64 != 0  ) _widec += 256;
				}
			} else if ( (*p) >= 40 ) {
				_widec = (short)(3712 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
			}
		} else {
			_widec = (short)(3712 + ((*p) - -128));
			if (
 s->number64 != 0  ) _widec += 256;
		}
	} else if ( (*p) > 43 ) {
		if ( (*p) < 59 ) {
			if ( (*p) > 47 ) {
				if ( 48 <= (*p) && (*p) <= 57 ) {
					_widec = (short)(3712 + ((*p) - -128));
					if (
 s->number64 != 0  ) _widec += 256;
				}
			} else if ( (*p) >= 47 ) {
				_widec = (short)(3712 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
			}
		} else if ( (*p) > 59 ) {
			if ( (*p) > 90 ) {
				if ( 97 <= (*p) && (*p) <= 122 ) {
					_widec = (short)(3712 + ((*p) - -128));
					if (
 s->number64 != 0  ) _widec += 256;
				}
			} else if ( (*p) >= 65 ) {
				_widec = (short)(3712 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
			}
		} else {
			_widec = (short)(4224 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 s->number64 != 0  ) _widec += 512;
		}
	} else {
		_widec = (short)(3712 + ((*p) - -128));
		if (
 s->number64 != 0  ) _widec += 256;
	}
	switch( _widec ) {
		case 4105: goto st1093;
		case 4128: goto st1093;
		case 4136: goto tr3202;
		case 4137: goto tr3203;
		case 4139: goto tr3224;
		case 5130: goto tr3211;
		case 5179: goto tr3212;
	}
	if ( _widec < 4161 ) {
		if ( 4143 <= _widec && _widec <= 4153 )
			goto tr3224;
	} else if ( _widec > 4186 ) {
		if ( 4193 <= _widec && _widec <= 4218 )
			goto tr3224;
	} else
		goto tr3224;
	goto tr3223;
tr3214:
	{
		s->buffer_length = 0;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1716;
tr3269:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1716;
tr3314:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
		rdata_tail += ZS_INET6_ADDR_LENGTH;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1716;
tr3358:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1716;
st1716:
	if ( ++p == pe )
		goto _test_eof1716;
case 1716:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(4224 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 s->number64 != 0  ) _widec += 512;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(4224 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 s->number64 != 0  ) _widec += 512;
		}
	} else {
		_widec = (short)(4224 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 s->number64 != 0  ) _widec += 512;
	}
	if ( _widec == 5130 )
		goto tr3226;
	if ( 4992 <= _widec && _widec <= 5247 )
		goto tr3225;
	goto tr3223;
tr3220:
	{
		s->buffer_length = 0;
	}
	goto st1099;
tr3229:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1099;
tr3364:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		s->buffer_length = 0;
	}
	goto st1099;
tr3275:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	{
		s->buffer_length = 0;
	}
	goto st1099;
tr3320:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
		rdata_tail += ZS_INET6_ADDR_LENGTH;
	}
	{
		s->buffer_length = 0;
	}
	goto st1099;
st1099:
	if ( ++p == pe )
		goto _test_eof1099;
case 1099:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(7808 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 s->number64 != 0  ) _widec += 512;
			if (
 s->number64 == 0  ) _widec += 1024;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(7808 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 s->number64 != 0  ) _widec += 512;
			if (
 s->number64 == 0  ) _widec += 1024;
		}
	} else {
		_widec = (short)(7808 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 s->number64 != 0  ) _widec += 512;
		if (
 s->number64 == 0  ) _widec += 1024;
	}
	switch( _widec ) {
		case 8714: goto tr3226;
		case 9226: goto tr3228;
		case 9738: goto tr3230;
	}
	if ( _widec < 9088 ) {
		if ( 8576 <= _widec && _widec <= 8831 )
			goto tr3225;
	} else if ( _widec > 9343 ) {
		if ( 9600 <= _widec && _widec <= 9855 )
			goto tr3229;
	} else
		goto tr3227;
	goto tr3223;
tr3221:
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1717;
tr3276:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1717;
tr3321:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
		rdata_tail += ZS_INET6_ADDR_LENGTH;
	}
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1717;
tr3365:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1717;
st1717:
	if ( ++p == pe )
		goto _test_eof1717;
case 1717:
	_widec = (*p);
	if ( (*p) < 43 ) {
		if ( (*p) < 32 ) {
			if ( (*p) > 9 ) {
				if ( 10 <= (*p) && (*p) <= 10 ) {
					_widec = (short)(9856 + ((*p) - -128));
					if (
 s->multiline  ) _widec += 256;
					if (
 !s->multiline  ) _widec += 512;
					if (
 s->number64 != 0  ) _widec += 1024;
					if (
 s->number64 == 0  ) _widec += 2048;
				}
			} else if ( (*p) >= 9 ) {
				_widec = (short)(6784 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
				if (
 s->number64 == 0  ) _widec += 512;
			}
		} else if ( (*p) > 32 ) {
			if ( (*p) > 40 ) {
				if ( 41 <= (*p) && (*p) <= 41 ) {
					_widec = (short)(6784 + ((*p) - -128));
					if (
 s->number64 != 0  ) _widec += 256;
					if (
 s->number64 == 0  ) _widec += 512;
				}
			} else if ( (*p) >= 40 ) {
				_widec = (short)(6784 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
				if (
 s->number64 == 0  ) _widec += 512;
			}
		} else {
			_widec = (short)(6784 + ((*p) - -128));
			if (
 s->number64 != 0  ) _widec += 256;
			if (
 s->number64 == 0  ) _widec += 512;
		}
	} else if ( (*p) > 43 ) {
		if ( (*p) < 59 ) {
			if ( (*p) > 47 ) {
				if ( 48 <= (*p) && (*p) <= 57 ) {
					_widec = (short)(3712 + ((*p) - -128));
					if (
 s->number64 != 0  ) _widec += 256;
				}
			} else if ( (*p) >= 47 ) {
				_widec = (short)(3712 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
			}
		} else if ( (*p) > 59 ) {
			if ( (*p) > 90 ) {
				if ( 97 <= (*p) && (*p) <= 122 ) {
					_widec = (short)(3712 + ((*p) - -128));
					if (
 s->number64 != 0  ) _widec += 256;
				}
			} else if ( (*p) >= 65 ) {
				_widec = (short)(3712 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
			}
		} else {
			_widec = (short)(9856 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
			if (
 s->number64 != 0  ) _widec += 1024;
			if (
 s->number64 == 0  ) _widec += 2048;
		}
	} else {
		_widec = (short)(3712 + ((*p) - -128));
		if (
 s->number64 != 0  ) _widec += 256;
	}
	switch( _widec ) {
		case 4139: goto tr3224;
		case 7177: goto st1093;
		case 7200: goto st1093;
		case 7208: goto tr3202;
		case 7209: goto tr3203;
		case 7433: goto st1096;
		case 7456: goto st1096;
		case 7464: goto tr3205;
		case 7465: goto tr3206;
		case 7689: goto st1098;
		case 7712: goto st1098;
		case 7720: goto tr3208;
		case 7721: goto tr3209;
		case 10506: goto tr3210;
		case 10555: goto tr3210;
		case 10762: goto tr3210;
		case 10811: goto tr3210;
		case 11274: goto tr3211;
		case 11323: goto tr3212;
		case 11530: goto tr3210;
		case 11579: goto tr3210;
		case 11786: goto tr3213;
		case 11835: goto tr3214;
		case 12298: goto tr3215;
		case 12347: goto tr3216;
		case 12554: goto tr3210;
		case 12603: goto tr3210;
		case 12810: goto tr3217;
		case 12859: goto tr3218;
		case 13322: goto tr3219;
		case 13371: goto tr3220;
		case 13578: goto tr3210;
		case 13627: goto tr3210;
		case 13834: goto tr3221;
		case 13883: goto tr3222;
	}
	if ( _widec < 4161 ) {
		if ( 4143 <= _widec && _widec <= 4153 )
			goto tr3224;
	} else if ( _widec > 4186 ) {
		if ( 4193 <= _widec && _widec <= 4218 )
			goto tr3224;
	} else
		goto tr3224;
	goto tr3223;
tr3222:
	{
		s->buffer_length = 0;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1718;
tr3277:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1718;
tr3322:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET6, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV6);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET6_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET6_ADDR_LENGTH);
		rdata_tail += ZS_INET6_ADDR_LENGTH;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1718;
tr3366:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		s->buffer_length = 0;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1718;
st1718:
	if ( ++p == pe )
		goto _test_eof1718;
case 1718:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(7808 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 s->number64 != 0  ) _widec += 512;
			if (
 s->number64 == 0  ) _widec += 1024;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(7808 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 s->number64 != 0  ) _widec += 512;
			if (
 s->number64 == 0  ) _widec += 1024;
		}
	} else {
		_widec = (short)(7808 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 s->number64 != 0  ) _widec += 512;
		if (
 s->number64 == 0  ) _widec += 1024;
	}
	switch( _widec ) {
		case 8714: goto tr3226;
		case 9226: goto tr3228;
		case 9738: goto tr3230;
	}
	if ( _widec < 9088 ) {
		if ( 8576 <= _widec && _widec <= 8831 )
			goto tr3225;
	} else if ( _widec > 9343 ) {
		if ( 9600 <= _widec && _widec <= 9855 )
			goto tr3229;
	} else
		goto tr3227;
	goto tr3223;
tr3199:
	{
		s->buffer_length = 0;
	}
	goto st1100;
tr3231:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1100;
tr3193:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1100;
st1100:
	if ( ++p == pe )
		goto _test_eof1100;
case 1100:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3232;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3231;
	goto tr3171;
tr3185:
	{
		s->buffer_length = 0;
	}
	goto st1101;
tr3233:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1101;
st1101:
	if ( ++p == pe )
		goto _test_eof1101;
case 1101:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3234;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3233;
	goto tr3171;
tr3176:
	{
		*(rdata_tail++) = 1;
	}
	goto st1102;
st1102:
	if ( ++p == pe )
		goto _test_eof1102;
case 1102:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1103;
		case 32: goto st1103;
		case 40: goto tr3236;
		case 41: goto tr3237;
		case 2058: goto tr3238;
		case 2107: goto tr3239;
	}
	goto tr3171;
tr3236:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1103;
tr3237:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1103;
tr3238:
	{
		s->line_counter++;
	}
	goto st1103;
tr3281:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1103; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1103;
st1103:
	if ( ++p == pe )
		goto _test_eof1103;
case 1103:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1103;
		case 32: goto st1103;
		case 40: goto tr3236;
		case 41: goto tr3237;
		case 2058: goto tr3238;
		case 2107: goto tr3239;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3240;
	goto tr3186;
tr3240:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1104;
tr3244:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1104;
st1104:
	if ( ++p == pe )
		goto _test_eof1104;
case 1104:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3241;
		case 32: goto tr3241;
		case 40: goto tr3242;
		case 41: goto tr3243;
		case 2058: goto tr3245;
		case 2107: goto tr3246;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3244;
	goto tr3186;
tr3249:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1105;
tr3250:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1105;
tr3252:
	{
		s->line_counter++;
	}
	goto st1105;
tr3279:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1105; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1105;
tr3241:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1105;
tr3242:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1105;
tr3243:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1105;
tr3245:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1105;
st1105:
	if ( ++p == pe )
		goto _test_eof1105;
case 1105:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1105;
		case 32: goto st1105;
		case 40: goto tr3249;
		case 41: goto tr3250;
		case 46: goto tr3251;
		case 2058: goto tr3252;
		case 2107: goto tr3253;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3251;
	goto tr3247;
tr3255:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1106;
tr3251:
	{
		s->buffer_length = 0;
	}
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1106;
st1106:
	if ( ++p == pe )
		goto _test_eof1106;
case 1106:
	_widec = (*p);
	if ( (*p) < 32 ) {
		if ( (*p) > 9 ) {
			if ( 10 <= (*p) && (*p) <= 10 ) {
				_widec = (short)(9856 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
				if (
 !s->multiline  ) _widec += 512;
				if (
 s->number64 != 0  ) _widec += 1024;
				if (
 s->number64 == 0  ) _widec += 2048;
			}
		} else if ( (*p) >= 9 ) {
			_widec = (short)(6784 + ((*p) - -128));
			if (
 s->number64 != 0  ) _widec += 256;
			if (
 s->number64 == 0  ) _widec += 512;
		}
	} else if ( (*p) > 32 ) {
		if ( (*p) < 41 ) {
			if ( 40 <= (*p) && (*p) <= 40 ) {
				_widec = (short)(6784 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
				if (
 s->number64 == 0  ) _widec += 512;
			}
		} else if ( (*p) > 41 ) {
			if ( 59 <= (*p) && (*p) <= 59 ) {
				_widec = (short)(9856 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
				if (
 !s->multiline  ) _widec += 512;
				if (
 s->number64 != 0  ) _widec += 1024;
				if (
 s->number64 == 0  ) _widec += 2048;
			}
		} else {
			_widec = (short)(6784 + ((*p) - -128));
			if (
 s->number64 != 0  ) _widec += 256;
			if (
 s->number64 == 0  ) _widec += 512;
		}
	} else {
		_widec = (short)(6784 + ((*p) - -128));
		if (
 s->number64 != 0  ) _widec += 256;
		if (
 s->number64 == 0  ) _widec += 512;
	}
	switch( _widec ) {
		case 46: goto tr3255;
		case 7177: goto tr3256;
		case 7200: goto tr3256;
		case 7208: goto tr3257;
		case 7209: goto tr3258;
		case 7433: goto tr3259;
		case 7456: goto tr3259;
		case 7464: goto tr3260;
		case 7465: goto tr3261;
		case 7689: goto tr3262;
		case 7712: goto tr3262;
		case 7720: goto tr3263;
		case 7721: goto tr3264;
		case 10506: goto tr3265;
		case 10555: goto tr3265;
		case 10762: goto tr3265;
		case 10811: goto tr3265;
		case 11274: goto tr3266;
		case 11323: goto tr3267;
		case 11530: goto tr3265;
		case 11579: goto tr3265;
		case 11786: goto tr3268;
		case 11835: goto tr3269;
		case 12298: goto tr3270;
		case 12347: goto tr3271;
		case 12554: goto tr3265;
		case 12603: goto tr3265;
		case 12810: goto tr3272;
		case 12859: goto tr3273;
		case 13322: goto tr3274;
		case 13371: goto tr3275;
		case 13578: goto tr3265;
		case 13627: goto tr3265;
		case 13834: goto tr3276;
		case 13883: goto tr3277;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3255;
	goto tr3254;
tr3253:
	{
		s->buffer_length = 0;
	}
	goto st1107;
tr3278:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1107;
tr3246:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1107;
st1107:
	if ( ++p == pe )
		goto _test_eof1107;
case 1107:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3279;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3278;
	goto tr3171;
tr3239:
	{
		s->buffer_length = 0;
	}
	goto st1108;
tr3280:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1108;
st1108:
	if ( ++p == pe )
		goto _test_eof1108;
case 1108:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3281;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3280;
	goto tr3171;
tr3177:
	{
		*(rdata_tail++) = 2;
	}
	goto st1109;
st1109:
	if ( ++p == pe )
		goto _test_eof1109;
case 1109:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1110;
		case 32: goto st1110;
		case 40: goto tr3283;
		case 41: goto tr3284;
		case 2058: goto tr3285;
		case 2107: goto tr3286;
	}
	goto tr3171;
tr3283:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1110;
tr3284:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1110;
tr3285:
	{
		s->line_counter++;
	}
	goto st1110;
tr3326:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1110; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1110;
st1110:
	if ( ++p == pe )
		goto _test_eof1110;
case 1110:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1110;
		case 32: goto st1110;
		case 40: goto tr3283;
		case 41: goto tr3284;
		case 2058: goto tr3285;
		case 2107: goto tr3286;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3287;
	goto tr3186;
tr3287:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1111;
tr3291:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1111;
st1111:
	if ( ++p == pe )
		goto _test_eof1111;
case 1111:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3288;
		case 32: goto tr3288;
		case 40: goto tr3289;
		case 41: goto tr3290;
		case 2058: goto tr3292;
		case 2107: goto tr3293;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3291;
	goto tr3186;
tr3295:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1112;
tr3296:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1112;
tr3298:
	{
		s->line_counter++;
	}
	goto st1112;
tr3324:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1112; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1112;
tr3288:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1112;
tr3289:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1112;
tr3290:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1112;
tr3292:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1112;
st1112:
	if ( ++p == pe )
		goto _test_eof1112;
case 1112:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1112;
		case 32: goto st1112;
		case 40: goto tr3295;
		case 41: goto tr3296;
		case 46: goto tr3297;
		case 2058: goto tr3298;
		case 2107: goto tr3299;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 58 )
			goto tr3297;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr3297;
	} else
		goto tr3297;
	goto tr3247;
tr3300:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1113;
tr3297:
	{
		s->buffer_length = 0;
	}
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1113;
st1113:
	if ( ++p == pe )
		goto _test_eof1113;
case 1113:
	_widec = (*p);
	if ( (*p) < 32 ) {
		if ( (*p) > 9 ) {
			if ( 10 <= (*p) && (*p) <= 10 ) {
				_widec = (short)(9856 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
				if (
 !s->multiline  ) _widec += 512;
				if (
 s->number64 != 0  ) _widec += 1024;
				if (
 s->number64 == 0  ) _widec += 2048;
			}
		} else if ( (*p) >= 9 ) {
			_widec = (short)(6784 + ((*p) - -128));
			if (
 s->number64 != 0  ) _widec += 256;
			if (
 s->number64 == 0  ) _widec += 512;
		}
	} else if ( (*p) > 32 ) {
		if ( (*p) < 41 ) {
			if ( 40 <= (*p) && (*p) <= 40 ) {
				_widec = (short)(6784 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
				if (
 s->number64 == 0  ) _widec += 512;
			}
		} else if ( (*p) > 41 ) {
			if ( 59 <= (*p) && (*p) <= 59 ) {
				_widec = (short)(9856 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
				if (
 !s->multiline  ) _widec += 512;
				if (
 s->number64 != 0  ) _widec += 1024;
				if (
 s->number64 == 0  ) _widec += 2048;
			}
		} else {
			_widec = (short)(6784 + ((*p) - -128));
			if (
 s->number64 != 0  ) _widec += 256;
			if (
 s->number64 == 0  ) _widec += 512;
		}
	} else {
		_widec = (short)(6784 + ((*p) - -128));
		if (
 s->number64 != 0  ) _widec += 256;
		if (
 s->number64 == 0  ) _widec += 512;
	}
	switch( _widec ) {
		case 46: goto tr3300;
		case 7177: goto tr3301;
		case 7200: goto tr3301;
		case 7208: goto tr3302;
		case 7209: goto tr3303;
		case 7433: goto tr3304;
		case 7456: goto tr3304;
		case 7464: goto tr3305;
		case 7465: goto tr3306;
		case 7689: goto tr3307;
		case 7712: goto tr3307;
		case 7720: goto tr3308;
		case 7721: goto tr3309;
		case 10506: goto tr3310;
		case 10555: goto tr3310;
		case 10762: goto tr3310;
		case 10811: goto tr3310;
		case 11274: goto tr3311;
		case 11323: goto tr3312;
		case 11530: goto tr3310;
		case 11579: goto tr3310;
		case 11786: goto tr3313;
		case 11835: goto tr3314;
		case 12298: goto tr3315;
		case 12347: goto tr3316;
		case 12554: goto tr3310;
		case 12603: goto tr3310;
		case 12810: goto tr3317;
		case 12859: goto tr3318;
		case 13322: goto tr3319;
		case 13371: goto tr3320;
		case 13578: goto tr3310;
		case 13627: goto tr3310;
		case 13834: goto tr3321;
		case 13883: goto tr3322;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 58 )
			goto tr3300;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr3300;
	} else
		goto tr3300;
	goto tr3254;
tr3299:
	{
		s->buffer_length = 0;
	}
	goto st1114;
tr3323:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1114;
tr3293:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1114;
st1114:
	if ( ++p == pe )
		goto _test_eof1114;
case 1114:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3324;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3323;
	goto tr3171;
tr3286:
	{
		s->buffer_length = 0;
	}
	goto st1115;
tr3325:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1115;
st1115:
	if ( ++p == pe )
		goto _test_eof1115;
case 1115:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3326;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3325;
	goto tr3171;
tr3178:
	{
		*(rdata_tail++) = 3;
	}
	goto st1116;
st1116:
	if ( ++p == pe )
		goto _test_eof1116;
case 1116:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1117;
		case 32: goto st1117;
		case 40: goto tr3328;
		case 41: goto tr3329;
		case 2058: goto tr3330;
		case 2107: goto tr3331;
	}
	goto tr3171;
tr3328:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1117;
tr3329:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1117;
tr3330:
	{
		s->line_counter++;
	}
	goto st1117;
tr3370:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1117; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1117;
st1117:
	if ( ++p == pe )
		goto _test_eof1117;
case 1117:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1117;
		case 32: goto st1117;
		case 40: goto tr3328;
		case 41: goto tr3329;
		case 2058: goto tr3330;
		case 2107: goto tr3331;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3332;
	goto tr3186;
tr3332:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1118;
tr3336:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1118;
st1118:
	if ( ++p == pe )
		goto _test_eof1118;
case 1118:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3333;
		case 32: goto tr3333;
		case 40: goto tr3334;
		case 41: goto tr3335;
		case 2058: goto tr3337;
		case 2107: goto tr3338;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3336;
	goto tr3186;
tr3340:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1119;
tr3341:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1119;
tr3343:
	{
		s->line_counter++;
	}
	goto st1119;
tr3368:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1119; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1119;
tr3333:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1119;
tr3334:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1119;
tr3335:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1119;
tr3337:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1119;
st1119:
	if ( ++p == pe )
		goto _test_eof1119;
case 1119:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1119;
		case 32: goto st1119;
		case 40: goto tr3340;
		case 41: goto tr3341;
		case 42: goto tr3342;
		case 92: goto tr3342;
		case 95: goto tr3342;
		case 2058: goto tr3343;
		case 2107: goto tr3344;
	}
	if ( _widec < 64 ) {
		if ( 45 <= _widec && _widec <= 57 )
			goto tr3342;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr3342;
	} else
		goto tr3342;
	goto tr3171;
tr3342:
	{
		s->dname = rdata_tail;
	}
	{ p--; {stack[top++] = 1120;goto st321;} }
	goto st1120;
st1120:
	if ( ++p == pe )
		goto _test_eof1120;
case 1120:
	_widec = (*p);
	if ( (*p) < 32 ) {
		if ( (*p) > 9 ) {
			if ( 10 <= (*p) && (*p) <= 10 ) {
				_widec = (short)(9856 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
				if (
 !s->multiline  ) _widec += 512;
				if (
 s->number64 != 0  ) _widec += 1024;
				if (
 s->number64 == 0  ) _widec += 2048;
			}
		} else if ( (*p) >= 9 ) {
			_widec = (short)(6784 + ((*p) - -128));
			if (
 s->number64 != 0  ) _widec += 256;
			if (
 s->number64 == 0  ) _widec += 512;
		}
	} else if ( (*p) > 32 ) {
		if ( (*p) < 41 ) {
			if ( 40 <= (*p) && (*p) <= 40 ) {
				_widec = (short)(6784 + ((*p) - -128));
				if (
 s->number64 != 0  ) _widec += 256;
				if (
 s->number64 == 0  ) _widec += 512;
			}
		} else if ( (*p) > 41 ) {
			if ( 59 <= (*p) && (*p) <= 59 ) {
				_widec = (short)(9856 + ((*p) - -128));
				if (
 s->multiline  ) _widec += 256;
				if (
 !s->multiline  ) _widec += 512;
				if (
 s->number64 != 0  ) _widec += 1024;
				if (
 s->number64 == 0  ) _widec += 2048;
			}
		} else {
			_widec = (short)(6784 + ((*p) - -128));
			if (
 s->number64 != 0  ) _widec += 256;
			if (
 s->number64 == 0  ) _widec += 512;
		}
	} else {
		_widec = (short)(6784 + ((*p) - -128));
		if (
 s->number64 != 0  ) _widec += 256;
		if (
 s->number64 == 0  ) _widec += 512;
	}
	switch( _widec ) {
		case 7177: goto tr3345;
		case 7200: goto tr3345;
		case 7208: goto tr3346;
		case 7209: goto tr3347;
		case 7433: goto tr3348;
		case 7456: goto tr3348;
		case 7464: goto tr3349;
		case 7465: goto tr3350;
		case 7689: goto tr3351;
		case 7712: goto tr3351;
		case 7720: goto tr3352;
		case 7721: goto tr3353;
		case 10506: goto tr3354;
		case 10555: goto tr3354;
		case 10762: goto tr3354;
		case 10811: goto tr3354;
		case 11274: goto tr3355;
		case 11323: goto tr3356;
		case 11530: goto tr3354;
		case 11579: goto tr3354;
		case 11786: goto tr3357;
		case 11835: goto tr3358;
		case 12298: goto tr3359;
		case 12347: goto tr3360;
		case 12554: goto tr3354;
		case 12603: goto tr3354;
		case 12810: goto tr3361;
		case 12859: goto tr3362;
		case 13322: goto tr3363;
		case 13371: goto tr3364;
		case 13578: goto tr3354;
		case 13627: goto tr3354;
		case 13834: goto tr3365;
		case 13883: goto tr3366;
	}
	goto tr3200;
tr3344:
	{
		s->buffer_length = 0;
	}
	goto st1121;
tr3367:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1121;
tr3338:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1121;
st1121:
	if ( ++p == pe )
		goto _test_eof1121;
case 1121:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3368;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3367;
	goto tr3171;
tr3331:
	{
		s->buffer_length = 0;
	}
	goto st1122;
tr3369:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1122;
st1122:
	if ( ++p == pe )
		goto _test_eof1122;
case 1122:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3370;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3369;
	goto tr3171;
tr3180:
	{
		s->buffer_length = 0;
	}
	goto st1123;
tr3371:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1123;
tr3170:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1123;
st1123:
	if ( ++p == pe )
		goto _test_eof1123;
case 1123:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3372;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3371;
	goto tr77;
st1124:
	if ( ++p == pe )
		goto _test_eof1124;
case 1124:
	switch( (*p) ) {
		case 65: goto st1125;
		case 67: goto st1159;
		case 68: goto st1180;
		case 69: goto st1197;
		case 72: goto st1204;
		case 73: goto st1213;
		case 75: goto st1221;
		case 76: goto st1225;
		case 77: goto st1233;
		case 78: goto st1239;
		case 79: goto st1255;
		case 80: goto st1265;
		case 82: goto st1268;
		case 83: goto st1275;
		case 84: goto st1294;
		case 85: goto st1304;
		case 87: goto st1307;
		case 90: goto st1313;
		case 97: goto st1125;
		case 99: goto st1159;
		case 100: goto st1180;
		case 101: goto st1197;
		case 104: goto st1204;
		case 105: goto st1213;
		case 107: goto st1221;
		case 108: goto st1225;
		case 109: goto st1233;
		case 110: goto st1239;
		case 111: goto st1255;
		case 112: goto st1265;
		case 114: goto st1268;
		case 115: goto st1275;
		case 116: goto st1294;
		case 117: goto st1304;
		case 119: goto st1307;
		case 122: goto st1313;
	}
	goto tr3373;
st1125:
	if ( ++p == pe )
		goto _test_eof1125;
case 1125:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3392;
		case 32: goto tr3392;
		case 40: goto tr3393;
		case 41: goto tr3394;
		case 65: goto st1150;
		case 70: goto st1153;
		case 80: goto st1157;
		case 97: goto st1150;
		case 102: goto st1153;
		case 112: goto st1157;
		case 2058: goto tr3398;
		case 2107: goto tr3399;
	}
	goto tr3373;
tr3401:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3402:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3404:
	{
		s->line_counter++;
	}
	goto st1126;
tr3500:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1126; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1126;
tr3869:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1126;
tr3870:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3871:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3873:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1126;
tr3392:
	{ type_num(KNOT_RRTYPE_A, &rdata_tail); }
	goto st1126;
tr3393:
	{ type_num(KNOT_RRTYPE_A, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3394:
	{ type_num(KNOT_RRTYPE_A, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3398:
	{ type_num(KNOT_RRTYPE_A, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3503:
	{ type_num(KNOT_RRTYPE_AAAA, &rdata_tail); }
	goto st1126;
tr3504:
	{ type_num(KNOT_RRTYPE_AAAA, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3505:
	{ type_num(KNOT_RRTYPE_AAAA, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3506:
	{ type_num(KNOT_RRTYPE_AAAA, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3511:
	{ type_num(KNOT_RRTYPE_AFSDB, &rdata_tail); }
	goto st1126;
tr3512:
	{ type_num(KNOT_RRTYPE_AFSDB, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3513:
	{ type_num(KNOT_RRTYPE_AFSDB, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3514:
	{ type_num(KNOT_RRTYPE_AFSDB, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3517:
	{ type_num(KNOT_RRTYPE_APL, &rdata_tail); }
	goto st1126;
tr3518:
	{ type_num(KNOT_RRTYPE_APL, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3519:
	{ type_num(KNOT_RRTYPE_APL, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3520:
	{ type_num(KNOT_RRTYPE_APL, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3528:
	{ type_num(KNOT_RRTYPE_CAA, &rdata_tail); }
	goto st1126;
tr3529:
	{ type_num(KNOT_RRTYPE_CAA, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3530:
	{ type_num(KNOT_RRTYPE_CAA, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3531:
	{ type_num(KNOT_RRTYPE_CAA, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3539:
	{ type_num(KNOT_RRTYPE_CDNSKEY, &rdata_tail); }
	goto st1126;
tr3540:
	{ type_num(KNOT_RRTYPE_CDNSKEY, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3541:
	{ type_num(KNOT_RRTYPE_CDNSKEY, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3542:
	{ type_num(KNOT_RRTYPE_CDNSKEY, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3544:
	{ type_num(KNOT_RRTYPE_CDS, &rdata_tail); }
	goto st1126;
tr3545:
	{ type_num(KNOT_RRTYPE_CDS, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3546:
	{ type_num(KNOT_RRTYPE_CDS, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3547:
	{ type_num(KNOT_RRTYPE_CDS, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3551:
	{ type_num(KNOT_RRTYPE_CERT, &rdata_tail); }
	goto st1126;
tr3552:
	{ type_num(KNOT_RRTYPE_CERT, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3553:
	{ type_num(KNOT_RRTYPE_CERT, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3554:
	{ type_num(KNOT_RRTYPE_CERT, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3559:
	{ type_num(KNOT_RRTYPE_CNAME, &rdata_tail); }
	goto st1126;
tr3560:
	{ type_num(KNOT_RRTYPE_CNAME, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3561:
	{ type_num(KNOT_RRTYPE_CNAME, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3562:
	{ type_num(KNOT_RRTYPE_CNAME, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3567:
	{ type_num(KNOT_RRTYPE_CSYNC, &rdata_tail); }
	goto st1126;
tr3568:
	{ type_num(KNOT_RRTYPE_CSYNC, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3569:
	{ type_num(KNOT_RRTYPE_CSYNC, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3570:
	{ type_num(KNOT_RRTYPE_CSYNC, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3578:
	{ type_num(KNOT_RRTYPE_DHCID, &rdata_tail); }
	goto st1126;
tr3579:
	{ type_num(KNOT_RRTYPE_DHCID, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3580:
	{ type_num(KNOT_RRTYPE_DHCID, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3581:
	{ type_num(KNOT_RRTYPE_DHCID, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3587:
	{ type_num(KNOT_RRTYPE_DNAME, &rdata_tail); }
	goto st1126;
tr3588:
	{ type_num(KNOT_RRTYPE_DNAME, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3589:
	{ type_num(KNOT_RRTYPE_DNAME, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3590:
	{ type_num(KNOT_RRTYPE_DNAME, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3595:
	{ type_num(KNOT_RRTYPE_DNSKEY, &rdata_tail); }
	goto st1126;
tr3596:
	{ type_num(KNOT_RRTYPE_DNSKEY, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3597:
	{ type_num(KNOT_RRTYPE_DNSKEY, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3598:
	{ type_num(KNOT_RRTYPE_DNSKEY, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3600:
	{ type_num(KNOT_RRTYPE_DS, &rdata_tail); }
	goto st1126;
tr3601:
	{ type_num(KNOT_RRTYPE_DS, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3602:
	{ type_num(KNOT_RRTYPE_DS, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3604:
	{ type_num(KNOT_RRTYPE_DS, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3608:
	{ type_num(KNOT_RRTYPE_DSYNC, &rdata_tail); }
	goto st1126;
tr3609:
	{ type_num(KNOT_RRTYPE_DSYNC, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3610:
	{ type_num(KNOT_RRTYPE_DSYNC, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3611:
	{ type_num(KNOT_RRTYPE_DSYNC, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3618:
	{ type_num(KNOT_RRTYPE_EUI48, &rdata_tail); }
	goto st1126;
tr3619:
	{ type_num(KNOT_RRTYPE_EUI48, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3620:
	{ type_num(KNOT_RRTYPE_EUI48, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3621:
	{ type_num(KNOT_RRTYPE_EUI48, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3624:
	{ type_num(KNOT_RRTYPE_EUI64, &rdata_tail); }
	goto st1126;
tr3625:
	{ type_num(KNOT_RRTYPE_EUI64, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3626:
	{ type_num(KNOT_RRTYPE_EUI64, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3627:
	{ type_num(KNOT_RRTYPE_EUI64, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3634:
	{ type_num(KNOT_RRTYPE_HINFO, &rdata_tail); }
	goto st1126;
tr3635:
	{ type_num(KNOT_RRTYPE_HINFO, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3636:
	{ type_num(KNOT_RRTYPE_HINFO, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3637:
	{ type_num(KNOT_RRTYPE_HINFO, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3642:
	{ type_num(KNOT_RRTYPE_HTTPS, &rdata_tail); }
	goto st1126;
tr3643:
	{ type_num(KNOT_RRTYPE_HTTPS, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3644:
	{ type_num(KNOT_RRTYPE_HTTPS, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3645:
	{ type_num(KNOT_RRTYPE_HTTPS, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3654:
	{ type_num(KNOT_RRTYPE_IPSECKEY, &rdata_tail); }
	goto st1126;
tr3655:
	{ type_num(KNOT_RRTYPE_IPSECKEY, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3656:
	{ type_num(KNOT_RRTYPE_IPSECKEY, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3657:
	{ type_num(KNOT_RRTYPE_IPSECKEY, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3662:
	{ type_num(KNOT_RRTYPE_KEY, &rdata_tail); }
	goto st1126;
tr3663:
	{ type_num(KNOT_RRTYPE_KEY, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3664:
	{ type_num(KNOT_RRTYPE_KEY, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3665:
	{ type_num(KNOT_RRTYPE_KEY, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3667:
	{ type_num(KNOT_RRTYPE_KX, &rdata_tail); }
	goto st1126;
tr3668:
	{ type_num(KNOT_RRTYPE_KX, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3669:
	{ type_num(KNOT_RRTYPE_KX, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3670:
	{ type_num(KNOT_RRTYPE_KX, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3677:
	{ type_num(KNOT_RRTYPE_L32, &rdata_tail); }
	goto st1126;
tr3678:
	{ type_num(KNOT_RRTYPE_L32, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3679:
	{ type_num(KNOT_RRTYPE_L32, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3680:
	{ type_num(KNOT_RRTYPE_L32, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3683:
	{ type_num(KNOT_RRTYPE_L64, &rdata_tail); }
	goto st1126;
tr3684:
	{ type_num(KNOT_RRTYPE_L64, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3685:
	{ type_num(KNOT_RRTYPE_L64, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3686:
	{ type_num(KNOT_RRTYPE_L64, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3689:
	{ type_num(KNOT_RRTYPE_LOC, &rdata_tail); }
	goto st1126;
tr3690:
	{ type_num(KNOT_RRTYPE_LOC, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3691:
	{ type_num(KNOT_RRTYPE_LOC, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3692:
	{ type_num(KNOT_RRTYPE_LOC, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3694:
	{ type_num(KNOT_RRTYPE_LP, &rdata_tail); }
	goto st1126;
tr3695:
	{ type_num(KNOT_RRTYPE_LP, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3696:
	{ type_num(KNOT_RRTYPE_LP, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3697:
	{ type_num(KNOT_RRTYPE_LP, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3704:
	{ type_num(KNOT_RRTYPE_MINFO, &rdata_tail); }
	goto st1126;
tr3705:
	{ type_num(KNOT_RRTYPE_MINFO, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3706:
	{ type_num(KNOT_RRTYPE_MINFO, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3707:
	{ type_num(KNOT_RRTYPE_MINFO, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3709:
	{ type_num(KNOT_RRTYPE_MX, &rdata_tail); }
	goto st1126;
tr3710:
	{ type_num(KNOT_RRTYPE_MX, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3711:
	{ type_num(KNOT_RRTYPE_MX, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3712:
	{ type_num(KNOT_RRTYPE_MX, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3720:
	{ type_num(KNOT_RRTYPE_NAPTR, &rdata_tail); }
	goto st1126;
tr3721:
	{ type_num(KNOT_RRTYPE_NAPTR, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3722:
	{ type_num(KNOT_RRTYPE_NAPTR, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3723:
	{ type_num(KNOT_RRTYPE_NAPTR, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3726:
	{ type_num(KNOT_RRTYPE_NID, &rdata_tail); }
	goto st1126;
tr3727:
	{ type_num(KNOT_RRTYPE_NID, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3728:
	{ type_num(KNOT_RRTYPE_NID, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3729:
	{ type_num(KNOT_RRTYPE_NID, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3731:
	{ type_num(KNOT_RRTYPE_NS, &rdata_tail); }
	goto st1126;
tr3732:
	{ type_num(KNOT_RRTYPE_NS, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3733:
	{ type_num(KNOT_RRTYPE_NS, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3735:
	{ type_num(KNOT_RRTYPE_NS, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3738:
	{ type_num(KNOT_RRTYPE_NSEC, &rdata_tail); }
	goto st1126;
tr3739:
	{ type_num(KNOT_RRTYPE_NSEC, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3740:
	{ type_num(KNOT_RRTYPE_NSEC, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3742:
	{ type_num(KNOT_RRTYPE_NSEC, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3744:
	{ type_num(KNOT_RRTYPE_NSEC3, &rdata_tail); }
	goto st1126;
tr3745:
	{ type_num(KNOT_RRTYPE_NSEC3, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3746:
	{ type_num(KNOT_RRTYPE_NSEC3, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3748:
	{ type_num(KNOT_RRTYPE_NSEC3, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3754:
	{ type_num(KNOT_RRTYPE_NSEC3PARAM, &rdata_tail); }
	goto st1126;
tr3755:
	{ type_num(KNOT_RRTYPE_NSEC3PARAM, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3756:
	{ type_num(KNOT_RRTYPE_NSEC3PARAM, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3757:
	{ type_num(KNOT_RRTYPE_NSEC3PARAM, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3768:
	{ type_num(KNOT_RRTYPE_OPENPGPKEY, &rdata_tail); }
	goto st1126;
tr3769:
	{ type_num(KNOT_RRTYPE_OPENPGPKEY, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3770:
	{ type_num(KNOT_RRTYPE_OPENPGPKEY, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3771:
	{ type_num(KNOT_RRTYPE_OPENPGPKEY, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3775:
	{ type_num(KNOT_RRTYPE_PTR, &rdata_tail); }
	goto st1126;
tr3776:
	{ type_num(KNOT_RRTYPE_PTR, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3777:
	{ type_num(KNOT_RRTYPE_PTR, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3778:
	{ type_num(KNOT_RRTYPE_PTR, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3783:
	{ type_num(KNOT_RRTYPE_RP, &rdata_tail); }
	goto st1126;
tr3784:
	{ type_num(KNOT_RRTYPE_RP, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3785:
	{ type_num(KNOT_RRTYPE_RP, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3786:
	{ type_num(KNOT_RRTYPE_RP, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3791:
	{ type_num(KNOT_RRTYPE_RRSIG, &rdata_tail); }
	goto st1126;
tr3792:
	{ type_num(KNOT_RRTYPE_RRSIG, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3793:
	{ type_num(KNOT_RRTYPE_RRSIG, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3794:
	{ type_num(KNOT_RRTYPE_RRSIG, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3796:
	{ type_num(KNOT_RRTYPE_RT, &rdata_tail); }
	goto st1126;
tr3797:
	{ type_num(KNOT_RRTYPE_RT, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3798:
	{ type_num(KNOT_RRTYPE_RT, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3799:
	{ type_num(KNOT_RRTYPE_RT, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3811:
	{ type_num(KNOT_RRTYPE_SMIMEA, &rdata_tail); }
	goto st1126;
tr3812:
	{ type_num(KNOT_RRTYPE_SMIMEA, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3813:
	{ type_num(KNOT_RRTYPE_SMIMEA, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3814:
	{ type_num(KNOT_RRTYPE_SMIMEA, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3817:
	{ type_num(KNOT_RRTYPE_SOA, &rdata_tail); }
	goto st1126;
tr3818:
	{ type_num(KNOT_RRTYPE_SOA, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3819:
	{ type_num(KNOT_RRTYPE_SOA, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3820:
	{ type_num(KNOT_RRTYPE_SOA, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3823:
	{ type_num(KNOT_RRTYPE_SPF, &rdata_tail); }
	goto st1126;
tr3824:
	{ type_num(KNOT_RRTYPE_SPF, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3825:
	{ type_num(KNOT_RRTYPE_SPF, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3826:
	{ type_num(KNOT_RRTYPE_SPF, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3829:
	{ type_num(KNOT_RRTYPE_SRV, &rdata_tail); }
	goto st1126;
tr3830:
	{ type_num(KNOT_RRTYPE_SRV, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3831:
	{ type_num(KNOT_RRTYPE_SRV, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3832:
	{ type_num(KNOT_RRTYPE_SRV, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3837:
	{ type_num(KNOT_RRTYPE_SSHFP, &rdata_tail); }
	goto st1126;
tr3838:
	{ type_num(KNOT_RRTYPE_SSHFP, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3839:
	{ type_num(KNOT_RRTYPE_SSHFP, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3840:
	{ type_num(KNOT_RRTYPE_SSHFP, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3844:
	{ type_num(KNOT_RRTYPE_SVCB, &rdata_tail); }
	goto st1126;
tr3845:
	{ type_num(KNOT_RRTYPE_SVCB, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3846:
	{ type_num(KNOT_RRTYPE_SVCB, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3847:
	{ type_num(KNOT_RRTYPE_SVCB, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3854:
	{ type_num(KNOT_RRTYPE_TLSA, &rdata_tail); }
	goto st1126;
tr3855:
	{ type_num(KNOT_RRTYPE_TLSA, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3856:
	{ type_num(KNOT_RRTYPE_TLSA, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3857:
	{ type_num(KNOT_RRTYPE_TLSA, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3860:
	{ type_num(KNOT_RRTYPE_TXT, &rdata_tail); }
	goto st1126;
tr3861:
	{ type_num(KNOT_RRTYPE_TXT, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3862:
	{ type_num(KNOT_RRTYPE_TXT, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3863:
	{ type_num(KNOT_RRTYPE_TXT, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3877:
	{ type_num(KNOT_RRTYPE_URI, &rdata_tail); }
	goto st1126;
tr3878:
	{ type_num(KNOT_RRTYPE_URI, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3879:
	{ type_num(KNOT_RRTYPE_URI, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3880:
	{ type_num(KNOT_RRTYPE_URI, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3887:
	{ type_num(KNOT_RRTYPE_WALLET, &rdata_tail); }
	goto st1126;
tr3888:
	{ type_num(KNOT_RRTYPE_WALLET, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3889:
	{ type_num(KNOT_RRTYPE_WALLET, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3890:
	{ type_num(KNOT_RRTYPE_WALLET, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
tr3897:
	{ type_num(KNOT_RRTYPE_ZONEMD, &rdata_tail); }
	goto st1126;
tr3898:
	{ type_num(KNOT_RRTYPE_ZONEMD, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1126;
tr3899:
	{ type_num(KNOT_RRTYPE_ZONEMD, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1126;
tr3900:
	{ type_num(KNOT_RRTYPE_ZONEMD, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1126;
st1126:
	if ( ++p == pe )
		goto _test_eof1126;
case 1126:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1126;
		case 32: goto st1126;
		case 40: goto tr3401;
		case 41: goto tr3402;
		case 2058: goto tr3404;
		case 2107: goto tr3405;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr3403;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr3403;
	} else
		goto tr3403;
	goto tr77;
tr3403:
	{ p--; {stack[top++] = 1127;goto st747;} }
	goto st1127;
st1127:
	if ( ++p == pe )
		goto _test_eof1127;
case 1127:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1128;
		case 32: goto st1128;
		case 40: goto tr3407;
		case 41: goto tr3408;
		case 2058: goto tr3409;
		case 2107: goto tr3410;
	}
	goto tr77;
tr3407:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1128;
tr3408:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1128;
tr3409:
	{
		s->line_counter++;
	}
	goto st1128;
tr3498:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1128; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1128;
st1128:
	if ( ++p == pe )
		goto _test_eof1128;
case 1128:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1128;
		case 32: goto st1128;
		case 40: goto tr3407;
		case 41: goto tr3408;
		case 2058: goto tr3409;
		case 2107: goto tr3410;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3411;
	goto tr2429;
tr3411:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1129;
tr3415:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1129;
st1129:
	if ( ++p == pe )
		goto _test_eof1129;
case 1129:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3412;
		case 32: goto tr3412;
		case 40: goto tr3413;
		case 41: goto tr3414;
		case 2058: goto tr3416;
		case 2107: goto tr3417;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3415;
	goto tr2429;
tr3419:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1130;
tr3420:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1130;
tr3422:
	{
		s->line_counter++;
	}
	goto st1130;
tr3496:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1130; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1130;
tr3412:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1130;
tr3413:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1130;
tr3414:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1130;
tr3416:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1130;
st1130:
	if ( ++p == pe )
		goto _test_eof1130;
case 1130:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1130;
		case 32: goto st1130;
		case 40: goto tr3419;
		case 41: goto tr3420;
		case 2058: goto tr3422;
		case 2107: goto tr3423;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3421;
	goto tr2429;
tr3421:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1131;
tr3427:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1131;
st1131:
	if ( ++p == pe )
		goto _test_eof1131;
case 1131:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3424;
		case 32: goto tr3424;
		case 40: goto tr3425;
		case 41: goto tr3426;
		case 2058: goto tr3428;
		case 2107: goto tr3429;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3427;
	goto tr2429;
tr3432:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1132;
tr3433:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1132;
tr3435:
	{
		s->line_counter++;
	}
	goto st1132;
tr3494:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1132; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1132;
tr3424:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1132;
tr3425:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1132;
tr3426:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1132;
tr3428:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1132;
st1132:
	if ( ++p == pe )
		goto _test_eof1132;
case 1132:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1132;
		case 32: goto st1132;
		case 40: goto tr3432;
		case 41: goto tr3433;
		case 2058: goto tr3435;
		case 2107: goto tr3436;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3434;
	goto tr3430;
tr3434:
	{
		s->buffer_length = 0;
	}
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1133;
tr3440:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1133;
st1133:
	if ( ++p == pe )
		goto _test_eof1133;
case 1133:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3437;
		case 32: goto tr3437;
		case 40: goto tr3438;
		case 41: goto tr3439;
		case 2058: goto tr3441;
		case 2107: goto tr3442;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3440;
	goto tr3430;
tr3444:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1134;
tr3445:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1134;
tr3447:
	{
		s->line_counter++;
	}
	goto st1134;
tr3492:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1134; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1134;
tr3437:
	{
		s->buffer[s->buffer_length] = 0;

		if (s->buffer_length == 14) { // Date; 14 = len("YYYYMMDDHHmmSS").
			uint32_t timestamp;
			int ret = date_to_timestamp(s->buffer, &timestamp);

			if (ret == ZS_OK) {
				*((uint32_t *)rdata_tail) = htonl(timestamp);
				rdata_tail += 4;
			} else {
				WARN(ret);
				p--; {goto st319;}
			}
		} else if (s->buffer_length <= 10) { // Timestamp format.
			char *end;

			s->number64 = strtoull((char *)(s->buffer), &end,  10);

			if (end == (char *)(s->buffer) || *end != '\0') {
				WARN(ZS_BAD_TIMESTAMP);
				p--; {goto st319;}
			}

			if (s->number64 <= UINT32_MAX) {
				*((uint32_t *)rdata_tail) = htonl((uint32_t)s->number64);
				rdata_tail += 4;
			} else {
				WARN(ZS_NUMBER32_OVERFLOW);
				p--; {goto st319;}
			}
		} else {
			WARN(ZS_BAD_TIMESTAMP_LENGTH);
			p--; {goto st319;}
		}
	}
	goto st1134;
tr3438:
	{
		s->buffer[s->buffer_length] = 0;

		if (s->buffer_length == 14) { // Date; 14 = len("YYYYMMDDHHmmSS").
			uint32_t timestamp;
			int ret = date_to_timestamp(s->buffer, &timestamp);

			if (ret == ZS_OK) {
				*((uint32_t *)rdata_tail) = htonl(timestamp);
				rdata_tail += 4;
			} else {
				WARN(ret);
				p--; {goto st319;}
			}
		} else if (s->buffer_length <= 10) { // Timestamp format.
			char *end;

			s->number64 = strtoull((char *)(s->buffer), &end,  10);

			if (end == (char *)(s->buffer) || *end != '\0') {
				WARN(ZS_BAD_TIMESTAMP);
				p--; {goto st319;}
			}

			if (s->number64 <= UINT32_MAX) {
				*((uint32_t *)rdata_tail) = htonl((uint32_t)s->number64);
				rdata_tail += 4;
			} else {
				WARN(ZS_NUMBER32_OVERFLOW);
				p--; {goto st319;}
			}
		} else {
			WARN(ZS_BAD_TIMESTAMP_LENGTH);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1134;
tr3439:
	{
		s->buffer[s->buffer_length] = 0;

		if (s->buffer_length == 14) { // Date; 14 = len("YYYYMMDDHHmmSS").
			uint32_t timestamp;
			int ret = date_to_timestamp(s->buffer, &timestamp);

			if (ret == ZS_OK) {
				*((uint32_t *)rdata_tail) = htonl(timestamp);
				rdata_tail += 4;
			} else {
				WARN(ret);
				p--; {goto st319;}
			}
		} else if (s->buffer_length <= 10) { // Timestamp format.
			char *end;

			s->number64 = strtoull((char *)(s->buffer), &end,  10);

			if (end == (char *)(s->buffer) || *end != '\0') {
				WARN(ZS_BAD_TIMESTAMP);
				p--; {goto st319;}
			}

			if (s->number64 <= UINT32_MAX) {
				*((uint32_t *)rdata_tail) = htonl((uint32_t)s->number64);
				rdata_tail += 4;
			} else {
				WARN(ZS_NUMBER32_OVERFLOW);
				p--; {goto st319;}
			}
		} else {
			WARN(ZS_BAD_TIMESTAMP_LENGTH);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1134;
tr3441:
	{
		s->buffer[s->buffer_length] = 0;

		if (s->buffer_length == 14) { // Date; 14 = len("YYYYMMDDHHmmSS").
			uint32_t timestamp;
			int ret = date_to_timestamp(s->buffer, &timestamp);

			if (ret == ZS_OK) {
				*((uint32_t *)rdata_tail) = htonl(timestamp);
				rdata_tail += 4;
			} else {
				WARN(ret);
				p--; {goto st319;}
			}
		} else if (s->buffer_length <= 10) { // Timestamp format.
			char *end;

			s->number64 = strtoull((char *)(s->buffer), &end,  10);

			if (end == (char *)(s->buffer) || *end != '\0') {
				WARN(ZS_BAD_TIMESTAMP);
				p--; {goto st319;}
			}

			if (s->number64 <= UINT32_MAX) {
				*((uint32_t *)rdata_tail) = htonl((uint32_t)s->number64);
				rdata_tail += 4;
			} else {
				WARN(ZS_NUMBER32_OVERFLOW);
				p--; {goto st319;}
			}
		} else {
			WARN(ZS_BAD_TIMESTAMP_LENGTH);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1134;
st1134:
	if ( ++p == pe )
		goto _test_eof1134;
case 1134:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1134;
		case 32: goto st1134;
		case 40: goto tr3444;
		case 41: goto tr3445;
		case 2058: goto tr3447;
		case 2107: goto tr3448;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3446;
	goto tr3430;
tr3446:
	{
		s->buffer_length = 0;
	}
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1135;
tr3452:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1135;
st1135:
	if ( ++p == pe )
		goto _test_eof1135;
case 1135:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3449;
		case 32: goto tr3449;
		case 40: goto tr3450;
		case 41: goto tr3451;
		case 2058: goto tr3453;
		case 2107: goto tr3454;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3452;
	goto tr3430;
tr3456:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1136;
tr3457:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1136;
tr3459:
	{
		s->line_counter++;
	}
	goto st1136;
tr3490:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1136; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1136;
tr3449:
	{
		s->buffer[s->buffer_length] = 0;

		if (s->buffer_length == 14) { // Date; 14 = len("YYYYMMDDHHmmSS").
			uint32_t timestamp;
			int ret = date_to_timestamp(s->buffer, &timestamp);

			if (ret == ZS_OK) {
				*((uint32_t *)rdata_tail) = htonl(timestamp);
				rdata_tail += 4;
			} else {
				WARN(ret);
				p--; {goto st319;}
			}
		} else if (s->buffer_length <= 10) { // Timestamp format.
			char *end;

			s->number64 = strtoull((char *)(s->buffer), &end,  10);

			if (end == (char *)(s->buffer) || *end != '\0') {
				WARN(ZS_BAD_TIMESTAMP);
				p--; {goto st319;}
			}

			if (s->number64 <= UINT32_MAX) {
				*((uint32_t *)rdata_tail) = htonl((uint32_t)s->number64);
				rdata_tail += 4;
			} else {
				WARN(ZS_NUMBER32_OVERFLOW);
				p--; {goto st319;}
			}
		} else {
			WARN(ZS_BAD_TIMESTAMP_LENGTH);
			p--; {goto st319;}
		}
	}
	goto st1136;
tr3450:
	{
		s->buffer[s->buffer_length] = 0;

		if (s->buffer_length == 14) { // Date; 14 = len("YYYYMMDDHHmmSS").
			uint32_t timestamp;
			int ret = date_to_timestamp(s->buffer, &timestamp);

			if (ret == ZS_OK) {
				*((uint32_t *)rdata_tail) = htonl(timestamp);
				rdata_tail += 4;
			} else {
				WARN(ret);
				p--; {goto st319;}
			}
		} else if (s->buffer_length <= 10) { // Timestamp format.
			char *end;

			s->number64 = strtoull((char *)(s->buffer), &end,  10);

			if (end == (char *)(s->buffer) || *end != '\0') {
				WARN(ZS_BAD_TIMESTAMP);
				p--; {goto st319;}
			}

			if (s->number64 <= UINT32_MAX) {
				*((uint32_t *)rdata_tail) = htonl((uint32_t)s->number64);
				rdata_tail += 4;
			} else {
				WARN(ZS_NUMBER32_OVERFLOW);
				p--; {goto st319;}
			}
		} else {
			WARN(ZS_BAD_TIMESTAMP_LENGTH);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1136;
tr3451:
	{
		s->buffer[s->buffer_length] = 0;

		if (s->buffer_length == 14) { // Date; 14 = len("YYYYMMDDHHmmSS").
			uint32_t timestamp;
			int ret = date_to_timestamp(s->buffer, &timestamp);

			if (ret == ZS_OK) {
				*((uint32_t *)rdata_tail) = htonl(timestamp);
				rdata_tail += 4;
			} else {
				WARN(ret);
				p--; {goto st319;}
			}
		} else if (s->buffer_length <= 10) { // Timestamp format.
			char *end;

			s->number64 = strtoull((char *)(s->buffer), &end,  10);

			if (end == (char *)(s->buffer) || *end != '\0') {
				WARN(ZS_BAD_TIMESTAMP);
				p--; {goto st319;}
			}

			if (s->number64 <= UINT32_MAX) {
				*((uint32_t *)rdata_tail) = htonl((uint32_t)s->number64);
				rdata_tail += 4;
			} else {
				WARN(ZS_NUMBER32_OVERFLOW);
				p--; {goto st319;}
			}
		} else {
			WARN(ZS_BAD_TIMESTAMP_LENGTH);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1136;
tr3453:
	{
		s->buffer[s->buffer_length] = 0;

		if (s->buffer_length == 14) { // Date; 14 = len("YYYYMMDDHHmmSS").
			uint32_t timestamp;
			int ret = date_to_timestamp(s->buffer, &timestamp);

			if (ret == ZS_OK) {
				*((uint32_t *)rdata_tail) = htonl(timestamp);
				rdata_tail += 4;
			} else {
				WARN(ret);
				p--; {goto st319;}
			}
		} else if (s->buffer_length <= 10) { // Timestamp format.
			char *end;

			s->number64 = strtoull((char *)(s->buffer), &end,  10);

			if (end == (char *)(s->buffer) || *end != '\0') {
				WARN(ZS_BAD_TIMESTAMP);
				p--; {goto st319;}
			}

			if (s->number64 <= UINT32_MAX) {
				*((uint32_t *)rdata_tail) = htonl((uint32_t)s->number64);
				rdata_tail += 4;
			} else {
				WARN(ZS_NUMBER32_OVERFLOW);
				p--; {goto st319;}
			}
		} else {
			WARN(ZS_BAD_TIMESTAMP_LENGTH);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1136;
st1136:
	if ( ++p == pe )
		goto _test_eof1136;
case 1136:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1136;
		case 32: goto st1136;
		case 40: goto tr3456;
		case 41: goto tr3457;
		case 2058: goto tr3459;
		case 2107: goto tr3460;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3458;
	goto tr2429;
tr3458:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1137;
tr3464:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1137;
st1137:
	if ( ++p == pe )
		goto _test_eof1137;
case 1137:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3461;
		case 32: goto tr3461;
		case 40: goto tr3462;
		case 41: goto tr3463;
		case 2058: goto tr3465;
		case 2107: goto tr3466;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3464;
	goto tr2429;
tr3468:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1138;
tr3469:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1138;
tr3471:
	{
		s->line_counter++;
	}
	goto st1138;
tr3488:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1138; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1138;
tr3461:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1138;
tr3462:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1138;
tr3463:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1138;
tr3465:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1138;
st1138:
	if ( ++p == pe )
		goto _test_eof1138;
case 1138:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1138;
		case 32: goto st1138;
		case 40: goto tr3468;
		case 41: goto tr3469;
		case 42: goto tr3470;
		case 92: goto tr3470;
		case 95: goto tr3470;
		case 2058: goto tr3471;
		case 2107: goto tr3472;
	}
	if ( _widec < 64 ) {
		if ( 45 <= _widec && _widec <= 57 )
			goto tr3470;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr3470;
	} else
		goto tr3470;
	goto tr77;
tr3470:
	{
		s->dname = rdata_tail;
	}
	{ p--; {stack[top++] = 1139;goto st321;} }
	goto st1139;
st1139:
	if ( ++p == pe )
		goto _test_eof1139;
case 1139:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3473;
		case 32: goto tr3473;
		case 40: goto tr3474;
		case 41: goto tr3475;
		case 2058: goto tr3476;
		case 2107: goto tr3477;
	}
	goto tr77;
tr3479:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1140;
tr3480:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1140;
tr3482:
	{
		s->line_counter++;
	}
	goto st1140;
tr3486:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1140; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1140;
tr3473:
	{
		rdata_tail += s->dname_tmp_length;
	}
	goto st1140;
tr3474:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1140;
tr3475:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1140;
tr3476:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		s->line_counter++;
	}
	goto st1140;
st1140:
	if ( ++p == pe )
		goto _test_eof1140;
case 1140:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1140;
		case 32: goto st1140;
		case 40: goto tr3479;
		case 41: goto tr3480;
		case 43: goto tr3481;
		case 2058: goto tr3482;
		case 2107: goto tr3483;
	}
	if ( _widec < 65 ) {
		if ( 47 <= _widec && _widec <= 57 )
			goto tr3481;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr3481;
	} else
		goto tr3481;
	goto tr77;
tr3481:
	{ p--; {stack[top++] = 1141;goto st381;} }
	goto st1141;
st1141:
	if ( ++p == pe )
		goto _test_eof1141;
case 1141:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2176 + ((*p) - -128));
			if (
 !s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2176 + ((*p) - -128));
		if (
 !s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 2570: goto tr3484;
		case 2619: goto tr3484;
	}
	goto tr77;
tr3484:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1719;
st1719:
	if ( ++p == pe )
		goto _test_eof1719;
case 1719:
	goto st0;
tr3483:
	{
		s->buffer_length = 0;
	}
	goto st1142;
tr3485:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1142;
tr3477:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		s->buffer_length = 0;
	}
	goto st1142;
st1142:
	if ( ++p == pe )
		goto _test_eof1142;
case 1142:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3486;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3485;
	goto tr77;
tr3472:
	{
		s->buffer_length = 0;
	}
	goto st1143;
tr3487:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1143;
tr3466:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1143;
st1143:
	if ( ++p == pe )
		goto _test_eof1143;
case 1143:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3488;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3487;
	goto tr77;
tr3460:
	{
		s->buffer_length = 0;
	}
	goto st1144;
tr3489:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1144;
tr3454:
	{
		s->buffer[s->buffer_length] = 0;

		if (s->buffer_length == 14) { // Date; 14 = len("YYYYMMDDHHmmSS").
			uint32_t timestamp;
			int ret = date_to_timestamp(s->buffer, &timestamp);

			if (ret == ZS_OK) {
				*((uint32_t *)rdata_tail) = htonl(timestamp);
				rdata_tail += 4;
			} else {
				WARN(ret);
				p--; {goto st319;}
			}
		} else if (s->buffer_length <= 10) { // Timestamp format.
			char *end;

			s->number64 = strtoull((char *)(s->buffer), &end,  10);

			if (end == (char *)(s->buffer) || *end != '\0') {
				WARN(ZS_BAD_TIMESTAMP);
				p--; {goto st319;}
			}

			if (s->number64 <= UINT32_MAX) {
				*((uint32_t *)rdata_tail) = htonl((uint32_t)s->number64);
				rdata_tail += 4;
			} else {
				WARN(ZS_NUMBER32_OVERFLOW);
				p--; {goto st319;}
			}
		} else {
			WARN(ZS_BAD_TIMESTAMP_LENGTH);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1144;
st1144:
	if ( ++p == pe )
		goto _test_eof1144;
case 1144:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3490;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3489;
	goto tr77;
tr3448:
	{
		s->buffer_length = 0;
	}
	goto st1145;
tr3491:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1145;
tr3442:
	{
		s->buffer[s->buffer_length] = 0;

		if (s->buffer_length == 14) { // Date; 14 = len("YYYYMMDDHHmmSS").
			uint32_t timestamp;
			int ret = date_to_timestamp(s->buffer, &timestamp);

			if (ret == ZS_OK) {
				*((uint32_t *)rdata_tail) = htonl(timestamp);
				rdata_tail += 4;
			} else {
				WARN(ret);
				p--; {goto st319;}
			}
		} else if (s->buffer_length <= 10) { // Timestamp format.
			char *end;

			s->number64 = strtoull((char *)(s->buffer), &end,  10);

			if (end == (char *)(s->buffer) || *end != '\0') {
				WARN(ZS_BAD_TIMESTAMP);
				p--; {goto st319;}
			}

			if (s->number64 <= UINT32_MAX) {
				*((uint32_t *)rdata_tail) = htonl((uint32_t)s->number64);
				rdata_tail += 4;
			} else {
				WARN(ZS_NUMBER32_OVERFLOW);
				p--; {goto st319;}
			}
		} else {
			WARN(ZS_BAD_TIMESTAMP_LENGTH);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1145;
st1145:
	if ( ++p == pe )
		goto _test_eof1145;
case 1145:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3492;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3491;
	goto tr77;
tr3436:
	{
		s->buffer_length = 0;
	}
	goto st1146;
tr3493:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1146;
tr3429:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1146;
st1146:
	if ( ++p == pe )
		goto _test_eof1146;
case 1146:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3494;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3493;
	goto tr77;
tr3423:
	{
		s->buffer_length = 0;
	}
	goto st1147;
tr3495:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1147;
tr3417:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1147;
st1147:
	if ( ++p == pe )
		goto _test_eof1147;
case 1147:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3496;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3495;
	goto tr77;
tr3410:
	{
		s->buffer_length = 0;
	}
	goto st1148;
tr3497:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1148;
st1148:
	if ( ++p == pe )
		goto _test_eof1148;
case 1148:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3498;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3497;
	goto tr77;
tr3405:
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3499:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1149;
tr3874:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3399:
	{ type_num(KNOT_RRTYPE_A, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3507:
	{ type_num(KNOT_RRTYPE_AAAA, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3515:
	{ type_num(KNOT_RRTYPE_AFSDB, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3521:
	{ type_num(KNOT_RRTYPE_APL, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3532:
	{ type_num(KNOT_RRTYPE_CAA, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3543:
	{ type_num(KNOT_RRTYPE_CDNSKEY, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3548:
	{ type_num(KNOT_RRTYPE_CDS, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3555:
	{ type_num(KNOT_RRTYPE_CERT, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3563:
	{ type_num(KNOT_RRTYPE_CNAME, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3571:
	{ type_num(KNOT_RRTYPE_CSYNC, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3582:
	{ type_num(KNOT_RRTYPE_DHCID, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3591:
	{ type_num(KNOT_RRTYPE_DNAME, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3599:
	{ type_num(KNOT_RRTYPE_DNSKEY, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3605:
	{ type_num(KNOT_RRTYPE_DS, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3612:
	{ type_num(KNOT_RRTYPE_DSYNC, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3622:
	{ type_num(KNOT_RRTYPE_EUI48, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3628:
	{ type_num(KNOT_RRTYPE_EUI64, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3638:
	{ type_num(KNOT_RRTYPE_HINFO, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3646:
	{ type_num(KNOT_RRTYPE_HTTPS, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3658:
	{ type_num(KNOT_RRTYPE_IPSECKEY, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3666:
	{ type_num(KNOT_RRTYPE_KEY, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3671:
	{ type_num(KNOT_RRTYPE_KX, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3681:
	{ type_num(KNOT_RRTYPE_L32, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3687:
	{ type_num(KNOT_RRTYPE_L64, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3693:
	{ type_num(KNOT_RRTYPE_LOC, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3698:
	{ type_num(KNOT_RRTYPE_LP, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3708:
	{ type_num(KNOT_RRTYPE_MINFO, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3713:
	{ type_num(KNOT_RRTYPE_MX, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3724:
	{ type_num(KNOT_RRTYPE_NAPTR, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3730:
	{ type_num(KNOT_RRTYPE_NID, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3736:
	{ type_num(KNOT_RRTYPE_NS, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3743:
	{ type_num(KNOT_RRTYPE_NSEC, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3749:
	{ type_num(KNOT_RRTYPE_NSEC3, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3758:
	{ type_num(KNOT_RRTYPE_NSEC3PARAM, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3772:
	{ type_num(KNOT_RRTYPE_OPENPGPKEY, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3779:
	{ type_num(KNOT_RRTYPE_PTR, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3787:
	{ type_num(KNOT_RRTYPE_RP, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3795:
	{ type_num(KNOT_RRTYPE_RRSIG, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3800:
	{ type_num(KNOT_RRTYPE_RT, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3815:
	{ type_num(KNOT_RRTYPE_SMIMEA, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3821:
	{ type_num(KNOT_RRTYPE_SOA, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3827:
	{ type_num(KNOT_RRTYPE_SPF, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3833:
	{ type_num(KNOT_RRTYPE_SRV, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3841:
	{ type_num(KNOT_RRTYPE_SSHFP, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3848:
	{ type_num(KNOT_RRTYPE_SVCB, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3858:
	{ type_num(KNOT_RRTYPE_TLSA, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3864:
	{ type_num(KNOT_RRTYPE_TXT, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3881:
	{ type_num(KNOT_RRTYPE_URI, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3891:
	{ type_num(KNOT_RRTYPE_WALLET, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
tr3901:
	{ type_num(KNOT_RRTYPE_ZONEMD, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1149;
st1149:
	if ( ++p == pe )
		goto _test_eof1149;
case 1149:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3500;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3499;
	goto tr77;
st1150:
	if ( ++p == pe )
		goto _test_eof1150;
case 1150:
	switch( (*p) ) {
		case 65: goto st1151;
		case 97: goto st1151;
	}
	goto tr3373;
st1151:
	if ( ++p == pe )
		goto _test_eof1151;
case 1151:
	switch( (*p) ) {
		case 65: goto st1152;
		case 97: goto st1152;
	}
	goto tr3373;
st1152:
	if ( ++p == pe )
		goto _test_eof1152;
case 1152:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3503;
		case 32: goto tr3503;
		case 40: goto tr3504;
		case 41: goto tr3505;
		case 2058: goto tr3506;
		case 2107: goto tr3507;
	}
	goto tr3373;
st1153:
	if ( ++p == pe )
		goto _test_eof1153;
case 1153:
	switch( (*p) ) {
		case 83: goto st1154;
		case 115: goto st1154;
	}
	goto tr3373;
st1154:
	if ( ++p == pe )
		goto _test_eof1154;
case 1154:
	switch( (*p) ) {
		case 68: goto st1155;
		case 100: goto st1155;
	}
	goto tr3373;
st1155:
	if ( ++p == pe )
		goto _test_eof1155;
case 1155:
	switch( (*p) ) {
		case 66: goto st1156;
		case 98: goto st1156;
	}
	goto tr3373;
st1156:
	if ( ++p == pe )
		goto _test_eof1156;
case 1156:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3511;
		case 32: goto tr3511;
		case 40: goto tr3512;
		case 41: goto tr3513;
		case 2058: goto tr3514;
		case 2107: goto tr3515;
	}
	goto tr3373;
st1157:
	if ( ++p == pe )
		goto _test_eof1157;
case 1157:
	switch( (*p) ) {
		case 76: goto st1158;
		case 108: goto st1158;
	}
	goto tr3373;
st1158:
	if ( ++p == pe )
		goto _test_eof1158;
case 1158:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3517;
		case 32: goto tr3517;
		case 40: goto tr3518;
		case 41: goto tr3519;
		case 2058: goto tr3520;
		case 2107: goto tr3521;
	}
	goto tr3373;
st1159:
	if ( ++p == pe )
		goto _test_eof1159;
case 1159:
	switch( (*p) ) {
		case 65: goto st1160;
		case 68: goto st1162;
		case 69: goto st1169;
		case 78: goto st1172;
		case 83: goto st1176;
		case 97: goto st1160;
		case 100: goto st1162;
		case 101: goto st1169;
		case 110: goto st1172;
		case 115: goto st1176;
	}
	goto tr3373;
st1160:
	if ( ++p == pe )
		goto _test_eof1160;
case 1160:
	switch( (*p) ) {
		case 65: goto st1161;
		case 97: goto st1161;
	}
	goto tr3373;
st1161:
	if ( ++p == pe )
		goto _test_eof1161;
case 1161:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3528;
		case 32: goto tr3528;
		case 40: goto tr3529;
		case 41: goto tr3530;
		case 2058: goto tr3531;
		case 2107: goto tr3532;
	}
	goto tr3373;
st1162:
	if ( ++p == pe )
		goto _test_eof1162;
case 1162:
	switch( (*p) ) {
		case 78: goto st1163;
		case 83: goto st1168;
		case 110: goto st1163;
		case 115: goto st1168;
	}
	goto tr3373;
st1163:
	if ( ++p == pe )
		goto _test_eof1163;
case 1163:
	switch( (*p) ) {
		case 83: goto st1164;
		case 115: goto st1164;
	}
	goto tr3373;
st1164:
	if ( ++p == pe )
		goto _test_eof1164;
case 1164:
	switch( (*p) ) {
		case 75: goto st1165;
		case 107: goto st1165;
	}
	goto tr3373;
st1165:
	if ( ++p == pe )
		goto _test_eof1165;
case 1165:
	switch( (*p) ) {
		case 69: goto st1166;
		case 101: goto st1166;
	}
	goto tr3373;
st1166:
	if ( ++p == pe )
		goto _test_eof1166;
case 1166:
	switch( (*p) ) {
		case 89: goto st1167;
		case 121: goto st1167;
	}
	goto tr3373;
st1167:
	if ( ++p == pe )
		goto _test_eof1167;
case 1167:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3539;
		case 32: goto tr3539;
		case 40: goto tr3540;
		case 41: goto tr3541;
		case 2058: goto tr3542;
		case 2107: goto tr3543;
	}
	goto tr3373;
st1168:
	if ( ++p == pe )
		goto _test_eof1168;
case 1168:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3544;
		case 32: goto tr3544;
		case 40: goto tr3545;
		case 41: goto tr3546;
		case 2058: goto tr3547;
		case 2107: goto tr3548;
	}
	goto tr3373;
st1169:
	if ( ++p == pe )
		goto _test_eof1169;
case 1169:
	switch( (*p) ) {
		case 82: goto st1170;
		case 114: goto st1170;
	}
	goto tr3373;
st1170:
	if ( ++p == pe )
		goto _test_eof1170;
case 1170:
	switch( (*p) ) {
		case 84: goto st1171;
		case 116: goto st1171;
	}
	goto tr3373;
st1171:
	if ( ++p == pe )
		goto _test_eof1171;
case 1171:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3551;
		case 32: goto tr3551;
		case 40: goto tr3552;
		case 41: goto tr3553;
		case 2058: goto tr3554;
		case 2107: goto tr3555;
	}
	goto tr3373;
st1172:
	if ( ++p == pe )
		goto _test_eof1172;
case 1172:
	switch( (*p) ) {
		case 65: goto st1173;
		case 97: goto st1173;
	}
	goto tr3373;
st1173:
	if ( ++p == pe )
		goto _test_eof1173;
case 1173:
	switch( (*p) ) {
		case 77: goto st1174;
		case 109: goto st1174;
	}
	goto tr3373;
st1174:
	if ( ++p == pe )
		goto _test_eof1174;
case 1174:
	switch( (*p) ) {
		case 69: goto st1175;
		case 101: goto st1175;
	}
	goto tr3373;
st1175:
	if ( ++p == pe )
		goto _test_eof1175;
case 1175:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3559;
		case 32: goto tr3559;
		case 40: goto tr3560;
		case 41: goto tr3561;
		case 2058: goto tr3562;
		case 2107: goto tr3563;
	}
	goto tr3373;
st1176:
	if ( ++p == pe )
		goto _test_eof1176;
case 1176:
	switch( (*p) ) {
		case 89: goto st1177;
		case 121: goto st1177;
	}
	goto tr3373;
st1177:
	if ( ++p == pe )
		goto _test_eof1177;
case 1177:
	switch( (*p) ) {
		case 78: goto st1178;
		case 110: goto st1178;
	}
	goto tr3373;
st1178:
	if ( ++p == pe )
		goto _test_eof1178;
case 1178:
	switch( (*p) ) {
		case 67: goto st1179;
		case 99: goto st1179;
	}
	goto tr3373;
st1179:
	if ( ++p == pe )
		goto _test_eof1179;
case 1179:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3567;
		case 32: goto tr3567;
		case 40: goto tr3568;
		case 41: goto tr3569;
		case 2058: goto tr3570;
		case 2107: goto tr3571;
	}
	goto tr3373;
st1180:
	if ( ++p == pe )
		goto _test_eof1180;
case 1180:
	switch( (*p) ) {
		case 72: goto st1181;
		case 78: goto st1185;
		case 83: goto st1193;
		case 104: goto st1181;
		case 110: goto st1185;
		case 115: goto st1193;
	}
	goto tr3373;
st1181:
	if ( ++p == pe )
		goto _test_eof1181;
case 1181:
	switch( (*p) ) {
		case 67: goto st1182;
		case 99: goto st1182;
	}
	goto tr3373;
st1182:
	if ( ++p == pe )
		goto _test_eof1182;
case 1182:
	switch( (*p) ) {
		case 73: goto st1183;
		case 105: goto st1183;
	}
	goto tr3373;
st1183:
	if ( ++p == pe )
		goto _test_eof1183;
case 1183:
	switch( (*p) ) {
		case 68: goto st1184;
		case 100: goto st1184;
	}
	goto tr3373;
st1184:
	if ( ++p == pe )
		goto _test_eof1184;
case 1184:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3578;
		case 32: goto tr3578;
		case 40: goto tr3579;
		case 41: goto tr3580;
		case 2058: goto tr3581;
		case 2107: goto tr3582;
	}
	goto tr3373;
st1185:
	if ( ++p == pe )
		goto _test_eof1185;
case 1185:
	switch( (*p) ) {
		case 65: goto st1186;
		case 83: goto st1189;
		case 97: goto st1186;
		case 115: goto st1189;
	}
	goto tr3373;
st1186:
	if ( ++p == pe )
		goto _test_eof1186;
case 1186:
	switch( (*p) ) {
		case 77: goto st1187;
		case 109: goto st1187;
	}
	goto tr3373;
st1187:
	if ( ++p == pe )
		goto _test_eof1187;
case 1187:
	switch( (*p) ) {
		case 69: goto st1188;
		case 101: goto st1188;
	}
	goto tr3373;
st1188:
	if ( ++p == pe )
		goto _test_eof1188;
case 1188:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3587;
		case 32: goto tr3587;
		case 40: goto tr3588;
		case 41: goto tr3589;
		case 2058: goto tr3590;
		case 2107: goto tr3591;
	}
	goto tr3373;
st1189:
	if ( ++p == pe )
		goto _test_eof1189;
case 1189:
	switch( (*p) ) {
		case 75: goto st1190;
		case 107: goto st1190;
	}
	goto tr3373;
st1190:
	if ( ++p == pe )
		goto _test_eof1190;
case 1190:
	switch( (*p) ) {
		case 69: goto st1191;
		case 101: goto st1191;
	}
	goto tr3373;
st1191:
	if ( ++p == pe )
		goto _test_eof1191;
case 1191:
	switch( (*p) ) {
		case 89: goto st1192;
		case 121: goto st1192;
	}
	goto tr3373;
st1192:
	if ( ++p == pe )
		goto _test_eof1192;
case 1192:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3595;
		case 32: goto tr3595;
		case 40: goto tr3596;
		case 41: goto tr3597;
		case 2058: goto tr3598;
		case 2107: goto tr3599;
	}
	goto tr3373;
st1193:
	if ( ++p == pe )
		goto _test_eof1193;
case 1193:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3600;
		case 32: goto tr3600;
		case 40: goto tr3601;
		case 41: goto tr3602;
		case 89: goto st1194;
		case 121: goto st1194;
		case 2058: goto tr3604;
		case 2107: goto tr3605;
	}
	goto tr3373;
st1194:
	if ( ++p == pe )
		goto _test_eof1194;
case 1194:
	switch( (*p) ) {
		case 78: goto st1195;
		case 110: goto st1195;
	}
	goto tr3373;
st1195:
	if ( ++p == pe )
		goto _test_eof1195;
case 1195:
	switch( (*p) ) {
		case 67: goto st1196;
		case 99: goto st1196;
	}
	goto tr3373;
st1196:
	if ( ++p == pe )
		goto _test_eof1196;
case 1196:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3608;
		case 32: goto tr3608;
		case 40: goto tr3609;
		case 41: goto tr3610;
		case 2058: goto tr3611;
		case 2107: goto tr3612;
	}
	goto tr3373;
st1197:
	if ( ++p == pe )
		goto _test_eof1197;
case 1197:
	switch( (*p) ) {
		case 85: goto st1198;
		case 117: goto st1198;
	}
	goto tr3373;
st1198:
	if ( ++p == pe )
		goto _test_eof1198;
case 1198:
	switch( (*p) ) {
		case 73: goto st1199;
		case 105: goto st1199;
	}
	goto tr3373;
st1199:
	if ( ++p == pe )
		goto _test_eof1199;
case 1199:
	switch( (*p) ) {
		case 52: goto st1200;
		case 54: goto st1202;
	}
	goto tr3373;
st1200:
	if ( ++p == pe )
		goto _test_eof1200;
case 1200:
	if ( (*p) == 56 )
		goto st1201;
	goto tr3373;
st1201:
	if ( ++p == pe )
		goto _test_eof1201;
case 1201:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3618;
		case 32: goto tr3618;
		case 40: goto tr3619;
		case 41: goto tr3620;
		case 2058: goto tr3621;
		case 2107: goto tr3622;
	}
	goto tr3373;
st1202:
	if ( ++p == pe )
		goto _test_eof1202;
case 1202:
	if ( (*p) == 52 )
		goto st1203;
	goto tr3373;
st1203:
	if ( ++p == pe )
		goto _test_eof1203;
case 1203:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3624;
		case 32: goto tr3624;
		case 40: goto tr3625;
		case 41: goto tr3626;
		case 2058: goto tr3627;
		case 2107: goto tr3628;
	}
	goto tr3373;
st1204:
	if ( ++p == pe )
		goto _test_eof1204;
case 1204:
	switch( (*p) ) {
		case 73: goto st1205;
		case 84: goto st1209;
		case 105: goto st1205;
		case 116: goto st1209;
	}
	goto tr3373;
st1205:
	if ( ++p == pe )
		goto _test_eof1205;
case 1205:
	switch( (*p) ) {
		case 78: goto st1206;
		case 110: goto st1206;
	}
	goto tr3373;
st1206:
	if ( ++p == pe )
		goto _test_eof1206;
case 1206:
	switch( (*p) ) {
		case 70: goto st1207;
		case 102: goto st1207;
	}
	goto tr3373;
st1207:
	if ( ++p == pe )
		goto _test_eof1207;
case 1207:
	switch( (*p) ) {
		case 79: goto st1208;
		case 111: goto st1208;
	}
	goto tr3373;
st1208:
	if ( ++p == pe )
		goto _test_eof1208;
case 1208:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3634;
		case 32: goto tr3634;
		case 40: goto tr3635;
		case 41: goto tr3636;
		case 2058: goto tr3637;
		case 2107: goto tr3638;
	}
	goto tr3373;
st1209:
	if ( ++p == pe )
		goto _test_eof1209;
case 1209:
	switch( (*p) ) {
		case 84: goto st1210;
		case 116: goto st1210;
	}
	goto tr3373;
st1210:
	if ( ++p == pe )
		goto _test_eof1210;
case 1210:
	switch( (*p) ) {
		case 80: goto st1211;
		case 112: goto st1211;
	}
	goto tr3373;
st1211:
	if ( ++p == pe )
		goto _test_eof1211;
case 1211:
	switch( (*p) ) {
		case 83: goto st1212;
		case 115: goto st1212;
	}
	goto tr3373;
st1212:
	if ( ++p == pe )
		goto _test_eof1212;
case 1212:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3642;
		case 32: goto tr3642;
		case 40: goto tr3643;
		case 41: goto tr3644;
		case 2058: goto tr3645;
		case 2107: goto tr3646;
	}
	goto tr3373;
st1213:
	if ( ++p == pe )
		goto _test_eof1213;
case 1213:
	switch( (*p) ) {
		case 80: goto st1214;
		case 112: goto st1214;
	}
	goto tr3373;
st1214:
	if ( ++p == pe )
		goto _test_eof1214;
case 1214:
	switch( (*p) ) {
		case 83: goto st1215;
		case 115: goto st1215;
	}
	goto tr3373;
st1215:
	if ( ++p == pe )
		goto _test_eof1215;
case 1215:
	switch( (*p) ) {
		case 69: goto st1216;
		case 101: goto st1216;
	}
	goto tr3373;
st1216:
	if ( ++p == pe )
		goto _test_eof1216;
case 1216:
	switch( (*p) ) {
		case 67: goto st1217;
		case 99: goto st1217;
	}
	goto tr3373;
st1217:
	if ( ++p == pe )
		goto _test_eof1217;
case 1217:
	switch( (*p) ) {
		case 75: goto st1218;
		case 107: goto st1218;
	}
	goto tr3373;
st1218:
	if ( ++p == pe )
		goto _test_eof1218;
case 1218:
	switch( (*p) ) {
		case 69: goto st1219;
		case 101: goto st1219;
	}
	goto tr3373;
st1219:
	if ( ++p == pe )
		goto _test_eof1219;
case 1219:
	switch( (*p) ) {
		case 89: goto st1220;
		case 121: goto st1220;
	}
	goto tr3373;
st1220:
	if ( ++p == pe )
		goto _test_eof1220;
case 1220:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3654;
		case 32: goto tr3654;
		case 40: goto tr3655;
		case 41: goto tr3656;
		case 2058: goto tr3657;
		case 2107: goto tr3658;
	}
	goto tr3373;
st1221:
	if ( ++p == pe )
		goto _test_eof1221;
case 1221:
	switch( (*p) ) {
		case 69: goto st1222;
		case 88: goto st1224;
		case 101: goto st1222;
		case 120: goto st1224;
	}
	goto tr3373;
st1222:
	if ( ++p == pe )
		goto _test_eof1222;
case 1222:
	switch( (*p) ) {
		case 89: goto st1223;
		case 121: goto st1223;
	}
	goto tr3373;
st1223:
	if ( ++p == pe )
		goto _test_eof1223;
case 1223:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3662;
		case 32: goto tr3662;
		case 40: goto tr3663;
		case 41: goto tr3664;
		case 2058: goto tr3665;
		case 2107: goto tr3666;
	}
	goto tr3373;
st1224:
	if ( ++p == pe )
		goto _test_eof1224;
case 1224:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3667;
		case 32: goto tr3667;
		case 40: goto tr3668;
		case 41: goto tr3669;
		case 2058: goto tr3670;
		case 2107: goto tr3671;
	}
	goto tr3373;
st1225:
	if ( ++p == pe )
		goto _test_eof1225;
case 1225:
	switch( (*p) ) {
		case 51: goto st1226;
		case 54: goto st1228;
		case 79: goto st1230;
		case 80: goto st1232;
		case 111: goto st1230;
		case 112: goto st1232;
	}
	goto tr3373;
st1226:
	if ( ++p == pe )
		goto _test_eof1226;
case 1226:
	if ( (*p) == 50 )
		goto st1227;
	goto tr3373;
st1227:
	if ( ++p == pe )
		goto _test_eof1227;
case 1227:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3677;
		case 32: goto tr3677;
		case 40: goto tr3678;
		case 41: goto tr3679;
		case 2058: goto tr3680;
		case 2107: goto tr3681;
	}
	goto tr3373;
st1228:
	if ( ++p == pe )
		goto _test_eof1228;
case 1228:
	if ( (*p) == 52 )
		goto st1229;
	goto tr3373;
st1229:
	if ( ++p == pe )
		goto _test_eof1229;
case 1229:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3683;
		case 32: goto tr3683;
		case 40: goto tr3684;
		case 41: goto tr3685;
		case 2058: goto tr3686;
		case 2107: goto tr3687;
	}
	goto tr3373;
st1230:
	if ( ++p == pe )
		goto _test_eof1230;
case 1230:
	switch( (*p) ) {
		case 67: goto st1231;
		case 99: goto st1231;
	}
	goto tr3373;
st1231:
	if ( ++p == pe )
		goto _test_eof1231;
case 1231:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3689;
		case 32: goto tr3689;
		case 40: goto tr3690;
		case 41: goto tr3691;
		case 2058: goto tr3692;
		case 2107: goto tr3693;
	}
	goto tr3373;
st1232:
	if ( ++p == pe )
		goto _test_eof1232;
case 1232:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3694;
		case 32: goto tr3694;
		case 40: goto tr3695;
		case 41: goto tr3696;
		case 2058: goto tr3697;
		case 2107: goto tr3698;
	}
	goto tr3373;
st1233:
	if ( ++p == pe )
		goto _test_eof1233;
case 1233:
	switch( (*p) ) {
		case 73: goto st1234;
		case 88: goto st1238;
		case 105: goto st1234;
		case 120: goto st1238;
	}
	goto tr3373;
st1234:
	if ( ++p == pe )
		goto _test_eof1234;
case 1234:
	switch( (*p) ) {
		case 78: goto st1235;
		case 110: goto st1235;
	}
	goto tr3373;
st1235:
	if ( ++p == pe )
		goto _test_eof1235;
case 1235:
	switch( (*p) ) {
		case 70: goto st1236;
		case 102: goto st1236;
	}
	goto tr3373;
st1236:
	if ( ++p == pe )
		goto _test_eof1236;
case 1236:
	switch( (*p) ) {
		case 79: goto st1237;
		case 111: goto st1237;
	}
	goto tr3373;
st1237:
	if ( ++p == pe )
		goto _test_eof1237;
case 1237:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3704;
		case 32: goto tr3704;
		case 40: goto tr3705;
		case 41: goto tr3706;
		case 2058: goto tr3707;
		case 2107: goto tr3708;
	}
	goto tr3373;
st1238:
	if ( ++p == pe )
		goto _test_eof1238;
case 1238:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3709;
		case 32: goto tr3709;
		case 40: goto tr3710;
		case 41: goto tr3711;
		case 2058: goto tr3712;
		case 2107: goto tr3713;
	}
	goto tr3373;
st1239:
	if ( ++p == pe )
		goto _test_eof1239;
case 1239:
	switch( (*p) ) {
		case 65: goto st1240;
		case 73: goto st1244;
		case 83: goto st1246;
		case 97: goto st1240;
		case 105: goto st1244;
		case 115: goto st1246;
	}
	goto tr3373;
st1240:
	if ( ++p == pe )
		goto _test_eof1240;
case 1240:
	switch( (*p) ) {
		case 80: goto st1241;
		case 112: goto st1241;
	}
	goto tr3373;
st1241:
	if ( ++p == pe )
		goto _test_eof1241;
case 1241:
	switch( (*p) ) {
		case 84: goto st1242;
		case 116: goto st1242;
	}
	goto tr3373;
st1242:
	if ( ++p == pe )
		goto _test_eof1242;
case 1242:
	switch( (*p) ) {
		case 82: goto st1243;
		case 114: goto st1243;
	}
	goto tr3373;
st1243:
	if ( ++p == pe )
		goto _test_eof1243;
case 1243:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3720;
		case 32: goto tr3720;
		case 40: goto tr3721;
		case 41: goto tr3722;
		case 2058: goto tr3723;
		case 2107: goto tr3724;
	}
	goto tr3373;
st1244:
	if ( ++p == pe )
		goto _test_eof1244;
case 1244:
	switch( (*p) ) {
		case 68: goto st1245;
		case 100: goto st1245;
	}
	goto tr3373;
st1245:
	if ( ++p == pe )
		goto _test_eof1245;
case 1245:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3726;
		case 32: goto tr3726;
		case 40: goto tr3727;
		case 41: goto tr3728;
		case 2058: goto tr3729;
		case 2107: goto tr3730;
	}
	goto tr3373;
st1246:
	if ( ++p == pe )
		goto _test_eof1246;
case 1246:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3731;
		case 32: goto tr3731;
		case 40: goto tr3732;
		case 41: goto tr3733;
		case 69: goto st1247;
		case 101: goto st1247;
		case 2058: goto tr3735;
		case 2107: goto tr3736;
	}
	goto tr3373;
st1247:
	if ( ++p == pe )
		goto _test_eof1247;
case 1247:
	switch( (*p) ) {
		case 67: goto st1248;
		case 99: goto st1248;
	}
	goto tr3373;
st1248:
	if ( ++p == pe )
		goto _test_eof1248;
case 1248:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3738;
		case 32: goto tr3738;
		case 40: goto tr3739;
		case 41: goto tr3740;
		case 51: goto st1249;
		case 2058: goto tr3742;
		case 2107: goto tr3743;
	}
	goto tr3373;
st1249:
	if ( ++p == pe )
		goto _test_eof1249;
case 1249:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3744;
		case 32: goto tr3744;
		case 40: goto tr3745;
		case 41: goto tr3746;
		case 80: goto st1250;
		case 112: goto st1250;
		case 2058: goto tr3748;
		case 2107: goto tr3749;
	}
	goto tr3373;
st1250:
	if ( ++p == pe )
		goto _test_eof1250;
case 1250:
	switch( (*p) ) {
		case 65: goto st1251;
		case 97: goto st1251;
	}
	goto tr3373;
st1251:
	if ( ++p == pe )
		goto _test_eof1251;
case 1251:
	switch( (*p) ) {
		case 82: goto st1252;
		case 114: goto st1252;
	}
	goto tr3373;
st1252:
	if ( ++p == pe )
		goto _test_eof1252;
case 1252:
	switch( (*p) ) {
		case 65: goto st1253;
		case 97: goto st1253;
	}
	goto tr3373;
st1253:
	if ( ++p == pe )
		goto _test_eof1253;
case 1253:
	switch( (*p) ) {
		case 77: goto st1254;
		case 109: goto st1254;
	}
	goto tr3373;
st1254:
	if ( ++p == pe )
		goto _test_eof1254;
case 1254:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3754;
		case 32: goto tr3754;
		case 40: goto tr3755;
		case 41: goto tr3756;
		case 2058: goto tr3757;
		case 2107: goto tr3758;
	}
	goto tr3373;
st1255:
	if ( ++p == pe )
		goto _test_eof1255;
case 1255:
	switch( (*p) ) {
		case 80: goto st1256;
		case 112: goto st1256;
	}
	goto tr3373;
st1256:
	if ( ++p == pe )
		goto _test_eof1256;
case 1256:
	switch( (*p) ) {
		case 69: goto st1257;
		case 101: goto st1257;
	}
	goto tr3373;
st1257:
	if ( ++p == pe )
		goto _test_eof1257;
case 1257:
	switch( (*p) ) {
		case 78: goto st1258;
		case 110: goto st1258;
	}
	goto tr3373;
st1258:
	if ( ++p == pe )
		goto _test_eof1258;
case 1258:
	switch( (*p) ) {
		case 80: goto st1259;
		case 112: goto st1259;
	}
	goto tr3373;
st1259:
	if ( ++p == pe )
		goto _test_eof1259;
case 1259:
	switch( (*p) ) {
		case 71: goto st1260;
		case 103: goto st1260;
	}
	goto tr3373;
st1260:
	if ( ++p == pe )
		goto _test_eof1260;
case 1260:
	switch( (*p) ) {
		case 80: goto st1261;
		case 112: goto st1261;
	}
	goto tr3373;
st1261:
	if ( ++p == pe )
		goto _test_eof1261;
case 1261:
	switch( (*p) ) {
		case 75: goto st1262;
		case 107: goto st1262;
	}
	goto tr3373;
st1262:
	if ( ++p == pe )
		goto _test_eof1262;
case 1262:
	switch( (*p) ) {
		case 69: goto st1263;
		case 101: goto st1263;
	}
	goto tr3373;
st1263:
	if ( ++p == pe )
		goto _test_eof1263;
case 1263:
	switch( (*p) ) {
		case 89: goto st1264;
		case 121: goto st1264;
	}
	goto tr3373;
st1264:
	if ( ++p == pe )
		goto _test_eof1264;
case 1264:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3768;
		case 32: goto tr3768;
		case 40: goto tr3769;
		case 41: goto tr3770;
		case 2058: goto tr3771;
		case 2107: goto tr3772;
	}
	goto tr3373;
st1265:
	if ( ++p == pe )
		goto _test_eof1265;
case 1265:
	switch( (*p) ) {
		case 84: goto st1266;
		case 116: goto st1266;
	}
	goto tr3373;
st1266:
	if ( ++p == pe )
		goto _test_eof1266;
case 1266:
	switch( (*p) ) {
		case 82: goto st1267;
		case 114: goto st1267;
	}
	goto tr3373;
st1267:
	if ( ++p == pe )
		goto _test_eof1267;
case 1267:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3775;
		case 32: goto tr3775;
		case 40: goto tr3776;
		case 41: goto tr3777;
		case 2058: goto tr3778;
		case 2107: goto tr3779;
	}
	goto tr3373;
st1268:
	if ( ++p == pe )
		goto _test_eof1268;
case 1268:
	switch( (*p) ) {
		case 80: goto st1269;
		case 82: goto st1270;
		case 84: goto st1274;
		case 112: goto st1269;
		case 114: goto st1270;
		case 116: goto st1274;
	}
	goto tr3373;
st1269:
	if ( ++p == pe )
		goto _test_eof1269;
case 1269:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3783;
		case 32: goto tr3783;
		case 40: goto tr3784;
		case 41: goto tr3785;
		case 2058: goto tr3786;
		case 2107: goto tr3787;
	}
	goto tr3373;
st1270:
	if ( ++p == pe )
		goto _test_eof1270;
case 1270:
	switch( (*p) ) {
		case 83: goto st1271;
		case 115: goto st1271;
	}
	goto tr3373;
st1271:
	if ( ++p == pe )
		goto _test_eof1271;
case 1271:
	switch( (*p) ) {
		case 73: goto st1272;
		case 105: goto st1272;
	}
	goto tr3373;
st1272:
	if ( ++p == pe )
		goto _test_eof1272;
case 1272:
	switch( (*p) ) {
		case 71: goto st1273;
		case 103: goto st1273;
	}
	goto tr3373;
st1273:
	if ( ++p == pe )
		goto _test_eof1273;
case 1273:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3791;
		case 32: goto tr3791;
		case 40: goto tr3792;
		case 41: goto tr3793;
		case 2058: goto tr3794;
		case 2107: goto tr3795;
	}
	goto tr3373;
st1274:
	if ( ++p == pe )
		goto _test_eof1274;
case 1274:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3796;
		case 32: goto tr3796;
		case 40: goto tr3797;
		case 41: goto tr3798;
		case 2058: goto tr3799;
		case 2107: goto tr3800;
	}
	goto tr3373;
st1275:
	if ( ++p == pe )
		goto _test_eof1275;
case 1275:
	switch( (*p) ) {
		case 77: goto st1276;
		case 79: goto st1281;
		case 80: goto st1283;
		case 82: goto st1285;
		case 83: goto st1287;
		case 86: goto st1291;
		case 109: goto st1276;
		case 111: goto st1281;
		case 112: goto st1283;
		case 114: goto st1285;
		case 115: goto st1287;
		case 118: goto st1291;
	}
	goto tr3373;
st1276:
	if ( ++p == pe )
		goto _test_eof1276;
case 1276:
	switch( (*p) ) {
		case 73: goto st1277;
		case 105: goto st1277;
	}
	goto tr3373;
st1277:
	if ( ++p == pe )
		goto _test_eof1277;
case 1277:
	switch( (*p) ) {
		case 77: goto st1278;
		case 109: goto st1278;
	}
	goto tr3373;
st1278:
	if ( ++p == pe )
		goto _test_eof1278;
case 1278:
	switch( (*p) ) {
		case 69: goto st1279;
		case 101: goto st1279;
	}
	goto tr3373;
st1279:
	if ( ++p == pe )
		goto _test_eof1279;
case 1279:
	switch( (*p) ) {
		case 65: goto st1280;
		case 97: goto st1280;
	}
	goto tr3373;
st1280:
	if ( ++p == pe )
		goto _test_eof1280;
case 1280:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3811;
		case 32: goto tr3811;
		case 40: goto tr3812;
		case 41: goto tr3813;
		case 2058: goto tr3814;
		case 2107: goto tr3815;
	}
	goto tr3373;
st1281:
	if ( ++p == pe )
		goto _test_eof1281;
case 1281:
	switch( (*p) ) {
		case 65: goto st1282;
		case 97: goto st1282;
	}
	goto tr3373;
st1282:
	if ( ++p == pe )
		goto _test_eof1282;
case 1282:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3817;
		case 32: goto tr3817;
		case 40: goto tr3818;
		case 41: goto tr3819;
		case 2058: goto tr3820;
		case 2107: goto tr3821;
	}
	goto tr3373;
st1283:
	if ( ++p == pe )
		goto _test_eof1283;
case 1283:
	switch( (*p) ) {
		case 70: goto st1284;
		case 102: goto st1284;
	}
	goto tr3373;
st1284:
	if ( ++p == pe )
		goto _test_eof1284;
case 1284:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3823;
		case 32: goto tr3823;
		case 40: goto tr3824;
		case 41: goto tr3825;
		case 2058: goto tr3826;
		case 2107: goto tr3827;
	}
	goto tr3373;
st1285:
	if ( ++p == pe )
		goto _test_eof1285;
case 1285:
	switch( (*p) ) {
		case 86: goto st1286;
		case 118: goto st1286;
	}
	goto tr3373;
st1286:
	if ( ++p == pe )
		goto _test_eof1286;
case 1286:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3829;
		case 32: goto tr3829;
		case 40: goto tr3830;
		case 41: goto tr3831;
		case 2058: goto tr3832;
		case 2107: goto tr3833;
	}
	goto tr3373;
st1287:
	if ( ++p == pe )
		goto _test_eof1287;
case 1287:
	switch( (*p) ) {
		case 72: goto st1288;
		case 104: goto st1288;
	}
	goto tr3373;
st1288:
	if ( ++p == pe )
		goto _test_eof1288;
case 1288:
	switch( (*p) ) {
		case 70: goto st1289;
		case 102: goto st1289;
	}
	goto tr3373;
st1289:
	if ( ++p == pe )
		goto _test_eof1289;
case 1289:
	switch( (*p) ) {
		case 80: goto st1290;
		case 112: goto st1290;
	}
	goto tr3373;
st1290:
	if ( ++p == pe )
		goto _test_eof1290;
case 1290:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3837;
		case 32: goto tr3837;
		case 40: goto tr3838;
		case 41: goto tr3839;
		case 2058: goto tr3840;
		case 2107: goto tr3841;
	}
	goto tr3373;
st1291:
	if ( ++p == pe )
		goto _test_eof1291;
case 1291:
	switch( (*p) ) {
		case 67: goto st1292;
		case 99: goto st1292;
	}
	goto tr3373;
st1292:
	if ( ++p == pe )
		goto _test_eof1292;
case 1292:
	switch( (*p) ) {
		case 66: goto st1293;
		case 98: goto st1293;
	}
	goto tr3373;
st1293:
	if ( ++p == pe )
		goto _test_eof1293;
case 1293:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3844;
		case 32: goto tr3844;
		case 40: goto tr3845;
		case 41: goto tr3846;
		case 2058: goto tr3847;
		case 2107: goto tr3848;
	}
	goto tr3373;
st1294:
	if ( ++p == pe )
		goto _test_eof1294;
case 1294:
	switch( (*p) ) {
		case 76: goto st1295;
		case 88: goto st1298;
		case 89: goto st1300;
		case 108: goto st1295;
		case 120: goto st1298;
		case 121: goto st1300;
	}
	goto tr3373;
st1295:
	if ( ++p == pe )
		goto _test_eof1295;
case 1295:
	switch( (*p) ) {
		case 83: goto st1296;
		case 115: goto st1296;
	}
	goto tr3373;
st1296:
	if ( ++p == pe )
		goto _test_eof1296;
case 1296:
	switch( (*p) ) {
		case 65: goto st1297;
		case 97: goto st1297;
	}
	goto tr3373;
st1297:
	if ( ++p == pe )
		goto _test_eof1297;
case 1297:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3854;
		case 32: goto tr3854;
		case 40: goto tr3855;
		case 41: goto tr3856;
		case 2058: goto tr3857;
		case 2107: goto tr3858;
	}
	goto tr3373;
st1298:
	if ( ++p == pe )
		goto _test_eof1298;
case 1298:
	switch( (*p) ) {
		case 84: goto st1299;
		case 116: goto st1299;
	}
	goto tr3373;
st1299:
	if ( ++p == pe )
		goto _test_eof1299;
case 1299:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3860;
		case 32: goto tr3860;
		case 40: goto tr3861;
		case 41: goto tr3862;
		case 2058: goto tr3863;
		case 2107: goto tr3864;
	}
	goto tr3373;
st1300:
	if ( ++p == pe )
		goto _test_eof1300;
case 1300:
	switch( (*p) ) {
		case 80: goto st1301;
		case 112: goto st1301;
	}
	goto tr3373;
st1301:
	if ( ++p == pe )
		goto _test_eof1301;
case 1301:
	switch( (*p) ) {
		case 69: goto st1302;
		case 101: goto st1302;
	}
	goto tr3373;
st1302:
	if ( ++p == pe )
		goto _test_eof1302;
case 1302:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr3868;
	goto tr3867;
tr3868:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1303;
tr3872:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1303;
st1303:
	if ( ++p == pe )
		goto _test_eof1303;
case 1303:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3869;
		case 32: goto tr3869;
		case 40: goto tr3870;
		case 41: goto tr3871;
		case 2058: goto tr3873;
		case 2107: goto tr3874;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3872;
	goto tr3867;
st1304:
	if ( ++p == pe )
		goto _test_eof1304;
case 1304:
	switch( (*p) ) {
		case 82: goto st1305;
		case 114: goto st1305;
	}
	goto tr3373;
st1305:
	if ( ++p == pe )
		goto _test_eof1305;
case 1305:
	switch( (*p) ) {
		case 73: goto st1306;
		case 105: goto st1306;
	}
	goto tr3373;
st1306:
	if ( ++p == pe )
		goto _test_eof1306;
case 1306:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3877;
		case 32: goto tr3877;
		case 40: goto tr3878;
		case 41: goto tr3879;
		case 2058: goto tr3880;
		case 2107: goto tr3881;
	}
	goto tr3373;
st1307:
	if ( ++p == pe )
		goto _test_eof1307;
case 1307:
	switch( (*p) ) {
		case 65: goto st1308;
		case 97: goto st1308;
	}
	goto tr3373;
st1308:
	if ( ++p == pe )
		goto _test_eof1308;
case 1308:
	switch( (*p) ) {
		case 76: goto st1309;
		case 108: goto st1309;
	}
	goto tr3373;
st1309:
	if ( ++p == pe )
		goto _test_eof1309;
case 1309:
	switch( (*p) ) {
		case 76: goto st1310;
		case 108: goto st1310;
	}
	goto tr3373;
st1310:
	if ( ++p == pe )
		goto _test_eof1310;
case 1310:
	switch( (*p) ) {
		case 69: goto st1311;
		case 101: goto st1311;
	}
	goto tr3373;
st1311:
	if ( ++p == pe )
		goto _test_eof1311;
case 1311:
	switch( (*p) ) {
		case 84: goto st1312;
		case 116: goto st1312;
	}
	goto tr3373;
st1312:
	if ( ++p == pe )
		goto _test_eof1312;
case 1312:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3887;
		case 32: goto tr3887;
		case 40: goto tr3888;
		case 41: goto tr3889;
		case 2058: goto tr3890;
		case 2107: goto tr3891;
	}
	goto tr3373;
st1313:
	if ( ++p == pe )
		goto _test_eof1313;
case 1313:
	switch( (*p) ) {
		case 79: goto st1314;
		case 111: goto st1314;
	}
	goto tr3373;
st1314:
	if ( ++p == pe )
		goto _test_eof1314;
case 1314:
	switch( (*p) ) {
		case 78: goto st1315;
		case 110: goto st1315;
	}
	goto tr3373;
st1315:
	if ( ++p == pe )
		goto _test_eof1315;
case 1315:
	switch( (*p) ) {
		case 69: goto st1316;
		case 101: goto st1316;
	}
	goto tr3373;
st1316:
	if ( ++p == pe )
		goto _test_eof1316;
case 1316:
	switch( (*p) ) {
		case 77: goto st1317;
		case 109: goto st1317;
	}
	goto tr3373;
st1317:
	if ( ++p == pe )
		goto _test_eof1317;
case 1317:
	switch( (*p) ) {
		case 68: goto st1318;
		case 100: goto st1318;
	}
	goto tr3373;
st1318:
	if ( ++p == pe )
		goto _test_eof1318;
case 1318:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3897;
		case 32: goto tr3897;
		case 40: goto tr3898;
		case 41: goto tr3899;
		case 2058: goto tr3900;
		case 2107: goto tr3901;
	}
	goto tr3373;
st1319:
	if ( ++p == pe )
		goto _test_eof1319;
case 1319:
	switch( (*p) ) {
		case 42: goto tr3902;
		case 92: goto tr3902;
		case 95: goto tr3902;
	}
	if ( (*p) < 64 ) {
		if ( 45 <= (*p) && (*p) <= 57 )
			goto tr3902;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr3902;
	} else
		goto tr3902;
	goto tr77;
tr3902:
	{
		s->dname = rdata_tail;
	}
	{ p--; {stack[top++] = 1320;goto st321;} }
	goto st1320;
st1320:
	if ( ++p == pe )
		goto _test_eof1320;
case 1320:
	switch( (*p) ) {
		case 32: goto tr3903;
		case 59: goto tr3903;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr3903;
	} else if ( (*p) >= 9 )
		goto tr3903;
	goto tr77;
tr3903:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{ p--; {stack[top++] = 1321;goto st388;} }
	goto st1321;
st1321:
	if ( ++p == pe )
		goto _test_eof1321;
case 1321:
	switch( (*p) ) {
		case 32: goto tr3904;
		case 59: goto tr3904;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr3904;
	} else if ( (*p) >= 9 )
		goto tr3904;
	goto tr77;
tr3904:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1720;
st1720:
	if ( ++p == pe )
		goto _test_eof1720;
case 1720:
	goto st0;
st1322:
	if ( ++p == pe )
		goto _test_eof1322;
case 1322:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr3905;
	goto tr2429;
tr3905:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1323;
tr3909:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1323;
st1323:
	if ( ++p == pe )
		goto _test_eof1323;
case 1323:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3906;
		case 32: goto tr3906;
		case 40: goto tr3907;
		case 41: goto tr3908;
		case 2058: goto tr3910;
		case 2107: goto tr3911;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3909;
	goto tr2429;
tr3913:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1324;
tr3914:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1324;
tr3916:
	{
		s->line_counter++;
	}
	goto st1324;
tr3942:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1324; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1324;
tr3906:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1324;
tr3907:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1324;
tr3908:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1324;
tr3910:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1324;
st1324:
	if ( ++p == pe )
		goto _test_eof1324;
case 1324:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1324;
		case 32: goto st1324;
		case 40: goto tr3913;
		case 41: goto tr3914;
		case 2058: goto tr3916;
		case 2107: goto tr3917;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3915;
	goto tr2429;
tr3915:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1325;
tr3921:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1325;
st1325:
	if ( ++p == pe )
		goto _test_eof1325;
case 1325:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3918;
		case 32: goto tr3918;
		case 40: goto tr3919;
		case 41: goto tr3920;
		case 2058: goto tr3922;
		case 2107: goto tr3923;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3921;
	goto tr2429;
tr3925:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1326;
tr3926:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1326;
tr3928:
	{
		s->line_counter++;
	}
	goto st1326;
tr3940:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1326; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1326;
tr3918:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1326;
tr3919:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1326;
tr3920:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1326;
tr3922:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1326;
st1326:
	if ( ++p == pe )
		goto _test_eof1326;
case 1326:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1326;
		case 32: goto st1326;
		case 40: goto tr3925;
		case 41: goto tr3926;
		case 2058: goto tr3928;
		case 2107: goto tr3929;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr3927;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr3927;
	} else
		goto tr3927;
	goto tr77;
tr3927:
	{ p--; {stack[top++] = 1327;goto st747;} }
	goto st1327;
st1327:
	if ( ++p == pe )
		goto _test_eof1327;
case 1327:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1328;
		case 32: goto st1328;
		case 40: goto tr3931;
		case 41: goto tr3932;
		case 2058: goto tr3933;
		case 2107: goto tr3934;
	}
	goto tr77;
tr3931:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1328;
tr3932:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1328;
tr3933:
	{
		s->line_counter++;
	}
	goto st1328;
tr3938:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1328; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1328;
st1328:
	if ( ++p == pe )
		goto _test_eof1328;
case 1328:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1328;
		case 32: goto st1328;
		case 40: goto tr3931;
		case 41: goto tr3932;
		case 43: goto tr3935;
		case 2058: goto tr3933;
		case 2107: goto tr3934;
	}
	if ( _widec < 65 ) {
		if ( 47 <= _widec && _widec <= 57 )
			goto tr3935;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr3935;
	} else
		goto tr3935;
	goto tr77;
tr3935:
	{ p--; {stack[top++] = 1329;goto st381;} }
	goto st1329;
st1329:
	if ( ++p == pe )
		goto _test_eof1329;
case 1329:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2176 + ((*p) - -128));
			if (
 !s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2176 + ((*p) - -128));
		if (
 !s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 2570: goto tr3936;
		case 2619: goto tr3936;
	}
	goto tr77;
tr3936:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1721;
st1721:
	if ( ++p == pe )
		goto _test_eof1721;
case 1721:
	goto st0;
tr3934:
	{
		s->buffer_length = 0;
	}
	goto st1330;
tr3937:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1330;
st1330:
	if ( ++p == pe )
		goto _test_eof1330;
case 1330:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3938;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3937;
	goto tr77;
tr3929:
	{
		s->buffer_length = 0;
	}
	goto st1331;
tr3939:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1331;
tr3923:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1331;
st1331:
	if ( ++p == pe )
		goto _test_eof1331;
case 1331:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3940;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3939;
	goto tr77;
tr3917:
	{
		s->buffer_length = 0;
	}
	goto st1332;
tr3941:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1332;
tr3911:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1332;
st1332:
	if ( ++p == pe )
		goto _test_eof1332;
case 1332:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr3942;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr3941;
	goto tr77;
st1333:
	if ( ++p == pe )
		goto _test_eof1333;
case 1333:
	if ( (*p) == 43 )
		goto tr3943;
	if ( (*p) < 65 ) {
		if ( 47 <= (*p) && (*p) <= 57 )
			goto tr3943;
	} else if ( (*p) > 90 ) {
		if ( 97 <= (*p) && (*p) <= 122 )
			goto tr3943;
	} else
		goto tr3943;
	goto tr77;
tr3943:
	{ p--; {stack[top++] = 1334;goto st381;} }
	goto st1334;
st1334:
	if ( ++p == pe )
		goto _test_eof1334;
case 1334:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2176 + ((*p) - -128));
			if (
 !s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2176 + ((*p) - -128));
		if (
 !s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 2570: goto tr3944;
		case 2619: goto tr3944;
	}
	goto tr77;
tr3944:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1722;
st1722:
	if ( ++p == pe )
		goto _test_eof1722;
case 1722:
	goto st0;
st1335:
	if ( ++p == pe )
		goto _test_eof1335;
case 1335:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr3945;
	goto tr2429;
tr3945:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1336;
tr3949:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1336;
st1336:
	if ( ++p == pe )
		goto _test_eof1336;
case 1336:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3946;
		case 32: goto tr3946;
		case 40: goto tr3947;
		case 41: goto tr3948;
		case 2058: goto tr3950;
		case 2107: goto tr3951;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3949;
	goto tr2429;
tr3953:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1337;
tr3954:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1337;
tr3956:
	{
		s->line_counter++;
	}
	goto st1337;
tr4020:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1337; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1337;
tr3946:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1337;
tr3947:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1337;
tr3948:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1337;
tr3950:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1337;
st1337:
	if ( ++p == pe )
		goto _test_eof1337;
case 1337:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1337;
		case 32: goto st1337;
		case 40: goto tr3953;
		case 41: goto tr3954;
		case 2058: goto tr3956;
		case 2107: goto tr3957;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3955;
	goto tr2429;
tr3955:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1338;
tr3961:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1338;
st1338:
	if ( ++p == pe )
		goto _test_eof1338;
case 1338:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3958;
		case 32: goto tr3958;
		case 40: goto tr3959;
		case 41: goto tr3960;
		case 2058: goto tr3962;
		case 2107: goto tr3963;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3961;
	goto tr2429;
tr3965:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1339;
tr3966:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1339;
tr3968:
	{
		s->line_counter++;
	}
	goto st1339;
tr4018:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1339; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1339;
tr3958:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1339;
tr3959:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1339;
tr3960:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1339;
tr3962:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1339;
st1339:
	if ( ++p == pe )
		goto _test_eof1339;
case 1339:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1339;
		case 32: goto st1339;
		case 40: goto tr3965;
		case 41: goto tr3966;
		case 2058: goto tr3968;
		case 2107: goto tr3969;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3967;
	goto tr2429;
tr3967:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1340;
tr3973:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1340;
st1340:
	if ( ++p == pe )
		goto _test_eof1340;
case 1340:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3970;
		case 32: goto tr3970;
		case 40: goto tr3971;
		case 41: goto tr3972;
		case 2058: goto tr3974;
		case 2107: goto tr3975;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr3973;
	goto tr2429;
tr3977:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1341;
tr3978:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1341;
tr3981:
	{
		s->line_counter++;
	}
	goto st1341;
tr4016:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1341; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1341;
tr3970:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1341;
tr3971:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1341;
tr3972:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1341;
tr3974:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1341;
st1341:
	if ( ++p == pe )
		goto _test_eof1341;
case 1341:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1341;
		case 32: goto st1341;
		case 40: goto tr3977;
		case 41: goto tr3978;
		case 45: goto tr3979;
		case 2058: goto tr3981;
		case 2107: goto tr3982;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr3980;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr3980;
	} else
		goto tr3980;
	goto tr3100;
tr3979:
	{
		if (rdata_tail <= rdata_stop) {
			s->item_length_location = rdata_tail++;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1342;
st1342:
	if ( ++p == pe )
		goto _test_eof1342;
case 1342:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3983;
		case 32: goto tr3983;
		case 40: goto tr3984;
		case 41: goto tr3985;
		case 2058: goto tr3986;
		case 2107: goto tr3987;
	}
	goto tr3100;
tr3990:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1343;
tr3991:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1343;
tr3993:
	{
		s->line_counter++;
	}
	goto st1343;
tr4012:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1343; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1343;
tr3983:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1343;
tr3984:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1343;
tr3985:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1343;
tr3986:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1343;
st1343:
	if ( ++p == pe )
		goto _test_eof1343;
case 1343:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1343;
		case 32: goto st1343;
		case 40: goto tr3990;
		case 41: goto tr3991;
		case 2058: goto tr3993;
		case 2107: goto tr3994;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr3992;
	} else if ( _widec > 86 ) {
		if ( 97 <= _widec && _widec <= 118 )
			goto tr3992;
	} else
		goto tr3992;
	goto tr3988;
tr3992:
	{
		if (rdata_tail <= rdata_stop) {
			s->item_length_location = rdata_tail++;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_base32hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1344;
tr4007:
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_base32hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1344;
st1344:
	if ( ++p == pe )
		goto _test_eof1344;
case 1344:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr3995;
	} else if ( (*p) > 86 ) {
		if ( 97 <= (*p) && (*p) <= 118 )
			goto tr3995;
	} else
		goto tr3995;
	goto tr3988;
tr3995:
	{
		*(rdata_tail++) += second_left_base32hex_to_num[(uint8_t)(*p)];

		if (rdata_tail <= rdata_stop) {
			*rdata_tail = second_right_base32hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1345;
st1345:
	if ( ++p == pe )
		goto _test_eof1345;
case 1345:
	if ( (*p) == 61 )
		goto st1356;
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr3996;
	} else if ( (*p) > 86 ) {
		if ( 97 <= (*p) && (*p) <= 118 )
			goto tr3996;
	} else
		goto tr3996;
	goto tr3988;
tr3996:
	{
		*rdata_tail += third_base32hex_to_num[(uint8_t)(*p)];
	}
	goto st1346;
st1346:
	if ( ++p == pe )
		goto _test_eof1346;
case 1346:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr3998;
	} else if ( (*p) > 86 ) {
		if ( 97 <= (*p) && (*p) <= 118 )
			goto tr3998;
	} else
		goto tr3998;
	goto tr3988;
tr3998:
	{
		*(rdata_tail++) += fourth_left_base32hex_to_num[(uint8_t)(*p)];

		if (rdata_tail <= rdata_stop) {
			*rdata_tail = fourth_right_base32hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1347;
st1347:
	if ( ++p == pe )
		goto _test_eof1347;
case 1347:
	if ( (*p) == 61 )
		goto st1355;
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr3999;
	} else if ( (*p) > 86 ) {
		if ( 97 <= (*p) && (*p) <= 118 )
			goto tr3999;
	} else
		goto tr3999;
	goto tr3988;
tr3999:
	{
		*(rdata_tail++) += fifth_left_base32hex_to_num[(uint8_t)(*p)];

		if (rdata_tail <= rdata_stop) {
			*rdata_tail = fifth_right_base32hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1348;
st1348:
	if ( ++p == pe )
		goto _test_eof1348;
case 1348:
	if ( (*p) == 61 )
		goto st1353;
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr4001;
	} else if ( (*p) > 86 ) {
		if ( 97 <= (*p) && (*p) <= 118 )
			goto tr4001;
	} else
		goto tr4001;
	goto tr3988;
tr4001:
	{
		*rdata_tail += sixth_base32hex_to_num[(uint8_t)(*p)];
	}
	goto st1349;
st1349:
	if ( ++p == pe )
		goto _test_eof1349;
case 1349:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr4003;
	} else if ( (*p) > 86 ) {
		if ( 97 <= (*p) && (*p) <= 118 )
			goto tr4003;
	} else
		goto tr4003;
	goto tr3988;
tr4003:
	{
		*(rdata_tail++) += seventh_left_base32hex_to_num[(uint8_t)(*p)];

		if (rdata_tail <= rdata_stop) {
			*rdata_tail = seventh_right_base32hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1350;
st1350:
	if ( ++p == pe )
		goto _test_eof1350;
case 1350:
	if ( (*p) == 61 )
		goto st1351;
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr4004;
	} else if ( (*p) > 86 ) {
		if ( 97 <= (*p) && (*p) <= 118 )
			goto tr4004;
	} else
		goto tr4004;
	goto tr3988;
tr4004:
	{
		*(rdata_tail++) += eighth_base32hex_to_num[(uint8_t)(*p)];
	}
	goto st1351;
st1351:
	if ( ++p == pe )
		goto _test_eof1351;
case 1351:
	switch( (*p) ) {
		case 32: goto tr4006;
		case 59: goto tr4006;
	}
	if ( (*p) < 48 ) {
		if ( (*p) > 10 ) {
			if ( 40 <= (*p) && (*p) <= 41 )
				goto tr4006;
		} else if ( (*p) >= 9 )
			goto tr4006;
	} else if ( (*p) > 57 ) {
		if ( (*p) > 86 ) {
			if ( 97 <= (*p) && (*p) <= 118 )
				goto tr4007;
		} else if ( (*p) >= 65 )
			goto tr4007;
	} else
		goto tr4007;
	goto tr3988;
tr4006:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{ p--; {stack[top++] = 1352;goto st388;} }
	goto st1352;
st1352:
	if ( ++p == pe )
		goto _test_eof1352;
case 1352:
	switch( (*p) ) {
		case 32: goto tr4008;
		case 59: goto tr4008;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr4008;
	} else if ( (*p) >= 9 )
		goto tr4008;
	goto tr77;
tr4008:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1723;
st1723:
	if ( ++p == pe )
		goto _test_eof1723;
case 1723:
	goto st0;
st1353:
	if ( ++p == pe )
		goto _test_eof1353;
case 1353:
	if ( (*p) == 61 )
		goto st1354;
	goto tr3988;
st1354:
	if ( ++p == pe )
		goto _test_eof1354;
case 1354:
	if ( (*p) == 61 )
		goto st1351;
	goto tr3988;
st1355:
	if ( ++p == pe )
		goto _test_eof1355;
case 1355:
	if ( (*p) == 61 )
		goto st1353;
	goto tr3988;
st1356:
	if ( ++p == pe )
		goto _test_eof1356;
case 1356:
	if ( (*p) == 61 )
		goto st1357;
	goto tr3988;
st1357:
	if ( ++p == pe )
		goto _test_eof1357;
case 1357:
	if ( (*p) == 61 )
		goto st1355;
	goto tr3988;
tr3994:
	{
		s->buffer_length = 0;
	}
	goto st1358;
tr4011:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1358;
tr3987:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1358;
st1358:
	if ( ++p == pe )
		goto _test_eof1358;
case 1358:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr4012;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr4011;
	goto tr77;
tr4014:
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1359;
tr3980:
	{
		if (rdata_tail <= rdata_stop) {
			s->item_length_location = rdata_tail++;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1359;
st1359:
	if ( ++p == pe )
		goto _test_eof1359;
case 1359:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr4013;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr4013;
	} else
		goto tr4013;
	goto tr3100;
tr4013:
	{
		*rdata_tail += second_hex_to_num[(uint8_t)(*p)];
		rdata_tail++;
	}
	goto st1360;
st1360:
	if ( ++p == pe )
		goto _test_eof1360;
case 1360:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr3983;
		case 32: goto tr3983;
		case 40: goto tr3984;
		case 41: goto tr3985;
		case 2058: goto tr3986;
		case 2107: goto tr3987;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr4014;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr4014;
	} else
		goto tr4014;
	goto tr3100;
tr3982:
	{
		s->buffer_length = 0;
	}
	goto st1361;
tr4015:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1361;
tr3975:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1361;
st1361:
	if ( ++p == pe )
		goto _test_eof1361;
case 1361:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr4016;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr4015;
	goto tr77;
tr3969:
	{
		s->buffer_length = 0;
	}
	goto st1362;
tr4017:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1362;
tr3963:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1362;
st1362:
	if ( ++p == pe )
		goto _test_eof1362;
case 1362:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr4018;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr4017;
	goto tr77;
tr3957:
	{
		s->buffer_length = 0;
	}
	goto st1363;
tr4019:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1363;
tr3951:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1363;
st1363:
	if ( ++p == pe )
		goto _test_eof1363;
case 1363:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr4020;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr4019;
	goto tr77;
st1364:
	if ( ++p == pe )
		goto _test_eof1364;
case 1364:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr4021;
	goto tr2429;
tr4021:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1365;
tr4025:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1365;
st1365:
	if ( ++p == pe )
		goto _test_eof1365;
case 1365:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4022;
		case 32: goto tr4022;
		case 40: goto tr4023;
		case 41: goto tr4024;
		case 2058: goto tr4026;
		case 2107: goto tr4027;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4025;
	goto tr2429;
tr4029:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1366;
tr4030:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1366;
tr4032:
	{
		s->line_counter++;
	}
	goto st1366;
tr4067:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1366; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1366;
tr4022:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1366;
tr4023:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1366;
tr4024:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1366;
tr4026:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1366;
st1366:
	if ( ++p == pe )
		goto _test_eof1366;
case 1366:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1366;
		case 32: goto st1366;
		case 40: goto tr4029;
		case 41: goto tr4030;
		case 2058: goto tr4032;
		case 2107: goto tr4033;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4031;
	goto tr2429;
tr4031:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1367;
tr4037:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1367;
st1367:
	if ( ++p == pe )
		goto _test_eof1367;
case 1367:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4034;
		case 32: goto tr4034;
		case 40: goto tr4035;
		case 41: goto tr4036;
		case 2058: goto tr4038;
		case 2107: goto tr4039;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4037;
	goto tr2429;
tr4041:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1368;
tr4042:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1368;
tr4044:
	{
		s->line_counter++;
	}
	goto st1368;
tr4065:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1368; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1368;
tr4034:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1368;
tr4035:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1368;
tr4036:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1368;
tr4038:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1368;
st1368:
	if ( ++p == pe )
		goto _test_eof1368;
case 1368:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1368;
		case 32: goto st1368;
		case 40: goto tr4041;
		case 41: goto tr4042;
		case 2058: goto tr4044;
		case 2107: goto tr4045;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4043;
	goto tr2429;
tr4043:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1369;
tr4049:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1369;
st1369:
	if ( ++p == pe )
		goto _test_eof1369;
case 1369:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4046;
		case 32: goto tr4046;
		case 40: goto tr4047;
		case 41: goto tr4048;
		case 2058: goto tr4050;
		case 2107: goto tr4051;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4049;
	goto tr2429;
tr4053:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1370;
tr4054:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1370;
tr4057:
	{
		s->line_counter++;
	}
	goto st1370;
tr4063:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1370; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1370;
tr4046:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1370;
tr4047:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1370;
tr4048:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1370;
tr4050:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1370;
st1370:
	if ( ++p == pe )
		goto _test_eof1370;
case 1370:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1370;
		case 32: goto st1370;
		case 40: goto tr4053;
		case 41: goto tr4054;
		case 45: goto tr4055;
		case 2058: goto tr4057;
		case 2107: goto tr4058;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr4056;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr4056;
	} else
		goto tr4056;
	goto tr3100;
tr4055:
	{
		if (rdata_tail <= rdata_stop) {
			s->item_length_location = rdata_tail++;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1371;
st1371:
	if ( ++p == pe )
		goto _test_eof1371;
case 1371:
	switch( (*p) ) {
		case 32: goto tr4059;
		case 59: goto tr4059;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr4059;
	} else if ( (*p) >= 9 )
		goto tr4059;
	goto tr3100;
tr4059:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1724;
st1724:
	if ( ++p == pe )
		goto _test_eof1724;
case 1724:
	goto st0;
tr4061:
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1372;
tr4056:
	{
		if (rdata_tail <= rdata_stop) {
			s->item_length_location = rdata_tail++;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1372;
st1372:
	if ( ++p == pe )
		goto _test_eof1372;
case 1372:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr4060;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr4060;
	} else
		goto tr4060;
	goto tr3100;
tr4060:
	{
		*rdata_tail += second_hex_to_num[(uint8_t)(*p)];
		rdata_tail++;
	}
	goto st1373;
st1373:
	if ( ++p == pe )
		goto _test_eof1373;
case 1373:
	switch( (*p) ) {
		case 32: goto tr4059;
		case 59: goto tr4059;
	}
	if ( (*p) < 48 ) {
		if ( (*p) > 10 ) {
			if ( 40 <= (*p) && (*p) <= 41 )
				goto tr4059;
		} else if ( (*p) >= 9 )
			goto tr4059;
	} else if ( (*p) > 57 ) {
		if ( (*p) > 70 ) {
			if ( 97 <= (*p) && (*p) <= 102 )
				goto tr4061;
		} else if ( (*p) >= 65 )
			goto tr4061;
	} else
		goto tr4061;
	goto tr3100;
tr4058:
	{
		s->buffer_length = 0;
	}
	goto st1374;
tr4062:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1374;
tr4051:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1374;
st1374:
	if ( ++p == pe )
		goto _test_eof1374;
case 1374:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr4063;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr4062;
	goto tr77;
tr4045:
	{
		s->buffer_length = 0;
	}
	goto st1375;
tr4064:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1375;
tr4039:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1375;
st1375:
	if ( ++p == pe )
		goto _test_eof1375;
case 1375:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr4065;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr4064;
	goto tr77;
tr4033:
	{
		s->buffer_length = 0;
	}
	goto st1376;
tr4066:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1376;
tr4027:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1376;
st1376:
	if ( ++p == pe )
		goto _test_eof1376;
case 1376:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr4067;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr4066;
	goto tr77;
st1377:
	if ( ++p == pe )
		goto _test_eof1377;
case 1377:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr4068;
	goto tr2429;
tr4068:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1378;
tr4072:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1378;
st1378:
	if ( ++p == pe )
		goto _test_eof1378;
case 1378:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4069;
		case 32: goto tr4069;
		case 40: goto tr4070;
		case 41: goto tr4071;
		case 2058: goto tr4073;
		case 2107: goto tr4074;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4072;
	goto tr2429;
tr4076:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1379;
tr4077:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1379;
tr4079:
	{
		s->line_counter++;
	}
	goto st1379;
tr4121:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1379; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1379;
tr4069:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1379;
tr4070:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1379;
tr4071:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1379;
tr4073:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1379;
st1379:
	if ( ++p == pe )
		goto _test_eof1379;
case 1379:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1379;
		case 32: goto st1379;
		case 40: goto tr4076;
		case 41: goto tr4077;
		case 2058: goto tr4079;
		case 2107: goto tr4080;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4078;
	goto tr2429;
tr4078:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1380;
tr4084:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1380;
st1380:
	if ( ++p == pe )
		goto _test_eof1380;
case 1380:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4081;
		case 32: goto tr4081;
		case 40: goto tr4082;
		case 41: goto tr4083;
		case 2058: goto tr4085;
		case 2107: goto tr4086;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4084;
	goto tr2429;
tr4088:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1381;
tr4089:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1381;
tr4091:
	{
		s->line_counter++;
	}
	goto st1381;
tr4119:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1381; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1381;
tr4081:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1381;
tr4082:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1381;
tr4083:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1381;
tr4085:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1381;
st1381:
	if ( ++p == pe )
		goto _test_eof1381;
case 1381:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1381;
		case 32: goto st1381;
		case 40: goto tr4088;
		case 41: goto tr4089;
		case 2058: goto tr4091;
		case 2107: goto tr4092;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4090;
	goto tr2429;
tr4090:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1382;
tr4096:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1382;
st1382:
	if ( ++p == pe )
		goto _test_eof1382;
case 1382:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4093;
		case 32: goto tr4093;
		case 40: goto tr4094;
		case 41: goto tr4095;
		case 2058: goto tr4097;
		case 2107: goto tr4098;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4096;
	goto tr2429;
tr4100:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1383;
tr4101:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1383;
tr4103:
	{
		s->line_counter++;
	}
	goto st1383;
tr4117:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1383; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1383;
tr4093:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1383;
tr4094:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1383;
tr4095:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1383;
tr4097:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1383;
st1383:
	if ( ++p == pe )
		goto _test_eof1383;
case 1383:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1383;
		case 32: goto st1383;
		case 40: goto tr4100;
		case 41: goto tr4101;
		case 2058: goto tr4103;
		case 2107: goto tr4104;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr4102;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr4102;
	} else
		goto tr4102;
	goto tr3100;
tr4102:
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1384;
st1384:
	if ( ++p == pe )
		goto _test_eof1384;
case 1384:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr4105;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr4105;
	} else
		goto tr4105;
	goto tr3100;
tr4107:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1385;
tr4108:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1385;
tr4109:
	{
		s->line_counter++;
	}
	goto st1385;
tr4115:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1385; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1385;
tr4105:
	{
		*rdata_tail += second_hex_to_num[(uint8_t)(*p)];
		rdata_tail++;
	}
	goto st1385;
st1385:
	if ( ++p == pe )
		goto _test_eof1385;
case 1385:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st1385;
		case 32: goto st1385;
		case 40: goto tr4107;
		case 41: goto tr4108;
		case 3082: goto tr4109;
		case 3131: goto tr4110;
		case 3338: goto tr4111;
		case 3387: goto tr4111;
		case 3594: goto tr4112;
		case 3643: goto tr4113;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr4102;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr4102;
	} else
		goto tr4102;
	goto tr3100;
tr4110:
	{
		s->buffer_length = 0;
	}
	goto st1386;
tr4114:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1386;
st1386:
	if ( ++p == pe )
		goto _test_eof1386;
case 1386:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr4115;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr4114;
	goto tr3100;
tr4111:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1725;
st1725:
	if ( ++p == pe )
		goto _test_eof1725;
case 1725:
	goto st0;
tr4112:
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1726;
st1726:
	if ( ++p == pe )
		goto _test_eof1726;
case 1726:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st1385;
		case 32: goto st1385;
		case 40: goto tr4107;
		case 41: goto tr4108;
		case 3082: goto tr4109;
		case 3131: goto tr4110;
		case 3338: goto tr4111;
		case 3387: goto tr4111;
		case 3594: goto tr4112;
		case 3643: goto tr4113;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr4102;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr4102;
	} else
		goto tr4102;
	goto tr3100;
tr4113:
	{
		s->buffer_length = 0;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1727;
st1727:
	if ( ++p == pe )
		goto _test_eof1727;
case 1727:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr4115;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr4114;
	goto tr3100;
tr4104:
	{
		s->buffer_length = 0;
	}
	goto st1387;
tr4116:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1387;
tr4098:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1387;
st1387:
	if ( ++p == pe )
		goto _test_eof1387;
case 1387:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr4117;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr4116;
	goto tr77;
tr4092:
	{
		s->buffer_length = 0;
	}
	goto st1388;
tr4118:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1388;
tr4086:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1388;
st1388:
	if ( ++p == pe )
		goto _test_eof1388;
case 1388:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr4119;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr4118;
	goto tr77;
tr4080:
	{
		s->buffer_length = 0;
	}
	goto st1389;
tr4120:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1389;
tr4074:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1389;
st1389:
	if ( ++p == pe )
		goto _test_eof1389;
case 1389:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr4121;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr4120;
	goto tr77;
st1390:
	if ( ++p == pe )
		goto _test_eof1390;
case 1390:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr4122;
	goto tr2429;
tr4122:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1391;
tr4126:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1391;
st1391:
	if ( ++p == pe )
		goto _test_eof1391;
case 1391:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4123;
		case 32: goto tr4123;
		case 40: goto tr4124;
		case 41: goto tr4125;
		case 2058: goto tr4127;
		case 2107: goto tr4128;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4126;
	goto tr2429;
tr4130:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1392;
tr4131:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1392;
tr4133:
	{
		s->line_counter++;
	}
	goto st1392;
tr4139:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1392; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1392;
tr4123:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1392;
tr4124:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1392;
tr4125:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1392;
tr4127:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1392;
st1392:
	if ( ++p == pe )
		goto _test_eof1392;
case 1392:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1392;
		case 32: goto st1392;
		case 40: goto tr4130;
		case 41: goto tr4131;
		case 2058: goto tr4133;
		case 2107: goto tr4134;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4132;
	goto tr2429;
tr4132:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1393;
tr4136:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1393;
st1393:
	if ( ++p == pe )
		goto _test_eof1393;
case 1393:
	switch( (*p) ) {
		case 32: goto tr4135;
		case 59: goto tr4135;
	}
	if ( (*p) < 40 ) {
		if ( 9 <= (*p) && (*p) <= 10 )
			goto tr4135;
	} else if ( (*p) > 41 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr4136;
	} else
		goto tr4135;
	goto tr2429;
tr4135:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{ p--; {stack[top++] = 1394;goto st388;} }
	goto st1394;
st1394:
	if ( ++p == pe )
		goto _test_eof1394;
case 1394:
	switch( (*p) ) {
		case 32: goto tr4137;
		case 59: goto tr4137;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr4137;
	} else if ( (*p) >= 9 )
		goto tr4137;
	goto tr77;
tr4137:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1728;
st1728:
	if ( ++p == pe )
		goto _test_eof1728;
case 1728:
	goto st0;
tr4134:
	{
		s->buffer_length = 0;
	}
	goto st1395;
tr4138:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1395;
tr4128:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1395;
st1395:
	if ( ++p == pe )
		goto _test_eof1395;
case 1395:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr4139;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr4138;
	goto tr77;
st1396:
	if ( ++p == pe )
		goto _test_eof1396;
case 1396:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr4140;
	goto tr2429;
tr4140:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1397;
tr4144:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1397;
st1397:
	if ( ++p == pe )
		goto _test_eof1397;
case 1397:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4141;
		case 32: goto tr4141;
		case 40: goto tr4142;
		case 41: goto tr4143;
		case 2058: goto tr4145;
		case 2107: goto tr4146;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4144;
	goto tr2429;
tr4148:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1398;
tr4149:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1398;
tr4151:
	{
		s->line_counter++;
	}
	goto st1398;
tr4193:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1398; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1398;
tr4141:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1398;
tr4142:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1398;
tr4143:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1398;
tr4145:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1398;
st1398:
	if ( ++p == pe )
		goto _test_eof1398;
case 1398:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1398;
		case 32: goto st1398;
		case 40: goto tr4148;
		case 41: goto tr4149;
		case 2058: goto tr4151;
		case 2107: goto tr4152;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4150;
	goto tr2429;
tr4150:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1399;
tr4156:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1399;
st1399:
	if ( ++p == pe )
		goto _test_eof1399;
case 1399:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4153;
		case 32: goto tr4153;
		case 40: goto tr4154;
		case 41: goto tr4155;
		case 2058: goto tr4157;
		case 2107: goto tr4158;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4156;
	goto tr2429;
tr4160:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1400;
tr4161:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1400;
tr4163:
	{
		s->line_counter++;
	}
	goto st1400;
tr4191:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1400; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1400;
tr4153:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1400;
tr4154:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1400;
tr4155:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1400;
tr4157:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1400;
st1400:
	if ( ++p == pe )
		goto _test_eof1400;
case 1400:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1400;
		case 32: goto st1400;
		case 40: goto tr4160;
		case 41: goto tr4161;
		case 2058: goto tr4163;
		case 2107: goto tr4164;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4162;
	goto tr2429;
tr4162:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1401;
tr4168:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1401;
st1401:
	if ( ++p == pe )
		goto _test_eof1401;
case 1401:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4165;
		case 32: goto tr4165;
		case 40: goto tr4166;
		case 41: goto tr4167;
		case 2058: goto tr4169;
		case 2107: goto tr4170;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4168;
	goto tr2429;
tr4172:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1402;
tr4173:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1402;
tr4175:
	{
		s->line_counter++;
	}
	goto st1402;
tr4189:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1402; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1402;
tr4165:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1402;
tr4166:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1402;
tr4167:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1402;
tr4169:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1402;
st1402:
	if ( ++p == pe )
		goto _test_eof1402;
case 1402:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1402;
		case 32: goto st1402;
		case 40: goto tr4172;
		case 41: goto tr4173;
		case 2058: goto tr4175;
		case 2107: goto tr4176;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr4174;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr4174;
	} else
		goto tr4174;
	goto tr3100;
tr4174:
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1403;
st1403:
	if ( ++p == pe )
		goto _test_eof1403;
case 1403:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr4177;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr4177;
	} else
		goto tr4177;
	goto tr3100;
tr4179:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1404;
tr4180:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1404;
tr4181:
	{
		s->line_counter++;
	}
	goto st1404;
tr4187:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1404; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1404;
tr4177:
	{
		*rdata_tail += second_hex_to_num[(uint8_t)(*p)];
		rdata_tail++;
	}
	goto st1404;
st1404:
	if ( ++p == pe )
		goto _test_eof1404;
case 1404:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st1404;
		case 32: goto st1404;
		case 40: goto tr4179;
		case 41: goto tr4180;
		case 3082: goto tr4181;
		case 3131: goto tr4182;
		case 3338: goto tr4183;
		case 3387: goto tr4183;
		case 3594: goto tr4184;
		case 3643: goto tr4185;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr4174;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr4174;
	} else
		goto tr4174;
	goto tr3100;
tr4182:
	{
		s->buffer_length = 0;
	}
	goto st1405;
tr4186:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1405;
st1405:
	if ( ++p == pe )
		goto _test_eof1405;
case 1405:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr4187;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr4186;
	goto tr3100;
tr4183:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1729;
st1729:
	if ( ++p == pe )
		goto _test_eof1729;
case 1729:
	goto st0;
tr4184:
	{
		s->line_counter++;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1730;
st1730:
	if ( ++p == pe )
		goto _test_eof1730;
case 1730:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(2688 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
			if (
 !s->multiline  ) _widec += 512;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(2688 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
		if (
 !s->multiline  ) _widec += 512;
	}
	switch( _widec ) {
		case 9: goto st1404;
		case 32: goto st1404;
		case 40: goto tr4179;
		case 41: goto tr4180;
		case 3082: goto tr4181;
		case 3131: goto tr4182;
		case 3338: goto tr4183;
		case 3387: goto tr4183;
		case 3594: goto tr4184;
		case 3643: goto tr4185;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr4174;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr4174;
	} else
		goto tr4174;
	goto tr3100;
tr4185:
	{
		s->buffer_length = 0;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1731;
st1731:
	if ( ++p == pe )
		goto _test_eof1731;
case 1731:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr4187;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr4186;
	goto tr3100;
tr4176:
	{
		s->buffer_length = 0;
	}
	goto st1406;
tr4188:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1406;
tr4170:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1406;
st1406:
	if ( ++p == pe )
		goto _test_eof1406;
case 1406:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr4189;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr4188;
	goto tr77;
tr4164:
	{
		s->buffer_length = 0;
	}
	goto st1407;
tr4190:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1407;
tr4158:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1407;
st1407:
	if ( ++p == pe )
		goto _test_eof1407;
case 1407:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr4191;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr4190;
	goto tr77;
tr4152:
	{
		s->buffer_length = 0;
	}
	goto st1408;
tr4192:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1408;
tr4146:
	{
		if (s->number64 <= UINT32_MAX) {
			uint32_t num32 = htonl((uint32_t)s->number64);
			memcpy(rdata_tail, &num32, 4);
			rdata_tail += 4;
		} else {
			WARN(ZS_NUMBER32_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1408;
st1408:
	if ( ++p == pe )
		goto _test_eof1408;
case 1408:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr4193;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr4192;
	goto tr77;
st1409:
	if ( ++p == pe )
		goto _test_eof1409;
case 1409:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr4194;
	goto tr2429;
tr4194:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1410;
tr4198:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1410;
st1410:
	if ( ++p == pe )
		goto _test_eof1410;
case 1410:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4195;
		case 32: goto tr4195;
		case 40: goto tr4196;
		case 41: goto tr4197;
		case 2058: goto tr4199;
		case 2107: goto tr4200;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4198;
	goto tr2429;
tr4202:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1411;
tr4203:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1411;
tr4205:
	{
		s->line_counter++;
	}
	goto st1411;
tr4210:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1411; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1411;
tr4195:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1411;
tr4196:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1411;
tr4197:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1411;
tr4199:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1411;
st1411:
	if ( ++p == pe )
		goto _test_eof1411;
case 1411:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1411;
		case 32: goto st1411;
		case 40: goto tr4202;
		case 41: goto tr4203;
		case 46: goto tr4204;
		case 2058: goto tr4205;
		case 2107: goto tr4206;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4204;
	goto tr2406;
tr4208:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1412;
tr4204:
	{
		s->buffer_length = 0;
	}
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1412;
st1412:
	if ( ++p == pe )
		goto _test_eof1412;
case 1412:
	switch( (*p) ) {
		case 32: goto tr4207;
		case 46: goto tr4208;
		case 59: goto tr4207;
	}
	if ( (*p) < 40 ) {
		if ( 9 <= (*p) && (*p) <= 10 )
			goto tr4207;
	} else if ( (*p) > 41 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr4208;
	} else
		goto tr4207;
	goto tr2406;
tr4207:
	{
		s->buffer[s->buffer_length] = 0;

		if (inet_pton(AF_INET, (char *)s->buffer, s->addr) <= 0) {
			WARN(ZS_BAD_IPV4);
			p--; {goto st319;}
		}
	}
	{
		if (rdata_tail + ZS_INET4_ADDR_LENGTH > rdata_stop + 1) {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
		memcpy(rdata_tail, s->addr, ZS_INET4_ADDR_LENGTH);
		rdata_tail += ZS_INET4_ADDR_LENGTH;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1732;
st1732:
	if ( ++p == pe )
		goto _test_eof1732;
case 1732:
	goto st0;
tr4206:
	{
		s->buffer_length = 0;
	}
	goto st1413;
tr4209:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1413;
tr4200:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1413;
st1413:
	if ( ++p == pe )
		goto _test_eof1413;
case 1413:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr4210;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr4209;
	goto tr77;
st1414:
	if ( ++p == pe )
		goto _test_eof1414;
case 1414:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr4211;
	goto tr2429;
tr4211:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1415;
tr4215:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1415;
st1415:
	if ( ++p == pe )
		goto _test_eof1415;
case 1415:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4212;
		case 32: goto tr4212;
		case 40: goto tr4213;
		case 41: goto tr4214;
		case 2058: goto tr4216;
		case 2107: goto tr4217;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4215;
	goto tr2429;
tr4219:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1416;
tr4220:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1416;
tr4222:
	{
		s->line_counter++;
	}
	goto st1416;
tr4236:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1416; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1416;
tr4212:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1416;
tr4213:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1416;
tr4214:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1416;
tr4216:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1416;
st1416:
	if ( ++p == pe )
		goto _test_eof1416;
case 1416:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1416;
		case 32: goto st1416;
		case 40: goto tr4219;
		case 41: goto tr4220;
		case 2058: goto tr4222;
		case 2107: goto tr4223;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr4221;
	} else if ( _widec > 70 ) {
		if ( 97 <= _widec && _widec <= 102 )
			goto tr4221;
	} else
		goto tr4221;
	goto tr3100;
tr4221:
	{
		s->item_length = 0;
	}
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1417;
st1417:
	if ( ++p == pe )
		goto _test_eof1417;
case 1417:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr4224;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr4224;
	} else
		goto tr4224;
	goto tr3100;
tr4224:
	{
		*rdata_tail += second_hex_to_num[(uint8_t)(*p)];
		rdata_tail++;
	}
	goto st1418;
st1418:
	if ( ++p == pe )
		goto _test_eof1418;
case 1418:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr4225;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr4225;
	} else
		goto tr4225;
	goto tr3100;
tr4225:
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1419;
st1419:
	if ( ++p == pe )
		goto _test_eof1419;
case 1419:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr4226;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr4226;
	} else
		goto tr4226;
	goto tr3100;
tr4226:
	{
		*rdata_tail += second_hex_to_num[(uint8_t)(*p)];
		rdata_tail++;
	}
	goto st1420;
st1420:
	if ( ++p == pe )
		goto _test_eof1420;
case 1420:
	if ( (*p) == 58 )
		goto tr4228;
	goto tr4227;
tr4228:
	{
		s->item_length++;
	}
	goto st1421;
st1421:
	if ( ++p == pe )
		goto _test_eof1421;
case 1421:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr4229;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr4229;
	} else
		goto tr4229;
	goto tr3100;
tr4229:
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1422;
st1422:
	if ( ++p == pe )
		goto _test_eof1422;
case 1422:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr4230;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr4230;
	} else
		goto tr4230;
	goto tr3100;
tr4230:
	{
		*rdata_tail += second_hex_to_num[(uint8_t)(*p)];
		rdata_tail++;
	}
	goto st1423;
st1423:
	if ( ++p == pe )
		goto _test_eof1423;
case 1423:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr4231;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr4231;
	} else
		goto tr4231;
	goto tr3100;
tr4231:
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1424;
st1424:
	if ( ++p == pe )
		goto _test_eof1424;
case 1424:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr4232;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr4232;
	} else
		goto tr4232;
	goto tr3100;
tr4232:
	{
		*rdata_tail += second_hex_to_num[(uint8_t)(*p)];
		rdata_tail++;
	}
	goto st1425;
st1425:
	if ( ++p == pe )
		goto _test_eof1425;
case 1425:
	switch( (*p) ) {
		case 32: goto tr4234;
		case 58: goto tr4228;
		case 59: goto tr4234;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr4234;
	} else if ( (*p) >= 9 )
		goto tr4234;
	goto tr4233;
tr4234:
	{
		s->item_length++;
	}
	{
		if (s->item_length != 4) {
			WARN(ZS_BAD_L64_LENGTH);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1733;
st1733:
	if ( ++p == pe )
		goto _test_eof1733;
case 1733:
	goto st0;
tr4223:
	{
		s->buffer_length = 0;
	}
	goto st1426;
tr4235:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1426;
tr4217:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1426;
st1426:
	if ( ++p == pe )
		goto _test_eof1426;
case 1426:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr4236;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr4235;
	goto tr77;
st1427:
	if ( ++p == pe )
		goto _test_eof1427;
case 1427:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr4237;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr4237;
	} else
		goto tr4237;
	goto tr3100;
tr4237:
	{
		s->item_length = 0;
	}
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1428;
st1428:
	if ( ++p == pe )
		goto _test_eof1428;
case 1428:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr4238;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr4238;
	} else
		goto tr4238;
	goto tr3100;
tr4238:
	{
		*rdata_tail += second_hex_to_num[(uint8_t)(*p)];
		rdata_tail++;
	}
	goto st1429;
st1429:
	if ( ++p == pe )
		goto _test_eof1429;
case 1429:
	if ( (*p) == 45 )
		goto tr4240;
	goto tr4239;
tr4240:
	{
		s->item_length++;
	}
	goto st1430;
st1430:
	if ( ++p == pe )
		goto _test_eof1430;
case 1430:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr4241;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr4241;
	} else
		goto tr4241;
	goto tr3100;
tr4241:
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1431;
st1431:
	if ( ++p == pe )
		goto _test_eof1431;
case 1431:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr4242;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr4242;
	} else
		goto tr4242;
	goto tr3100;
tr4242:
	{
		*rdata_tail += second_hex_to_num[(uint8_t)(*p)];
		rdata_tail++;
	}
	goto st1432;
st1432:
	if ( ++p == pe )
		goto _test_eof1432;
case 1432:
	switch( (*p) ) {
		case 32: goto tr4243;
		case 45: goto tr4240;
		case 59: goto tr4243;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr4243;
	} else if ( (*p) >= 9 )
		goto tr4243;
	goto tr4239;
tr4243:
	{
		s->item_length++;
	}
	{
		if (s->item_length != 6) {
			WARN(ZS_BAD_EUI_LENGTH);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1734;
st1734:
	if ( ++p == pe )
		goto _test_eof1734;
case 1734:
	goto st0;
st1433:
	if ( ++p == pe )
		goto _test_eof1433;
case 1433:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr4244;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr4244;
	} else
		goto tr4244;
	goto tr3100;
tr4244:
	{
		s->item_length = 0;
	}
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1434;
st1434:
	if ( ++p == pe )
		goto _test_eof1434;
case 1434:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr4245;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr4245;
	} else
		goto tr4245;
	goto tr3100;
tr4245:
	{
		*rdata_tail += second_hex_to_num[(uint8_t)(*p)];
		rdata_tail++;
	}
	goto st1435;
st1435:
	if ( ++p == pe )
		goto _test_eof1435;
case 1435:
	if ( (*p) == 45 )
		goto tr4246;
	goto tr4239;
tr4246:
	{
		s->item_length++;
	}
	goto st1436;
st1436:
	if ( ++p == pe )
		goto _test_eof1436;
case 1436:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr4247;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr4247;
	} else
		goto tr4247;
	goto tr3100;
tr4247:
	{
		if (rdata_tail <= rdata_stop) {
			*rdata_tail = first_hex_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1437;
st1437:
	if ( ++p == pe )
		goto _test_eof1437;
case 1437:
	if ( (*p) < 65 ) {
		if ( 48 <= (*p) && (*p) <= 57 )
			goto tr4248;
	} else if ( (*p) > 70 ) {
		if ( 97 <= (*p) && (*p) <= 102 )
			goto tr4248;
	} else
		goto tr4248;
	goto tr3100;
tr4248:
	{
		*rdata_tail += second_hex_to_num[(uint8_t)(*p)];
		rdata_tail++;
	}
	goto st1438;
st1438:
	if ( ++p == pe )
		goto _test_eof1438;
case 1438:
	switch( (*p) ) {
		case 32: goto tr4249;
		case 45: goto tr4246;
		case 59: goto tr4249;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr4249;
	} else if ( (*p) >= 9 )
		goto tr4249;
	goto tr4239;
tr4249:
	{
		s->item_length++;
	}
	{
		if (s->item_length != 8) {
			WARN(ZS_BAD_EUI_LENGTH);
			p--; {goto st319;}
		}
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1735;
st1735:
	if ( ++p == pe )
		goto _test_eof1735;
case 1735:
	goto st0;
st1439:
	if ( ++p == pe )
		goto _test_eof1439;
case 1439:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr4250;
	goto tr2429;
tr4250:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1440;
tr4254:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1440;
st1440:
	if ( ++p == pe )
		goto _test_eof1440;
case 1440:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4251;
		case 32: goto tr4251;
		case 40: goto tr4252;
		case 41: goto tr4253;
		case 2058: goto tr4255;
		case 2107: goto tr4256;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4254;
	goto tr2429;
tr4258:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1441;
tr4259:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1441;
tr4261:
	{
		s->line_counter++;
	}
	goto st1441;
tr4279:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1441; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1441;
tr4251:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1441;
tr4252:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1441;
tr4253:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1441;
tr4255:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1441;
st1441:
	if ( ++p == pe )
		goto _test_eof1441;
case 1441:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1441;
		case 32: goto st1441;
		case 40: goto tr4258;
		case 41: goto tr4259;
		case 2058: goto tr4261;
		case 2107: goto tr4262;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4260;
	goto tr2429;
tr4260:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1442;
tr4266:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1442;
st1442:
	if ( ++p == pe )
		goto _test_eof1442;
case 1442:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4263;
		case 32: goto tr4263;
		case 40: goto tr4264;
		case 41: goto tr4265;
		case 2058: goto tr4267;
		case 2107: goto tr4268;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4266;
	goto tr2429;
tr4271:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1443;
tr4272:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1443;
tr4273:
	{
		s->line_counter++;
	}
	goto st1443;
tr4277:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1443; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1443;
tr4263:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1443;
tr4264:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1443;
tr4265:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1443;
tr4267:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1443;
st1443:
	if ( ++p == pe )
		goto _test_eof1443;
case 1443:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1443;
		case 32: goto st1443;
		case 40: goto tr4271;
		case 41: goto tr4272;
		case 2058: goto tr4273;
		case 2107: goto tr4274;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr4269;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr4269;
	} else
		goto tr4269;
	goto tr77;
tr4269:
	{ p--; {stack[top++] = 1444;goto st330;} }
	goto st1444;
st1444:
	if ( ++p == pe )
		goto _test_eof1444;
case 1444:
	switch( (*p) ) {
		case 32: goto tr4275;
		case 59: goto tr4275;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr4275;
	} else if ( (*p) >= 9 )
		goto tr4275;
	goto tr77;
tr4275:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1736;
st1736:
	if ( ++p == pe )
		goto _test_eof1736;
case 1736:
	goto st0;
tr4274:
	{
		s->buffer_length = 0;
	}
	goto st1445;
tr4276:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1445;
tr4268:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1445;
st1445:
	if ( ++p == pe )
		goto _test_eof1445;
case 1445:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr4277;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr4276;
	goto tr77;
tr4262:
	{
		s->buffer_length = 0;
	}
	goto st1446;
tr4278:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1446;
tr4256:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1446;
st1446:
	if ( ++p == pe )
		goto _test_eof1446;
case 1446:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr4279;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr4278;
	goto tr77;
st1447:
	if ( ++p == pe )
		goto _test_eof1447;
case 1447:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr4280;
	goto tr2429;
tr4280:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1448;
tr4284:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1448;
st1448:
	if ( ++p == pe )
		goto _test_eof1448;
case 1448:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4281;
		case 32: goto tr4281;
		case 40: goto tr4282;
		case 41: goto tr4283;
		case 2058: goto tr4285;
		case 2107: goto tr4286;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4284;
	goto tr2429;
tr4289:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1449;
tr4290:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1449;
tr4291:
	{
		s->line_counter++;
	}
	goto st1449;
tr4308:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1449; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1449;
tr4281:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1449;
tr4282:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1449;
tr4283:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1449;
tr4285:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1449;
st1449:
	if ( ++p == pe )
		goto _test_eof1449;
case 1449:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1449;
		case 32: goto st1449;
		case 40: goto tr4289;
		case 41: goto tr4290;
		case 2058: goto tr4291;
		case 2107: goto tr4292;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr4287;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr4287;
	} else
		goto tr4287;
	goto tr77;
tr4287:
	{
		if (rdata_tail <= rdata_stop) {
			s->item_length_location = rdata_tail++;
		} else {
			WARN(ZS_RDATA_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{ p--; {stack[top++] = 1450;goto st330;} }
	goto st1450;
st1450:
	if ( ++p == pe )
		goto _test_eof1450;
case 1450:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4293;
		case 32: goto tr4293;
		case 40: goto tr4294;
		case 41: goto tr4295;
		case 2058: goto tr4296;
		case 2107: goto tr4297;
	}
	goto tr77;
tr4300:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1451;
tr4301:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1451;
tr4302:
	{
		s->line_counter++;
	}
	goto st1451;
tr4306:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1451; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1451;
tr4293:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1451;
tr4294:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1451;
tr4295:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1451;
tr4296:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1451;
st1451:
	if ( ++p == pe )
		goto _test_eof1451;
case 1451:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1451;
		case 32: goto st1451;
		case 40: goto tr4300;
		case 41: goto tr4301;
		case 2058: goto tr4302;
		case 2107: goto tr4303;
	}
	if ( _widec < 11 ) {
		if ( _widec <= 8 )
			goto tr4298;
	} else if ( _widec > 58 ) {
		if ( 60 <= _widec )
			goto tr4298;
	} else
		goto tr4298;
	goto tr77;
tr4298:
	{ p--; {stack[top++] = 1452;goto st330;} }
	goto st1452;
st1452:
	if ( ++p == pe )
		goto _test_eof1452;
case 1452:
	switch( (*p) ) {
		case 32: goto tr4304;
		case 59: goto tr4304;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr4304;
	} else if ( (*p) >= 9 )
		goto tr4304;
	goto tr77;
tr4304:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1737;
st1737:
	if ( ++p == pe )
		goto _test_eof1737;
case 1737:
	goto st0;
tr4303:
	{
		s->buffer_length = 0;
	}
	goto st1453;
tr4305:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1453;
tr4297:
	{
		s->item_length = rdata_tail - s->item_length_location - 1;
		if (s->comma_list && s->item_length == 0) {
			WARN(ZS_EMPTY_LIST_ITEM);
			p--; {goto st319;}
		}
		if (s->item_length <= MAX_ITEM_LENGTH) {
			*(s->item_length_location) = (uint8_t)(s->item_length);
		} else {
			WARN(ZS_ITEM_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1453;
st1453:
	if ( ++p == pe )
		goto _test_eof1453;
case 1453:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr4306;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr4305;
	goto tr77;
tr4292:
	{
		s->buffer_length = 0;
	}
	goto st1454;
tr4307:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1454;
tr4286:
	{
		if (s->number64 <= UINT8_MAX) {
			*rdata_tail = (uint8_t)(s->number64);
			rdata_tail += 1;
		} else {
			WARN(ZS_NUMBER8_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1454;
st1454:
	if ( ++p == pe )
		goto _test_eof1454;
case 1454:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr4308;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr4307;
	goto tr77;
st1455:
	if ( ++p == pe )
		goto _test_eof1455;
case 1455:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr4309;
	goto tr2429;
tr4309:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1456;
tr4313:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1456;
st1456:
	if ( ++p == pe )
		goto _test_eof1456;
case 1456:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4310;
		case 32: goto tr4310;
		case 40: goto tr4311;
		case 41: goto tr4312;
		case 2058: goto tr4314;
		case 2107: goto tr4315;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4313;
	goto tr2429;
tr4317:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1457;
tr4318:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1457;
tr4320:
	{
		s->line_counter++;
	}
	goto st1457;
tr4325:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1457; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1457;
tr4310:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1457;
tr4311:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1457;
tr4312:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1457;
tr4314:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1457;
st1457:
	if ( ++p == pe )
		goto _test_eof1457;
case 1457:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1457;
		case 32: goto st1457;
		case 40: goto tr4317;
		case 41: goto tr4318;
		case 42: goto tr4319;
		case 92: goto tr4319;
		case 95: goto tr4319;
		case 2058: goto tr4320;
		case 2107: goto tr4321;
	}
	if ( _widec < 64 ) {
		if ( 45 <= _widec && _widec <= 57 )
			goto tr4319;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr4319;
	} else
		goto tr4319;
	goto tr77;
tr4319:
	{
		s->dname = rdata_tail;
	}
	{ p--; {stack[top++] = 1458;goto st321;} }
	goto st1458;
st1458:
	if ( ++p == pe )
		goto _test_eof1458;
case 1458:
	switch( (*p) ) {
		case 32: goto tr4322;
		case 59: goto tr4322;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr4322;
	} else if ( (*p) >= 9 )
		goto tr4322;
	goto tr77;
tr4322:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{ p--; {stack[top++] = 1459;goto st636;} }
	goto st1459;
st1459:
	if ( ++p == pe )
		goto _test_eof1459;
case 1459:
	switch( (*p) ) {
		case 32: goto tr4323;
		case 59: goto tr4323;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr4323;
	} else if ( (*p) >= 9 )
		goto tr4323;
	goto tr77;
tr4323:
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1738;
st1738:
	if ( ++p == pe )
		goto _test_eof1738;
case 1738:
	goto st0;
tr4321:
	{
		s->buffer_length = 0;
	}
	goto st1460;
tr4324:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1460;
tr4315:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1460;
st1460:
	if ( ++p == pe )
		goto _test_eof1460;
case 1460:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr4325;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr4324;
	goto tr77;
st1461:
	if ( ++p == pe )
		goto _test_eof1461;
case 1461:
	switch( (*p) ) {
		case 65: goto st1462;
		case 67: goto st1481;
		case 68: goto st1502;
		case 69: goto st1519;
		case 72: goto st1526;
		case 73: goto st1535;
		case 75: goto st1543;
		case 76: goto st1547;
		case 77: goto st1555;
		case 78: goto st1561;
		case 79: goto st1577;
		case 80: goto st1587;
		case 82: goto st1590;
		case 83: goto st1597;
		case 84: goto st1616;
		case 85: goto st1626;
		case 87: goto st1629;
		case 90: goto st1635;
		case 97: goto st1462;
		case 99: goto st1481;
		case 100: goto st1502;
		case 101: goto st1519;
		case 104: goto st1526;
		case 105: goto st1535;
		case 107: goto st1543;
		case 108: goto st1547;
		case 109: goto st1555;
		case 110: goto st1561;
		case 111: goto st1577;
		case 112: goto st1587;
		case 114: goto st1590;
		case 115: goto st1597;
		case 116: goto st1616;
		case 117: goto st1626;
		case 119: goto st1629;
		case 122: goto st1635;
	}
	goto tr3373;
st1462:
	if ( ++p == pe )
		goto _test_eof1462;
case 1462:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4344;
		case 32: goto tr4344;
		case 40: goto tr4345;
		case 41: goto tr4346;
		case 65: goto st1472;
		case 70: goto st1475;
		case 80: goto st1479;
		case 97: goto st1472;
		case 102: goto st1475;
		case 112: goto st1479;
		case 2058: goto tr4350;
		case 2107: goto tr4351;
	}
	goto tr3373;
tr4353:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4354:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4356:
	{
		s->line_counter++;
	}
	goto st1463;
tr4382:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1463; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1463;
tr4750:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1463;
tr4751:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4752:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4754:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1463;
tr4344:
	{ type_num(KNOT_RRTYPE_A, &rdata_tail); }
	goto st1463;
tr4345:
	{ type_num(KNOT_RRTYPE_A, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4346:
	{ type_num(KNOT_RRTYPE_A, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4350:
	{ type_num(KNOT_RRTYPE_A, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4385:
	{ type_num(KNOT_RRTYPE_AAAA, &rdata_tail); }
	goto st1463;
tr4386:
	{ type_num(KNOT_RRTYPE_AAAA, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4387:
	{ type_num(KNOT_RRTYPE_AAAA, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4388:
	{ type_num(KNOT_RRTYPE_AAAA, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4393:
	{ type_num(KNOT_RRTYPE_AFSDB, &rdata_tail); }
	goto st1463;
tr4394:
	{ type_num(KNOT_RRTYPE_AFSDB, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4395:
	{ type_num(KNOT_RRTYPE_AFSDB, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4396:
	{ type_num(KNOT_RRTYPE_AFSDB, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4399:
	{ type_num(KNOT_RRTYPE_APL, &rdata_tail); }
	goto st1463;
tr4400:
	{ type_num(KNOT_RRTYPE_APL, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4401:
	{ type_num(KNOT_RRTYPE_APL, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4402:
	{ type_num(KNOT_RRTYPE_APL, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4410:
	{ type_num(KNOT_RRTYPE_CAA, &rdata_tail); }
	goto st1463;
tr4411:
	{ type_num(KNOT_RRTYPE_CAA, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4412:
	{ type_num(KNOT_RRTYPE_CAA, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4413:
	{ type_num(KNOT_RRTYPE_CAA, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4421:
	{ type_num(KNOT_RRTYPE_CDNSKEY, &rdata_tail); }
	goto st1463;
tr4422:
	{ type_num(KNOT_RRTYPE_CDNSKEY, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4423:
	{ type_num(KNOT_RRTYPE_CDNSKEY, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4424:
	{ type_num(KNOT_RRTYPE_CDNSKEY, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4426:
	{ type_num(KNOT_RRTYPE_CDS, &rdata_tail); }
	goto st1463;
tr4427:
	{ type_num(KNOT_RRTYPE_CDS, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4428:
	{ type_num(KNOT_RRTYPE_CDS, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4429:
	{ type_num(KNOT_RRTYPE_CDS, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4433:
	{ type_num(KNOT_RRTYPE_CERT, &rdata_tail); }
	goto st1463;
tr4434:
	{ type_num(KNOT_RRTYPE_CERT, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4435:
	{ type_num(KNOT_RRTYPE_CERT, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4436:
	{ type_num(KNOT_RRTYPE_CERT, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4441:
	{ type_num(KNOT_RRTYPE_CNAME, &rdata_tail); }
	goto st1463;
tr4442:
	{ type_num(KNOT_RRTYPE_CNAME, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4443:
	{ type_num(KNOT_RRTYPE_CNAME, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4444:
	{ type_num(KNOT_RRTYPE_CNAME, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4449:
	{ type_num(KNOT_RRTYPE_CSYNC, &rdata_tail); }
	goto st1463;
tr4450:
	{ type_num(KNOT_RRTYPE_CSYNC, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4451:
	{ type_num(KNOT_RRTYPE_CSYNC, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4452:
	{ type_num(KNOT_RRTYPE_CSYNC, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4460:
	{ type_num(KNOT_RRTYPE_DHCID, &rdata_tail); }
	goto st1463;
tr4461:
	{ type_num(KNOT_RRTYPE_DHCID, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4462:
	{ type_num(KNOT_RRTYPE_DHCID, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4463:
	{ type_num(KNOT_RRTYPE_DHCID, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4469:
	{ type_num(KNOT_RRTYPE_DNAME, &rdata_tail); }
	goto st1463;
tr4470:
	{ type_num(KNOT_RRTYPE_DNAME, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4471:
	{ type_num(KNOT_RRTYPE_DNAME, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4472:
	{ type_num(KNOT_RRTYPE_DNAME, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4477:
	{ type_num(KNOT_RRTYPE_DNSKEY, &rdata_tail); }
	goto st1463;
tr4478:
	{ type_num(KNOT_RRTYPE_DNSKEY, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4479:
	{ type_num(KNOT_RRTYPE_DNSKEY, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4480:
	{ type_num(KNOT_RRTYPE_DNSKEY, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4482:
	{ type_num(KNOT_RRTYPE_DS, &rdata_tail); }
	goto st1463;
tr4483:
	{ type_num(KNOT_RRTYPE_DS, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4484:
	{ type_num(KNOT_RRTYPE_DS, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4486:
	{ type_num(KNOT_RRTYPE_DS, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4490:
	{ type_num(KNOT_RRTYPE_DSYNC, &rdata_tail); }
	goto st1463;
tr4491:
	{ type_num(KNOT_RRTYPE_DSYNC, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4492:
	{ type_num(KNOT_RRTYPE_DSYNC, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4493:
	{ type_num(KNOT_RRTYPE_DSYNC, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4500:
	{ type_num(KNOT_RRTYPE_EUI48, &rdata_tail); }
	goto st1463;
tr4501:
	{ type_num(KNOT_RRTYPE_EUI48, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4502:
	{ type_num(KNOT_RRTYPE_EUI48, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4503:
	{ type_num(KNOT_RRTYPE_EUI48, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4506:
	{ type_num(KNOT_RRTYPE_EUI64, &rdata_tail); }
	goto st1463;
tr4507:
	{ type_num(KNOT_RRTYPE_EUI64, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4508:
	{ type_num(KNOT_RRTYPE_EUI64, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4509:
	{ type_num(KNOT_RRTYPE_EUI64, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4516:
	{ type_num(KNOT_RRTYPE_HINFO, &rdata_tail); }
	goto st1463;
tr4517:
	{ type_num(KNOT_RRTYPE_HINFO, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4518:
	{ type_num(KNOT_RRTYPE_HINFO, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4519:
	{ type_num(KNOT_RRTYPE_HINFO, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4524:
	{ type_num(KNOT_RRTYPE_HTTPS, &rdata_tail); }
	goto st1463;
tr4525:
	{ type_num(KNOT_RRTYPE_HTTPS, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4526:
	{ type_num(KNOT_RRTYPE_HTTPS, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4527:
	{ type_num(KNOT_RRTYPE_HTTPS, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4536:
	{ type_num(KNOT_RRTYPE_IPSECKEY, &rdata_tail); }
	goto st1463;
tr4537:
	{ type_num(KNOT_RRTYPE_IPSECKEY, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4538:
	{ type_num(KNOT_RRTYPE_IPSECKEY, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4539:
	{ type_num(KNOT_RRTYPE_IPSECKEY, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4544:
	{ type_num(KNOT_RRTYPE_KEY, &rdata_tail); }
	goto st1463;
tr4545:
	{ type_num(KNOT_RRTYPE_KEY, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4546:
	{ type_num(KNOT_RRTYPE_KEY, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4547:
	{ type_num(KNOT_RRTYPE_KEY, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4549:
	{ type_num(KNOT_RRTYPE_KX, &rdata_tail); }
	goto st1463;
tr4550:
	{ type_num(KNOT_RRTYPE_KX, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4551:
	{ type_num(KNOT_RRTYPE_KX, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4552:
	{ type_num(KNOT_RRTYPE_KX, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4559:
	{ type_num(KNOT_RRTYPE_L32, &rdata_tail); }
	goto st1463;
tr4560:
	{ type_num(KNOT_RRTYPE_L32, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4561:
	{ type_num(KNOT_RRTYPE_L32, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4562:
	{ type_num(KNOT_RRTYPE_L32, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4565:
	{ type_num(KNOT_RRTYPE_L64, &rdata_tail); }
	goto st1463;
tr4566:
	{ type_num(KNOT_RRTYPE_L64, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4567:
	{ type_num(KNOT_RRTYPE_L64, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4568:
	{ type_num(KNOT_RRTYPE_L64, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4571:
	{ type_num(KNOT_RRTYPE_LOC, &rdata_tail); }
	goto st1463;
tr4572:
	{ type_num(KNOT_RRTYPE_LOC, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4573:
	{ type_num(KNOT_RRTYPE_LOC, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4574:
	{ type_num(KNOT_RRTYPE_LOC, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4576:
	{ type_num(KNOT_RRTYPE_LP, &rdata_tail); }
	goto st1463;
tr4577:
	{ type_num(KNOT_RRTYPE_LP, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4578:
	{ type_num(KNOT_RRTYPE_LP, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4579:
	{ type_num(KNOT_RRTYPE_LP, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4586:
	{ type_num(KNOT_RRTYPE_MINFO, &rdata_tail); }
	goto st1463;
tr4587:
	{ type_num(KNOT_RRTYPE_MINFO, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4588:
	{ type_num(KNOT_RRTYPE_MINFO, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4589:
	{ type_num(KNOT_RRTYPE_MINFO, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4591:
	{ type_num(KNOT_RRTYPE_MX, &rdata_tail); }
	goto st1463;
tr4592:
	{ type_num(KNOT_RRTYPE_MX, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4593:
	{ type_num(KNOT_RRTYPE_MX, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4594:
	{ type_num(KNOT_RRTYPE_MX, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4602:
	{ type_num(KNOT_RRTYPE_NAPTR, &rdata_tail); }
	goto st1463;
tr4603:
	{ type_num(KNOT_RRTYPE_NAPTR, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4604:
	{ type_num(KNOT_RRTYPE_NAPTR, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4605:
	{ type_num(KNOT_RRTYPE_NAPTR, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4608:
	{ type_num(KNOT_RRTYPE_NID, &rdata_tail); }
	goto st1463;
tr4609:
	{ type_num(KNOT_RRTYPE_NID, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4610:
	{ type_num(KNOT_RRTYPE_NID, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4611:
	{ type_num(KNOT_RRTYPE_NID, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4613:
	{ type_num(KNOT_RRTYPE_NS, &rdata_tail); }
	goto st1463;
tr4614:
	{ type_num(KNOT_RRTYPE_NS, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4615:
	{ type_num(KNOT_RRTYPE_NS, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4617:
	{ type_num(KNOT_RRTYPE_NS, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4620:
	{ type_num(KNOT_RRTYPE_NSEC, &rdata_tail); }
	goto st1463;
tr4621:
	{ type_num(KNOT_RRTYPE_NSEC, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4622:
	{ type_num(KNOT_RRTYPE_NSEC, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4624:
	{ type_num(KNOT_RRTYPE_NSEC, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4626:
	{ type_num(KNOT_RRTYPE_NSEC3, &rdata_tail); }
	goto st1463;
tr4627:
	{ type_num(KNOT_RRTYPE_NSEC3, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4628:
	{ type_num(KNOT_RRTYPE_NSEC3, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4630:
	{ type_num(KNOT_RRTYPE_NSEC3, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4636:
	{ type_num(KNOT_RRTYPE_NSEC3PARAM, &rdata_tail); }
	goto st1463;
tr4637:
	{ type_num(KNOT_RRTYPE_NSEC3PARAM, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4638:
	{ type_num(KNOT_RRTYPE_NSEC3PARAM, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4639:
	{ type_num(KNOT_RRTYPE_NSEC3PARAM, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4650:
	{ type_num(KNOT_RRTYPE_OPENPGPKEY, &rdata_tail); }
	goto st1463;
tr4651:
	{ type_num(KNOT_RRTYPE_OPENPGPKEY, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4652:
	{ type_num(KNOT_RRTYPE_OPENPGPKEY, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4653:
	{ type_num(KNOT_RRTYPE_OPENPGPKEY, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4657:
	{ type_num(KNOT_RRTYPE_PTR, &rdata_tail); }
	goto st1463;
tr4658:
	{ type_num(KNOT_RRTYPE_PTR, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4659:
	{ type_num(KNOT_RRTYPE_PTR, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4660:
	{ type_num(KNOT_RRTYPE_PTR, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4665:
	{ type_num(KNOT_RRTYPE_RP, &rdata_tail); }
	goto st1463;
tr4666:
	{ type_num(KNOT_RRTYPE_RP, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4667:
	{ type_num(KNOT_RRTYPE_RP, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4668:
	{ type_num(KNOT_RRTYPE_RP, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4673:
	{ type_num(KNOT_RRTYPE_RRSIG, &rdata_tail); }
	goto st1463;
tr4674:
	{ type_num(KNOT_RRTYPE_RRSIG, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4675:
	{ type_num(KNOT_RRTYPE_RRSIG, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4676:
	{ type_num(KNOT_RRTYPE_RRSIG, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4678:
	{ type_num(KNOT_RRTYPE_RT, &rdata_tail); }
	goto st1463;
tr4679:
	{ type_num(KNOT_RRTYPE_RT, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4680:
	{ type_num(KNOT_RRTYPE_RT, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4681:
	{ type_num(KNOT_RRTYPE_RT, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4693:
	{ type_num(KNOT_RRTYPE_SMIMEA, &rdata_tail); }
	goto st1463;
tr4694:
	{ type_num(KNOT_RRTYPE_SMIMEA, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4695:
	{ type_num(KNOT_RRTYPE_SMIMEA, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4696:
	{ type_num(KNOT_RRTYPE_SMIMEA, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4699:
	{ type_num(KNOT_RRTYPE_SOA, &rdata_tail); }
	goto st1463;
tr4700:
	{ type_num(KNOT_RRTYPE_SOA, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4701:
	{ type_num(KNOT_RRTYPE_SOA, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4702:
	{ type_num(KNOT_RRTYPE_SOA, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4705:
	{ type_num(KNOT_RRTYPE_SPF, &rdata_tail); }
	goto st1463;
tr4706:
	{ type_num(KNOT_RRTYPE_SPF, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4707:
	{ type_num(KNOT_RRTYPE_SPF, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4708:
	{ type_num(KNOT_RRTYPE_SPF, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4711:
	{ type_num(KNOT_RRTYPE_SRV, &rdata_tail); }
	goto st1463;
tr4712:
	{ type_num(KNOT_RRTYPE_SRV, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4713:
	{ type_num(KNOT_RRTYPE_SRV, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4714:
	{ type_num(KNOT_RRTYPE_SRV, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4719:
	{ type_num(KNOT_RRTYPE_SSHFP, &rdata_tail); }
	goto st1463;
tr4720:
	{ type_num(KNOT_RRTYPE_SSHFP, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4721:
	{ type_num(KNOT_RRTYPE_SSHFP, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4722:
	{ type_num(KNOT_RRTYPE_SSHFP, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4726:
	{ type_num(KNOT_RRTYPE_SVCB, &rdata_tail); }
	goto st1463;
tr4727:
	{ type_num(KNOT_RRTYPE_SVCB, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4728:
	{ type_num(KNOT_RRTYPE_SVCB, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4729:
	{ type_num(KNOT_RRTYPE_SVCB, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4736:
	{ type_num(KNOT_RRTYPE_TLSA, &rdata_tail); }
	goto st1463;
tr4737:
	{ type_num(KNOT_RRTYPE_TLSA, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4738:
	{ type_num(KNOT_RRTYPE_TLSA, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4739:
	{ type_num(KNOT_RRTYPE_TLSA, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4742:
	{ type_num(KNOT_RRTYPE_TXT, &rdata_tail); }
	goto st1463;
tr4743:
	{ type_num(KNOT_RRTYPE_TXT, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4744:
	{ type_num(KNOT_RRTYPE_TXT, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4745:
	{ type_num(KNOT_RRTYPE_TXT, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4758:
	{ type_num(KNOT_RRTYPE_URI, &rdata_tail); }
	goto st1463;
tr4759:
	{ type_num(KNOT_RRTYPE_URI, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4760:
	{ type_num(KNOT_RRTYPE_URI, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4761:
	{ type_num(KNOT_RRTYPE_URI, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4768:
	{ type_num(KNOT_RRTYPE_WALLET, &rdata_tail); }
	goto st1463;
tr4769:
	{ type_num(KNOT_RRTYPE_WALLET, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4770:
	{ type_num(KNOT_RRTYPE_WALLET, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4771:
	{ type_num(KNOT_RRTYPE_WALLET, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
tr4778:
	{ type_num(KNOT_RRTYPE_ZONEMD, &rdata_tail); }
	goto st1463;
tr4779:
	{ type_num(KNOT_RRTYPE_ZONEMD, &rdata_tail); }
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1463;
tr4780:
	{ type_num(KNOT_RRTYPE_ZONEMD, &rdata_tail); }
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1463;
tr4781:
	{ type_num(KNOT_RRTYPE_ZONEMD, &rdata_tail); }
	{
		s->line_counter++;
	}
	goto st1463;
st1463:
	if ( ++p == pe )
		goto _test_eof1463;
case 1463:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1463;
		case 32: goto st1463;
		case 40: goto tr4353;
		case 41: goto tr4354;
		case 2058: goto tr4356;
		case 2107: goto tr4357;
	}
	if ( _widec < 65 ) {
		if ( 48 <= _widec && _widec <= 57 )
			goto tr4355;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr4355;
	} else
		goto tr4355;
	goto tr77;
tr4355:
	{ p--; {stack[top++] = 1464;goto st892;} }
	goto st1464;
st1464:
	if ( ++p == pe )
		goto _test_eof1464;
case 1464:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1465;
		case 32: goto st1465;
		case 40: goto tr4359;
		case 41: goto tr4360;
		case 2058: goto tr4361;
		case 2107: goto tr4362;
	}
	goto tr77;
tr4359:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1465;
tr4360:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1465;
tr4361:
	{
		s->line_counter++;
	}
	goto st1465;
tr4380:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1465; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1465;
st1465:
	if ( ++p == pe )
		goto _test_eof1465;
case 1465:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1465;
		case 32: goto st1465;
		case 40: goto tr4359;
		case 41: goto tr4360;
		case 2058: goto tr4361;
		case 2107: goto tr4362;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4363;
	goto tr2429;
tr4363:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1466;
tr4367:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1466;
st1466:
	if ( ++p == pe )
		goto _test_eof1466;
case 1466:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4364;
		case 32: goto tr4364;
		case 40: goto tr4365;
		case 41: goto tr4366;
		case 2058: goto tr4368;
		case 2107: goto tr4369;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4367;
	goto tr2429;
tr4371:
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1467;
tr4372:
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1467;
tr4374:
	{
		s->line_counter++;
	}
	goto st1467;
tr4378:
	{
		s->buffer[s->buffer_length++] = 0;

		// Execute the comment callback.
		if (s->process.automatic && s->process.comment != NULL) {
			s->process.comment(s);

			// Stop if required from the callback.
			if (s->state == ZS_STATE_STOP) {
				{p++; cs = 1467; goto _out;}
			}
		}
	}
	{
		s->line_counter++;
	}
	goto st1467;
tr4364:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1467;
tr4365:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == true) {
			ERR(ZS_LEFT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = true;
	}
	goto st1467;
tr4366:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		if (s->multiline == false) {
			ERR(ZS_RIGHT_PARENTHESIS);
			p--; {goto st319;}
		}
		s->multiline = false;
	}
	goto st1467;
tr4368:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->line_counter++;
	}
	goto st1467;
st1467:
	if ( ++p == pe )
		goto _test_eof1467;
case 1467:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto st1467;
		case 32: goto st1467;
		case 40: goto tr4371;
		case 41: goto tr4372;
		case 42: goto tr4373;
		case 92: goto tr4373;
		case 95: goto tr4373;
		case 2058: goto tr4374;
		case 2107: goto tr4375;
	}
	if ( _widec < 64 ) {
		if ( 45 <= _widec && _widec <= 57 )
			goto tr4373;
	} else if ( _widec > 90 ) {
		if ( 97 <= _widec && _widec <= 122 )
			goto tr4373;
	} else
		goto tr4373;
	goto tr77;
tr4373:
	{
		s->dname = rdata_tail;
	}
	{ p--; {stack[top++] = 1468;goto st321;} }
	goto st1468;
st1468:
	if ( ++p == pe )
		goto _test_eof1468;
case 1468:
	switch( (*p) ) {
		case 32: goto tr4376;
		case 59: goto tr4376;
	}
	if ( (*p) > 10 ) {
		if ( 40 <= (*p) && (*p) <= 41 )
			goto tr4376;
	} else if ( (*p) >= 9 )
		goto tr4376;
	goto tr77;
tr4376:
	{
		rdata_tail += s->dname_tmp_length;
	}
	{
		p--; {cs = stack[--top];goto _again;}
	}
	goto st1739;
st1739:
	if ( ++p == pe )
		goto _test_eof1739;
case 1739:
	goto st0;
tr4375:
	{
		s->buffer_length = 0;
	}
	goto st1469;
tr4377:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1469;
tr4369:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1469;
st1469:
	if ( ++p == pe )
		goto _test_eof1469;
case 1469:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr4378;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr4377;
	goto tr77;
tr4362:
	{
		s->buffer_length = 0;
	}
	goto st1470;
tr4379:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1470;
st1470:
	if ( ++p == pe )
		goto _test_eof1470;
case 1470:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr4380;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr4379;
	goto tr77;
tr4357:
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4381:
	{
		if (s->buffer_length < sizeof(s->buffer) - 1) {
			s->buffer[s->buffer_length++] = (*p);
		}
	}
	goto st1471;
tr4755:
	{
		if (s->number64 <= UINT16_MAX) {
			uint16_t num16 = htons((uint16_t)s->number64);
			memcpy(rdata_tail, &num16, 2);
			rdata_tail += 2;
		} else {
			WARN(ZS_NUMBER16_OVERFLOW);
			p--; {goto st319;}
		}
	}
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4351:
	{ type_num(KNOT_RRTYPE_A, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4389:
	{ type_num(KNOT_RRTYPE_AAAA, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4397:
	{ type_num(KNOT_RRTYPE_AFSDB, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4403:
	{ type_num(KNOT_RRTYPE_APL, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4414:
	{ type_num(KNOT_RRTYPE_CAA, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4425:
	{ type_num(KNOT_RRTYPE_CDNSKEY, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4430:
	{ type_num(KNOT_RRTYPE_CDS, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4437:
	{ type_num(KNOT_RRTYPE_CERT, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4445:
	{ type_num(KNOT_RRTYPE_CNAME, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4453:
	{ type_num(KNOT_RRTYPE_CSYNC, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4464:
	{ type_num(KNOT_RRTYPE_DHCID, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4473:
	{ type_num(KNOT_RRTYPE_DNAME, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4481:
	{ type_num(KNOT_RRTYPE_DNSKEY, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4487:
	{ type_num(KNOT_RRTYPE_DS, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4494:
	{ type_num(KNOT_RRTYPE_DSYNC, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4504:
	{ type_num(KNOT_RRTYPE_EUI48, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4510:
	{ type_num(KNOT_RRTYPE_EUI64, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4520:
	{ type_num(KNOT_RRTYPE_HINFO, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4528:
	{ type_num(KNOT_RRTYPE_HTTPS, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4540:
	{ type_num(KNOT_RRTYPE_IPSECKEY, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4548:
	{ type_num(KNOT_RRTYPE_KEY, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4553:
	{ type_num(KNOT_RRTYPE_KX, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4563:
	{ type_num(KNOT_RRTYPE_L32, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4569:
	{ type_num(KNOT_RRTYPE_L64, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4575:
	{ type_num(KNOT_RRTYPE_LOC, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4580:
	{ type_num(KNOT_RRTYPE_LP, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4590:
	{ type_num(KNOT_RRTYPE_MINFO, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4595:
	{ type_num(KNOT_RRTYPE_MX, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4606:
	{ type_num(KNOT_RRTYPE_NAPTR, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4612:
	{ type_num(KNOT_RRTYPE_NID, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4618:
	{ type_num(KNOT_RRTYPE_NS, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4625:
	{ type_num(KNOT_RRTYPE_NSEC, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4631:
	{ type_num(KNOT_RRTYPE_NSEC3, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4640:
	{ type_num(KNOT_RRTYPE_NSEC3PARAM, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4654:
	{ type_num(KNOT_RRTYPE_OPENPGPKEY, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4661:
	{ type_num(KNOT_RRTYPE_PTR, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4669:
	{ type_num(KNOT_RRTYPE_RP, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4677:
	{ type_num(KNOT_RRTYPE_RRSIG, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4682:
	{ type_num(KNOT_RRTYPE_RT, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4697:
	{ type_num(KNOT_RRTYPE_SMIMEA, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4703:
	{ type_num(KNOT_RRTYPE_SOA, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4709:
	{ type_num(KNOT_RRTYPE_SPF, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4715:
	{ type_num(KNOT_RRTYPE_SRV, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4723:
	{ type_num(KNOT_RRTYPE_SSHFP, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4730:
	{ type_num(KNOT_RRTYPE_SVCB, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4740:
	{ type_num(KNOT_RRTYPE_TLSA, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4746:
	{ type_num(KNOT_RRTYPE_TXT, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4762:
	{ type_num(KNOT_RRTYPE_URI, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4772:
	{ type_num(KNOT_RRTYPE_WALLET, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
tr4782:
	{ type_num(KNOT_RRTYPE_ZONEMD, &rdata_tail); }
	{
		s->buffer_length = 0;
	}
	goto st1471;
st1471:
	if ( ++p == pe )
		goto _test_eof1471;
case 1471:
	_widec = (*p);
	if ( (*p) < 10 ) {
		if ( (*p) <= 9 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) > 10 ) {
		if ( 11 <= (*p) )
 {			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	if ( _widec == 2058 )
		goto tr4382;
	if ( 1920 <= _widec && _widec <= 2175 )
		goto tr4381;
	goto tr77;
st1472:
	if ( ++p == pe )
		goto _test_eof1472;
case 1472:
	switch( (*p) ) {
		case 65: goto st1473;
		case 97: goto st1473;
	}
	goto tr3373;
st1473:
	if ( ++p == pe )
		goto _test_eof1473;
case 1473:
	switch( (*p) ) {
		case 65: goto st1474;
		case 97: goto st1474;
	}
	goto tr3373;
st1474:
	if ( ++p == pe )
		goto _test_eof1474;
case 1474:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4385;
		case 32: goto tr4385;
		case 40: goto tr4386;
		case 41: goto tr4387;
		case 2058: goto tr4388;
		case 2107: goto tr4389;
	}
	goto tr3373;
st1475:
	if ( ++p == pe )
		goto _test_eof1475;
case 1475:
	switch( (*p) ) {
		case 83: goto st1476;
		case 115: goto st1476;
	}
	goto tr3373;
st1476:
	if ( ++p == pe )
		goto _test_eof1476;
case 1476:
	switch( (*p) ) {
		case 68: goto st1477;
		case 100: goto st1477;
	}
	goto tr3373;
st1477:
	if ( ++p == pe )
		goto _test_eof1477;
case 1477:
	switch( (*p) ) {
		case 66: goto st1478;
		case 98: goto st1478;
	}
	goto tr3373;
st1478:
	if ( ++p == pe )
		goto _test_eof1478;
case 1478:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4393;
		case 32: goto tr4393;
		case 40: goto tr4394;
		case 41: goto tr4395;
		case 2058: goto tr4396;
		case 2107: goto tr4397;
	}
	goto tr3373;
st1479:
	if ( ++p == pe )
		goto _test_eof1479;
case 1479:
	switch( (*p) ) {
		case 76: goto st1480;
		case 108: goto st1480;
	}
	goto tr3373;
st1480:
	if ( ++p == pe )
		goto _test_eof1480;
case 1480:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4399;
		case 32: goto tr4399;
		case 40: goto tr4400;
		case 41: goto tr4401;
		case 2058: goto tr4402;
		case 2107: goto tr4403;
	}
	goto tr3373;
st1481:
	if ( ++p == pe )
		goto _test_eof1481;
case 1481:
	switch( (*p) ) {
		case 65: goto st1482;
		case 68: goto st1484;
		case 69: goto st1491;
		case 78: goto st1494;
		case 83: goto st1498;
		case 97: goto st1482;
		case 100: goto st1484;
		case 101: goto st1491;
		case 110: goto st1494;
		case 115: goto st1498;
	}
	goto tr3373;
st1482:
	if ( ++p == pe )
		goto _test_eof1482;
case 1482:
	switch( (*p) ) {
		case 65: goto st1483;
		case 97: goto st1483;
	}
	goto tr3373;
st1483:
	if ( ++p == pe )
		goto _test_eof1483;
case 1483:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4410;
		case 32: goto tr4410;
		case 40: goto tr4411;
		case 41: goto tr4412;
		case 2058: goto tr4413;
		case 2107: goto tr4414;
	}
	goto tr3373;
st1484:
	if ( ++p == pe )
		goto _test_eof1484;
case 1484:
	switch( (*p) ) {
		case 78: goto st1485;
		case 83: goto st1490;
		case 110: goto st1485;
		case 115: goto st1490;
	}
	goto tr3373;
st1485:
	if ( ++p == pe )
		goto _test_eof1485;
case 1485:
	switch( (*p) ) {
		case 83: goto st1486;
		case 115: goto st1486;
	}
	goto tr3373;
st1486:
	if ( ++p == pe )
		goto _test_eof1486;
case 1486:
	switch( (*p) ) {
		case 75: goto st1487;
		case 107: goto st1487;
	}
	goto tr3373;
st1487:
	if ( ++p == pe )
		goto _test_eof1487;
case 1487:
	switch( (*p) ) {
		case 69: goto st1488;
		case 101: goto st1488;
	}
	goto tr3373;
st1488:
	if ( ++p == pe )
		goto _test_eof1488;
case 1488:
	switch( (*p) ) {
		case 89: goto st1489;
		case 121: goto st1489;
	}
	goto tr3373;
st1489:
	if ( ++p == pe )
		goto _test_eof1489;
case 1489:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4421;
		case 32: goto tr4421;
		case 40: goto tr4422;
		case 41: goto tr4423;
		case 2058: goto tr4424;
		case 2107: goto tr4425;
	}
	goto tr3373;
st1490:
	if ( ++p == pe )
		goto _test_eof1490;
case 1490:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4426;
		case 32: goto tr4426;
		case 40: goto tr4427;
		case 41: goto tr4428;
		case 2058: goto tr4429;
		case 2107: goto tr4430;
	}
	goto tr3373;
st1491:
	if ( ++p == pe )
		goto _test_eof1491;
case 1491:
	switch( (*p) ) {
		case 82: goto st1492;
		case 114: goto st1492;
	}
	goto tr3373;
st1492:
	if ( ++p == pe )
		goto _test_eof1492;
case 1492:
	switch( (*p) ) {
		case 84: goto st1493;
		case 116: goto st1493;
	}
	goto tr3373;
st1493:
	if ( ++p == pe )
		goto _test_eof1493;
case 1493:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4433;
		case 32: goto tr4433;
		case 40: goto tr4434;
		case 41: goto tr4435;
		case 2058: goto tr4436;
		case 2107: goto tr4437;
	}
	goto tr3373;
st1494:
	if ( ++p == pe )
		goto _test_eof1494;
case 1494:
	switch( (*p) ) {
		case 65: goto st1495;
		case 97: goto st1495;
	}
	goto tr3373;
st1495:
	if ( ++p == pe )
		goto _test_eof1495;
case 1495:
	switch( (*p) ) {
		case 77: goto st1496;
		case 109: goto st1496;
	}
	goto tr3373;
st1496:
	if ( ++p == pe )
		goto _test_eof1496;
case 1496:
	switch( (*p) ) {
		case 69: goto st1497;
		case 101: goto st1497;
	}
	goto tr3373;
st1497:
	if ( ++p == pe )
		goto _test_eof1497;
case 1497:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4441;
		case 32: goto tr4441;
		case 40: goto tr4442;
		case 41: goto tr4443;
		case 2058: goto tr4444;
		case 2107: goto tr4445;
	}
	goto tr3373;
st1498:
	if ( ++p == pe )
		goto _test_eof1498;
case 1498:
	switch( (*p) ) {
		case 89: goto st1499;
		case 121: goto st1499;
	}
	goto tr3373;
st1499:
	if ( ++p == pe )
		goto _test_eof1499;
case 1499:
	switch( (*p) ) {
		case 78: goto st1500;
		case 110: goto st1500;
	}
	goto tr3373;
st1500:
	if ( ++p == pe )
		goto _test_eof1500;
case 1500:
	switch( (*p) ) {
		case 67: goto st1501;
		case 99: goto st1501;
	}
	goto tr3373;
st1501:
	if ( ++p == pe )
		goto _test_eof1501;
case 1501:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4449;
		case 32: goto tr4449;
		case 40: goto tr4450;
		case 41: goto tr4451;
		case 2058: goto tr4452;
		case 2107: goto tr4453;
	}
	goto tr3373;
st1502:
	if ( ++p == pe )
		goto _test_eof1502;
case 1502:
	switch( (*p) ) {
		case 72: goto st1503;
		case 78: goto st1507;
		case 83: goto st1515;
		case 104: goto st1503;
		case 110: goto st1507;
		case 115: goto st1515;
	}
	goto tr3373;
st1503:
	if ( ++p == pe )
		goto _test_eof1503;
case 1503:
	switch( (*p) ) {
		case 67: goto st1504;
		case 99: goto st1504;
	}
	goto tr3373;
st1504:
	if ( ++p == pe )
		goto _test_eof1504;
case 1504:
	switch( (*p) ) {
		case 73: goto st1505;
		case 105: goto st1505;
	}
	goto tr3373;
st1505:
	if ( ++p == pe )
		goto _test_eof1505;
case 1505:
	switch( (*p) ) {
		case 68: goto st1506;
		case 100: goto st1506;
	}
	goto tr3373;
st1506:
	if ( ++p == pe )
		goto _test_eof1506;
case 1506:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4460;
		case 32: goto tr4460;
		case 40: goto tr4461;
		case 41: goto tr4462;
		case 2058: goto tr4463;
		case 2107: goto tr4464;
	}
	goto tr3373;
st1507:
	if ( ++p == pe )
		goto _test_eof1507;
case 1507:
	switch( (*p) ) {
		case 65: goto st1508;
		case 83: goto st1511;
		case 97: goto st1508;
		case 115: goto st1511;
	}
	goto tr3373;
st1508:
	if ( ++p == pe )
		goto _test_eof1508;
case 1508:
	switch( (*p) ) {
		case 77: goto st1509;
		case 109: goto st1509;
	}
	goto tr3373;
st1509:
	if ( ++p == pe )
		goto _test_eof1509;
case 1509:
	switch( (*p) ) {
		case 69: goto st1510;
		case 101: goto st1510;
	}
	goto tr3373;
st1510:
	if ( ++p == pe )
		goto _test_eof1510;
case 1510:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4469;
		case 32: goto tr4469;
		case 40: goto tr4470;
		case 41: goto tr4471;
		case 2058: goto tr4472;
		case 2107: goto tr4473;
	}
	goto tr3373;
st1511:
	if ( ++p == pe )
		goto _test_eof1511;
case 1511:
	switch( (*p) ) {
		case 75: goto st1512;
		case 107: goto st1512;
	}
	goto tr3373;
st1512:
	if ( ++p == pe )
		goto _test_eof1512;
case 1512:
	switch( (*p) ) {
		case 69: goto st1513;
		case 101: goto st1513;
	}
	goto tr3373;
st1513:
	if ( ++p == pe )
		goto _test_eof1513;
case 1513:
	switch( (*p) ) {
		case 89: goto st1514;
		case 121: goto st1514;
	}
	goto tr3373;
st1514:
	if ( ++p == pe )
		goto _test_eof1514;
case 1514:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4477;
		case 32: goto tr4477;
		case 40: goto tr4478;
		case 41: goto tr4479;
		case 2058: goto tr4480;
		case 2107: goto tr4481;
	}
	goto tr3373;
st1515:
	if ( ++p == pe )
		goto _test_eof1515;
case 1515:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4482;
		case 32: goto tr4482;
		case 40: goto tr4483;
		case 41: goto tr4484;
		case 89: goto st1516;
		case 121: goto st1516;
		case 2058: goto tr4486;
		case 2107: goto tr4487;
	}
	goto tr3373;
st1516:
	if ( ++p == pe )
		goto _test_eof1516;
case 1516:
	switch( (*p) ) {
		case 78: goto st1517;
		case 110: goto st1517;
	}
	goto tr3373;
st1517:
	if ( ++p == pe )
		goto _test_eof1517;
case 1517:
	switch( (*p) ) {
		case 67: goto st1518;
		case 99: goto st1518;
	}
	goto tr3373;
st1518:
	if ( ++p == pe )
		goto _test_eof1518;
case 1518:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4490;
		case 32: goto tr4490;
		case 40: goto tr4491;
		case 41: goto tr4492;
		case 2058: goto tr4493;
		case 2107: goto tr4494;
	}
	goto tr3373;
st1519:
	if ( ++p == pe )
		goto _test_eof1519;
case 1519:
	switch( (*p) ) {
		case 85: goto st1520;
		case 117: goto st1520;
	}
	goto tr3373;
st1520:
	if ( ++p == pe )
		goto _test_eof1520;
case 1520:
	switch( (*p) ) {
		case 73: goto st1521;
		case 105: goto st1521;
	}
	goto tr3373;
st1521:
	if ( ++p == pe )
		goto _test_eof1521;
case 1521:
	switch( (*p) ) {
		case 52: goto st1522;
		case 54: goto st1524;
	}
	goto tr3373;
st1522:
	if ( ++p == pe )
		goto _test_eof1522;
case 1522:
	if ( (*p) == 56 )
		goto st1523;
	goto tr3373;
st1523:
	if ( ++p == pe )
		goto _test_eof1523;
case 1523:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4500;
		case 32: goto tr4500;
		case 40: goto tr4501;
		case 41: goto tr4502;
		case 2058: goto tr4503;
		case 2107: goto tr4504;
	}
	goto tr3373;
st1524:
	if ( ++p == pe )
		goto _test_eof1524;
case 1524:
	if ( (*p) == 52 )
		goto st1525;
	goto tr3373;
st1525:
	if ( ++p == pe )
		goto _test_eof1525;
case 1525:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4506;
		case 32: goto tr4506;
		case 40: goto tr4507;
		case 41: goto tr4508;
		case 2058: goto tr4509;
		case 2107: goto tr4510;
	}
	goto tr3373;
st1526:
	if ( ++p == pe )
		goto _test_eof1526;
case 1526:
	switch( (*p) ) {
		case 73: goto st1527;
		case 84: goto st1531;
		case 105: goto st1527;
		case 116: goto st1531;
	}
	goto tr3373;
st1527:
	if ( ++p == pe )
		goto _test_eof1527;
case 1527:
	switch( (*p) ) {
		case 78: goto st1528;
		case 110: goto st1528;
	}
	goto tr3373;
st1528:
	if ( ++p == pe )
		goto _test_eof1528;
case 1528:
	switch( (*p) ) {
		case 70: goto st1529;
		case 102: goto st1529;
	}
	goto tr3373;
st1529:
	if ( ++p == pe )
		goto _test_eof1529;
case 1529:
	switch( (*p) ) {
		case 79: goto st1530;
		case 111: goto st1530;
	}
	goto tr3373;
st1530:
	if ( ++p == pe )
		goto _test_eof1530;
case 1530:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4516;
		case 32: goto tr4516;
		case 40: goto tr4517;
		case 41: goto tr4518;
		case 2058: goto tr4519;
		case 2107: goto tr4520;
	}
	goto tr3373;
st1531:
	if ( ++p == pe )
		goto _test_eof1531;
case 1531:
	switch( (*p) ) {
		case 84: goto st1532;
		case 116: goto st1532;
	}
	goto tr3373;
st1532:
	if ( ++p == pe )
		goto _test_eof1532;
case 1532:
	switch( (*p) ) {
		case 80: goto st1533;
		case 112: goto st1533;
	}
	goto tr3373;
st1533:
	if ( ++p == pe )
		goto _test_eof1533;
case 1533:
	switch( (*p) ) {
		case 83: goto st1534;
		case 115: goto st1534;
	}
	goto tr3373;
st1534:
	if ( ++p == pe )
		goto _test_eof1534;
case 1534:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4524;
		case 32: goto tr4524;
		case 40: goto tr4525;
		case 41: goto tr4526;
		case 2058: goto tr4527;
		case 2107: goto tr4528;
	}
	goto tr3373;
st1535:
	if ( ++p == pe )
		goto _test_eof1535;
case 1535:
	switch( (*p) ) {
		case 80: goto st1536;
		case 112: goto st1536;
	}
	goto tr3373;
st1536:
	if ( ++p == pe )
		goto _test_eof1536;
case 1536:
	switch( (*p) ) {
		case 83: goto st1537;
		case 115: goto st1537;
	}
	goto tr3373;
st1537:
	if ( ++p == pe )
		goto _test_eof1537;
case 1537:
	switch( (*p) ) {
		case 69: goto st1538;
		case 101: goto st1538;
	}
	goto tr3373;
st1538:
	if ( ++p == pe )
		goto _test_eof1538;
case 1538:
	switch( (*p) ) {
		case 67: goto st1539;
		case 99: goto st1539;
	}
	goto tr3373;
st1539:
	if ( ++p == pe )
		goto _test_eof1539;
case 1539:
	switch( (*p) ) {
		case 75: goto st1540;
		case 107: goto st1540;
	}
	goto tr3373;
st1540:
	if ( ++p == pe )
		goto _test_eof1540;
case 1540:
	switch( (*p) ) {
		case 69: goto st1541;
		case 101: goto st1541;
	}
	goto tr3373;
st1541:
	if ( ++p == pe )
		goto _test_eof1541;
case 1541:
	switch( (*p) ) {
		case 89: goto st1542;
		case 121: goto st1542;
	}
	goto tr3373;
st1542:
	if ( ++p == pe )
		goto _test_eof1542;
case 1542:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4536;
		case 32: goto tr4536;
		case 40: goto tr4537;
		case 41: goto tr4538;
		case 2058: goto tr4539;
		case 2107: goto tr4540;
	}
	goto tr3373;
st1543:
	if ( ++p == pe )
		goto _test_eof1543;
case 1543:
	switch( (*p) ) {
		case 69: goto st1544;
		case 88: goto st1546;
		case 101: goto st1544;
		case 120: goto st1546;
	}
	goto tr3373;
st1544:
	if ( ++p == pe )
		goto _test_eof1544;
case 1544:
	switch( (*p) ) {
		case 89: goto st1545;
		case 121: goto st1545;
	}
	goto tr3373;
st1545:
	if ( ++p == pe )
		goto _test_eof1545;
case 1545:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4544;
		case 32: goto tr4544;
		case 40: goto tr4545;
		case 41: goto tr4546;
		case 2058: goto tr4547;
		case 2107: goto tr4548;
	}
	goto tr3373;
st1546:
	if ( ++p == pe )
		goto _test_eof1546;
case 1546:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4549;
		case 32: goto tr4549;
		case 40: goto tr4550;
		case 41: goto tr4551;
		case 2058: goto tr4552;
		case 2107: goto tr4553;
	}
	goto tr3373;
st1547:
	if ( ++p == pe )
		goto _test_eof1547;
case 1547:
	switch( (*p) ) {
		case 51: goto st1548;
		case 54: goto st1550;
		case 79: goto st1552;
		case 80: goto st1554;
		case 111: goto st1552;
		case 112: goto st1554;
	}
	goto tr3373;
st1548:
	if ( ++p == pe )
		goto _test_eof1548;
case 1548:
	if ( (*p) == 50 )
		goto st1549;
	goto tr3373;
st1549:
	if ( ++p == pe )
		goto _test_eof1549;
case 1549:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4559;
		case 32: goto tr4559;
		case 40: goto tr4560;
		case 41: goto tr4561;
		case 2058: goto tr4562;
		case 2107: goto tr4563;
	}
	goto tr3373;
st1550:
	if ( ++p == pe )
		goto _test_eof1550;
case 1550:
	if ( (*p) == 52 )
		goto st1551;
	goto tr3373;
st1551:
	if ( ++p == pe )
		goto _test_eof1551;
case 1551:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4565;
		case 32: goto tr4565;
		case 40: goto tr4566;
		case 41: goto tr4567;
		case 2058: goto tr4568;
		case 2107: goto tr4569;
	}
	goto tr3373;
st1552:
	if ( ++p == pe )
		goto _test_eof1552;
case 1552:
	switch( (*p) ) {
		case 67: goto st1553;
		case 99: goto st1553;
	}
	goto tr3373;
st1553:
	if ( ++p == pe )
		goto _test_eof1553;
case 1553:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4571;
		case 32: goto tr4571;
		case 40: goto tr4572;
		case 41: goto tr4573;
		case 2058: goto tr4574;
		case 2107: goto tr4575;
	}
	goto tr3373;
st1554:
	if ( ++p == pe )
		goto _test_eof1554;
case 1554:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4576;
		case 32: goto tr4576;
		case 40: goto tr4577;
		case 41: goto tr4578;
		case 2058: goto tr4579;
		case 2107: goto tr4580;
	}
	goto tr3373;
st1555:
	if ( ++p == pe )
		goto _test_eof1555;
case 1555:
	switch( (*p) ) {
		case 73: goto st1556;
		case 88: goto st1560;
		case 105: goto st1556;
		case 120: goto st1560;
	}
	goto tr3373;
st1556:
	if ( ++p == pe )
		goto _test_eof1556;
case 1556:
	switch( (*p) ) {
		case 78: goto st1557;
		case 110: goto st1557;
	}
	goto tr3373;
st1557:
	if ( ++p == pe )
		goto _test_eof1557;
case 1557:
	switch( (*p) ) {
		case 70: goto st1558;
		case 102: goto st1558;
	}
	goto tr3373;
st1558:
	if ( ++p == pe )
		goto _test_eof1558;
case 1558:
	switch( (*p) ) {
		case 79: goto st1559;
		case 111: goto st1559;
	}
	goto tr3373;
st1559:
	if ( ++p == pe )
		goto _test_eof1559;
case 1559:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4586;
		case 32: goto tr4586;
		case 40: goto tr4587;
		case 41: goto tr4588;
		case 2058: goto tr4589;
		case 2107: goto tr4590;
	}
	goto tr3373;
st1560:
	if ( ++p == pe )
		goto _test_eof1560;
case 1560:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4591;
		case 32: goto tr4591;
		case 40: goto tr4592;
		case 41: goto tr4593;
		case 2058: goto tr4594;
		case 2107: goto tr4595;
	}
	goto tr3373;
st1561:
	if ( ++p == pe )
		goto _test_eof1561;
case 1561:
	switch( (*p) ) {
		case 65: goto st1562;
		case 73: goto st1566;
		case 83: goto st1568;
		case 97: goto st1562;
		case 105: goto st1566;
		case 115: goto st1568;
	}
	goto tr3373;
st1562:
	if ( ++p == pe )
		goto _test_eof1562;
case 1562:
	switch( (*p) ) {
		case 80: goto st1563;
		case 112: goto st1563;
	}
	goto tr3373;
st1563:
	if ( ++p == pe )
		goto _test_eof1563;
case 1563:
	switch( (*p) ) {
		case 84: goto st1564;
		case 116: goto st1564;
	}
	goto tr3373;
st1564:
	if ( ++p == pe )
		goto _test_eof1564;
case 1564:
	switch( (*p) ) {
		case 82: goto st1565;
		case 114: goto st1565;
	}
	goto tr3373;
st1565:
	if ( ++p == pe )
		goto _test_eof1565;
case 1565:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4602;
		case 32: goto tr4602;
		case 40: goto tr4603;
		case 41: goto tr4604;
		case 2058: goto tr4605;
		case 2107: goto tr4606;
	}
	goto tr3373;
st1566:
	if ( ++p == pe )
		goto _test_eof1566;
case 1566:
	switch( (*p) ) {
		case 68: goto st1567;
		case 100: goto st1567;
	}
	goto tr3373;
st1567:
	if ( ++p == pe )
		goto _test_eof1567;
case 1567:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4608;
		case 32: goto tr4608;
		case 40: goto tr4609;
		case 41: goto tr4610;
		case 2058: goto tr4611;
		case 2107: goto tr4612;
	}
	goto tr3373;
st1568:
	if ( ++p == pe )
		goto _test_eof1568;
case 1568:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4613;
		case 32: goto tr4613;
		case 40: goto tr4614;
		case 41: goto tr4615;
		case 69: goto st1569;
		case 101: goto st1569;
		case 2058: goto tr4617;
		case 2107: goto tr4618;
	}
	goto tr3373;
st1569:
	if ( ++p == pe )
		goto _test_eof1569;
case 1569:
	switch( (*p) ) {
		case 67: goto st1570;
		case 99: goto st1570;
	}
	goto tr3373;
st1570:
	if ( ++p == pe )
		goto _test_eof1570;
case 1570:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4620;
		case 32: goto tr4620;
		case 40: goto tr4621;
		case 41: goto tr4622;
		case 51: goto st1571;
		case 2058: goto tr4624;
		case 2107: goto tr4625;
	}
	goto tr3373;
st1571:
	if ( ++p == pe )
		goto _test_eof1571;
case 1571:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4626;
		case 32: goto tr4626;
		case 40: goto tr4627;
		case 41: goto tr4628;
		case 80: goto st1572;
		case 112: goto st1572;
		case 2058: goto tr4630;
		case 2107: goto tr4631;
	}
	goto tr3373;
st1572:
	if ( ++p == pe )
		goto _test_eof1572;
case 1572:
	switch( (*p) ) {
		case 65: goto st1573;
		case 97: goto st1573;
	}
	goto tr3373;
st1573:
	if ( ++p == pe )
		goto _test_eof1573;
case 1573:
	switch( (*p) ) {
		case 82: goto st1574;
		case 114: goto st1574;
	}
	goto tr3373;
st1574:
	if ( ++p == pe )
		goto _test_eof1574;
case 1574:
	switch( (*p) ) {
		case 65: goto st1575;
		case 97: goto st1575;
	}
	goto tr3373;
st1575:
	if ( ++p == pe )
		goto _test_eof1575;
case 1575:
	switch( (*p) ) {
		case 77: goto st1576;
		case 109: goto st1576;
	}
	goto tr3373;
st1576:
	if ( ++p == pe )
		goto _test_eof1576;
case 1576:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4636;
		case 32: goto tr4636;
		case 40: goto tr4637;
		case 41: goto tr4638;
		case 2058: goto tr4639;
		case 2107: goto tr4640;
	}
	goto tr3373;
st1577:
	if ( ++p == pe )
		goto _test_eof1577;
case 1577:
	switch( (*p) ) {
		case 80: goto st1578;
		case 112: goto st1578;
	}
	goto tr3373;
st1578:
	if ( ++p == pe )
		goto _test_eof1578;
case 1578:
	switch( (*p) ) {
		case 69: goto st1579;
		case 101: goto st1579;
	}
	goto tr3373;
st1579:
	if ( ++p == pe )
		goto _test_eof1579;
case 1579:
	switch( (*p) ) {
		case 78: goto st1580;
		case 110: goto st1580;
	}
	goto tr3373;
st1580:
	if ( ++p == pe )
		goto _test_eof1580;
case 1580:
	switch( (*p) ) {
		case 80: goto st1581;
		case 112: goto st1581;
	}
	goto tr3373;
st1581:
	if ( ++p == pe )
		goto _test_eof1581;
case 1581:
	switch( (*p) ) {
		case 71: goto st1582;
		case 103: goto st1582;
	}
	goto tr3373;
st1582:
	if ( ++p == pe )
		goto _test_eof1582;
case 1582:
	switch( (*p) ) {
		case 80: goto st1583;
		case 112: goto st1583;
	}
	goto tr3373;
st1583:
	if ( ++p == pe )
		goto _test_eof1583;
case 1583:
	switch( (*p) ) {
		case 75: goto st1584;
		case 107: goto st1584;
	}
	goto tr3373;
st1584:
	if ( ++p == pe )
		goto _test_eof1584;
case 1584:
	switch( (*p) ) {
		case 69: goto st1585;
		case 101: goto st1585;
	}
	goto tr3373;
st1585:
	if ( ++p == pe )
		goto _test_eof1585;
case 1585:
	switch( (*p) ) {
		case 89: goto st1586;
		case 121: goto st1586;
	}
	goto tr3373;
st1586:
	if ( ++p == pe )
		goto _test_eof1586;
case 1586:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4650;
		case 32: goto tr4650;
		case 40: goto tr4651;
		case 41: goto tr4652;
		case 2058: goto tr4653;
		case 2107: goto tr4654;
	}
	goto tr3373;
st1587:
	if ( ++p == pe )
		goto _test_eof1587;
case 1587:
	switch( (*p) ) {
		case 84: goto st1588;
		case 116: goto st1588;
	}
	goto tr3373;
st1588:
	if ( ++p == pe )
		goto _test_eof1588;
case 1588:
	switch( (*p) ) {
		case 82: goto st1589;
		case 114: goto st1589;
	}
	goto tr3373;
st1589:
	if ( ++p == pe )
		goto _test_eof1589;
case 1589:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4657;
		case 32: goto tr4657;
		case 40: goto tr4658;
		case 41: goto tr4659;
		case 2058: goto tr4660;
		case 2107: goto tr4661;
	}
	goto tr3373;
st1590:
	if ( ++p == pe )
		goto _test_eof1590;
case 1590:
	switch( (*p) ) {
		case 80: goto st1591;
		case 82: goto st1592;
		case 84: goto st1596;
		case 112: goto st1591;
		case 114: goto st1592;
		case 116: goto st1596;
	}
	goto tr3373;
st1591:
	if ( ++p == pe )
		goto _test_eof1591;
case 1591:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4665;
		case 32: goto tr4665;
		case 40: goto tr4666;
		case 41: goto tr4667;
		case 2058: goto tr4668;
		case 2107: goto tr4669;
	}
	goto tr3373;
st1592:
	if ( ++p == pe )
		goto _test_eof1592;
case 1592:
	switch( (*p) ) {
		case 83: goto st1593;
		case 115: goto st1593;
	}
	goto tr3373;
st1593:
	if ( ++p == pe )
		goto _test_eof1593;
case 1593:
	switch( (*p) ) {
		case 73: goto st1594;
		case 105: goto st1594;
	}
	goto tr3373;
st1594:
	if ( ++p == pe )
		goto _test_eof1594;
case 1594:
	switch( (*p) ) {
		case 71: goto st1595;
		case 103: goto st1595;
	}
	goto tr3373;
st1595:
	if ( ++p == pe )
		goto _test_eof1595;
case 1595:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4673;
		case 32: goto tr4673;
		case 40: goto tr4674;
		case 41: goto tr4675;
		case 2058: goto tr4676;
		case 2107: goto tr4677;
	}
	goto tr3373;
st1596:
	if ( ++p == pe )
		goto _test_eof1596;
case 1596:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4678;
		case 32: goto tr4678;
		case 40: goto tr4679;
		case 41: goto tr4680;
		case 2058: goto tr4681;
		case 2107: goto tr4682;
	}
	goto tr3373;
st1597:
	if ( ++p == pe )
		goto _test_eof1597;
case 1597:
	switch( (*p) ) {
		case 77: goto st1598;
		case 79: goto st1603;
		case 80: goto st1605;
		case 82: goto st1607;
		case 83: goto st1609;
		case 86: goto st1613;
		case 109: goto st1598;
		case 111: goto st1603;
		case 112: goto st1605;
		case 114: goto st1607;
		case 115: goto st1609;
		case 118: goto st1613;
	}
	goto tr3373;
st1598:
	if ( ++p == pe )
		goto _test_eof1598;
case 1598:
	switch( (*p) ) {
		case 73: goto st1599;
		case 105: goto st1599;
	}
	goto tr3373;
st1599:
	if ( ++p == pe )
		goto _test_eof1599;
case 1599:
	switch( (*p) ) {
		case 77: goto st1600;
		case 109: goto st1600;
	}
	goto tr3373;
st1600:
	if ( ++p == pe )
		goto _test_eof1600;
case 1600:
	switch( (*p) ) {
		case 69: goto st1601;
		case 101: goto st1601;
	}
	goto tr3373;
st1601:
	if ( ++p == pe )
		goto _test_eof1601;
case 1601:
	switch( (*p) ) {
		case 65: goto st1602;
		case 97: goto st1602;
	}
	goto tr3373;
st1602:
	if ( ++p == pe )
		goto _test_eof1602;
case 1602:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4693;
		case 32: goto tr4693;
		case 40: goto tr4694;
		case 41: goto tr4695;
		case 2058: goto tr4696;
		case 2107: goto tr4697;
	}
	goto tr3373;
st1603:
	if ( ++p == pe )
		goto _test_eof1603;
case 1603:
	switch( (*p) ) {
		case 65: goto st1604;
		case 97: goto st1604;
	}
	goto tr3373;
st1604:
	if ( ++p == pe )
		goto _test_eof1604;
case 1604:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4699;
		case 32: goto tr4699;
		case 40: goto tr4700;
		case 41: goto tr4701;
		case 2058: goto tr4702;
		case 2107: goto tr4703;
	}
	goto tr3373;
st1605:
	if ( ++p == pe )
		goto _test_eof1605;
case 1605:
	switch( (*p) ) {
		case 70: goto st1606;
		case 102: goto st1606;
	}
	goto tr3373;
st1606:
	if ( ++p == pe )
		goto _test_eof1606;
case 1606:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4705;
		case 32: goto tr4705;
		case 40: goto tr4706;
		case 41: goto tr4707;
		case 2058: goto tr4708;
		case 2107: goto tr4709;
	}
	goto tr3373;
st1607:
	if ( ++p == pe )
		goto _test_eof1607;
case 1607:
	switch( (*p) ) {
		case 86: goto st1608;
		case 118: goto st1608;
	}
	goto tr3373;
st1608:
	if ( ++p == pe )
		goto _test_eof1608;
case 1608:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4711;
		case 32: goto tr4711;
		case 40: goto tr4712;
		case 41: goto tr4713;
		case 2058: goto tr4714;
		case 2107: goto tr4715;
	}
	goto tr3373;
st1609:
	if ( ++p == pe )
		goto _test_eof1609;
case 1609:
	switch( (*p) ) {
		case 72: goto st1610;
		case 104: goto st1610;
	}
	goto tr3373;
st1610:
	if ( ++p == pe )
		goto _test_eof1610;
case 1610:
	switch( (*p) ) {
		case 70: goto st1611;
		case 102: goto st1611;
	}
	goto tr3373;
st1611:
	if ( ++p == pe )
		goto _test_eof1611;
case 1611:
	switch( (*p) ) {
		case 80: goto st1612;
		case 112: goto st1612;
	}
	goto tr3373;
st1612:
	if ( ++p == pe )
		goto _test_eof1612;
case 1612:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4719;
		case 32: goto tr4719;
		case 40: goto tr4720;
		case 41: goto tr4721;
		case 2058: goto tr4722;
		case 2107: goto tr4723;
	}
	goto tr3373;
st1613:
	if ( ++p == pe )
		goto _test_eof1613;
case 1613:
	switch( (*p) ) {
		case 67: goto st1614;
		case 99: goto st1614;
	}
	goto tr3373;
st1614:
	if ( ++p == pe )
		goto _test_eof1614;
case 1614:
	switch( (*p) ) {
		case 66: goto st1615;
		case 98: goto st1615;
	}
	goto tr3373;
st1615:
	if ( ++p == pe )
		goto _test_eof1615;
case 1615:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4726;
		case 32: goto tr4726;
		case 40: goto tr4727;
		case 41: goto tr4728;
		case 2058: goto tr4729;
		case 2107: goto tr4730;
	}
	goto tr3373;
st1616:
	if ( ++p == pe )
		goto _test_eof1616;
case 1616:
	switch( (*p) ) {
		case 76: goto st1617;
		case 88: goto st1620;
		case 89: goto st1622;
		case 108: goto st1617;
		case 120: goto st1620;
		case 121: goto st1622;
	}
	goto tr3373;
st1617:
	if ( ++p == pe )
		goto _test_eof1617;
case 1617:
	switch( (*p) ) {
		case 83: goto st1618;
		case 115: goto st1618;
	}
	goto tr3373;
st1618:
	if ( ++p == pe )
		goto _test_eof1618;
case 1618:
	switch( (*p) ) {
		case 65: goto st1619;
		case 97: goto st1619;
	}
	goto tr3373;
st1619:
	if ( ++p == pe )
		goto _test_eof1619;
case 1619:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4736;
		case 32: goto tr4736;
		case 40: goto tr4737;
		case 41: goto tr4738;
		case 2058: goto tr4739;
		case 2107: goto tr4740;
	}
	goto tr3373;
st1620:
	if ( ++p == pe )
		goto _test_eof1620;
case 1620:
	switch( (*p) ) {
		case 84: goto st1621;
		case 116: goto st1621;
	}
	goto tr3373;
st1621:
	if ( ++p == pe )
		goto _test_eof1621;
case 1621:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4742;
		case 32: goto tr4742;
		case 40: goto tr4743;
		case 41: goto tr4744;
		case 2058: goto tr4745;
		case 2107: goto tr4746;
	}
	goto tr3373;
st1622:
	if ( ++p == pe )
		goto _test_eof1622;
case 1622:
	switch( (*p) ) {
		case 80: goto st1623;
		case 112: goto st1623;
	}
	goto tr3373;
st1623:
	if ( ++p == pe )
		goto _test_eof1623;
case 1623:
	switch( (*p) ) {
		case 69: goto st1624;
		case 101: goto st1624;
	}
	goto tr3373;
st1624:
	if ( ++p == pe )
		goto _test_eof1624;
case 1624:
	if ( 48 <= (*p) && (*p) <= 57 )
		goto tr4749;
	goto tr3867;
tr4749:
	{
		s->number64 = 0;
	}
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1625;
tr4753:
	{
		// Overflow check: 10*(s->number64) + fc - '0' <= UINT64_MAX
		if ((s->number64 < (UINT64_MAX / 10)) ||   // Dominant fast check.
			((s->number64 == (UINT64_MAX / 10)) && // Marginal case.
			 ((uint8_t)(*p) <= (UINT64_MAX % 10) + '0')
			)
		   ) {
			s->number64 *= 10;
			s->number64 += digit_to_num[(uint8_t)(*p)];
		} else {
			WARN(ZS_NUMBER64_OVERFLOW);
			p--; {goto st319;}
		}
	}
	goto st1625;
st1625:
	if ( ++p == pe )
		goto _test_eof1625;
case 1625:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4750;
		case 32: goto tr4750;
		case 40: goto tr4751;
		case 41: goto tr4752;
		case 2058: goto tr4754;
		case 2107: goto tr4755;
	}
	if ( 48 <= _widec && _widec <= 57 )
		goto tr4753;
	goto tr3867;
st1626:
	if ( ++p == pe )
		goto _test_eof1626;
case 1626:
	switch( (*p) ) {
		case 82: goto st1627;
		case 114: goto st1627;
	}
	goto tr3373;
st1627:
	if ( ++p == pe )
		goto _test_eof1627;
case 1627:
	switch( (*p) ) {
		case 73: goto st1628;
		case 105: goto st1628;
	}
	goto tr3373;
st1628:
	if ( ++p == pe )
		goto _test_eof1628;
case 1628:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4758;
		case 32: goto tr4758;
		case 40: goto tr4759;
		case 41: goto tr4760;
		case 2058: goto tr4761;
		case 2107: goto tr4762;
	}
	goto tr3373;
st1629:
	if ( ++p == pe )
		goto _test_eof1629;
case 1629:
	switch( (*p) ) {
		case 65: goto st1630;
		case 97: goto st1630;
	}
	goto tr3373;
st1630:
	if ( ++p == pe )
		goto _test_eof1630;
case 1630:
	switch( (*p) ) {
		case 76: goto st1631;
		case 108: goto st1631;
	}
	goto tr3373;
st1631:
	if ( ++p == pe )
		goto _test_eof1631;
case 1631:
	switch( (*p) ) {
		case 76: goto st1632;
		case 108: goto st1632;
	}
	goto tr3373;
st1632:
	if ( ++p == pe )
		goto _test_eof1632;
case 1632:
	switch( (*p) ) {
		case 69: goto st1633;
		case 101: goto st1633;
	}
	goto tr3373;
st1633:
	if ( ++p == pe )
		goto _test_eof1633;
case 1633:
	switch( (*p) ) {
		case 84: goto st1634;
		case 116: goto st1634;
	}
	goto tr3373;
st1634:
	if ( ++p == pe )
		goto _test_eof1634;
case 1634:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4768;
		case 32: goto tr4768;
		case 40: goto tr4769;
		case 41: goto tr4770;
		case 2058: goto tr4771;
		case 2107: goto tr4772;
	}
	goto tr3373;
st1635:
	if ( ++p == pe )
		goto _test_eof1635;
case 1635:
	switch( (*p) ) {
		case 79: goto st1636;
		case 111: goto st1636;
	}
	goto tr3373;
st1636:
	if ( ++p == pe )
		goto _test_eof1636;
case 1636:
	switch( (*p) ) {
		case 78: goto st1637;
		case 110: goto st1637;
	}
	goto tr3373;
st1637:
	if ( ++p == pe )
		goto _test_eof1637;
case 1637:
	switch( (*p) ) {
		case 69: goto st1638;
		case 101: goto st1638;
	}
	goto tr3373;
st1638:
	if ( ++p == pe )
		goto _test_eof1638;
case 1638:
	switch( (*p) ) {
		case 77: goto st1639;
		case 109: goto st1639;
	}
	goto tr3373;
st1639:
	if ( ++p == pe )
		goto _test_eof1639;
case 1639:
	switch( (*p) ) {
		case 68: goto st1640;
		case 100: goto st1640;
	}
	goto tr3373;
st1640:
	if ( ++p == pe )
		goto _test_eof1640;
case 1640:
	_widec = (*p);
	if ( (*p) > 10 ) {
		if ( 59 <= (*p) && (*p) <= 59 ) {
			_widec = (short)(1664 + ((*p) - -128));
			if (
 s->multiline  ) _widec += 256;
		}
	} else if ( (*p) >= 10 ) {
		_widec = (short)(1664 + ((*p) - -128));
		if (
 s->multiline  ) _widec += 256;
	}
	switch( _widec ) {
		case 9: goto tr4778;
		case 32: goto tr4778;
		case 40: goto tr4779;
		case 41: goto tr4780;
		case 2058: goto tr4781;
		case 2107: goto tr4782;
	}
	goto tr3373;
	}
	_test_eof1641: cs = 1641; goto _test_eof;
	_test_eof1: cs = 1; goto _test_eof;
	_test_eof2: cs = 2; goto _test_eof;
	_test_eof3: cs = 3; goto _test_eof;
	_test_eof4: cs = 4; goto _test_eof;
	_test_eof5: cs = 5; goto _test_eof;
	_test_eof6: cs = 6; goto _test_eof;
	_test_eof7: cs = 7; goto _test_eof;
	_test_eof8: cs = 8; goto _test_eof;
	_test_eof9: cs = 9; goto _test_eof;
	_test_eof10: cs = 10; goto _test_eof;
	_test_eof11: cs = 11; goto _test_eof;
	_test_eof12: cs = 12; goto _test_eof;
	_test_eof13: cs = 13; goto _test_eof;
	_test_eof1642: cs = 1642; goto _test_eof;
	_test_eof14: cs = 14; goto _test_eof;
	_test_eof15: cs = 15; goto _test_eof;
	_test_eof16: cs = 16; goto _test_eof;
	_test_eof17: cs = 17; goto _test_eof;
	_test_eof18: cs = 18; goto _test_eof;
	_test_eof19: cs = 19; goto _test_eof;
	_test_eof20: cs = 20; goto _test_eof;
	_test_eof21: cs = 21; goto _test_eof;
	_test_eof22: cs = 22; goto _test_eof;
	_test_eof23: cs = 23; goto _test_eof;
	_test_eof24: cs = 24; goto _test_eof;
	_test_eof25: cs = 25; goto _test_eof;
	_test_eof26: cs = 26; goto _test_eof;
	_test_eof27: cs = 27; goto _test_eof;
	_test_eof28: cs = 28; goto _test_eof;
	_test_eof29: cs = 29; goto _test_eof;
	_test_eof30: cs = 30; goto _test_eof;
	_test_eof31: cs = 31; goto _test_eof;
	_test_eof32: cs = 32; goto _test_eof;
	_test_eof33: cs = 33; goto _test_eof;
	_test_eof34: cs = 34; goto _test_eof;
	_test_eof35: cs = 35; goto _test_eof;
	_test_eof36: cs = 36; goto _test_eof;
	_test_eof37: cs = 37; goto _test_eof;
	_test_eof38: cs = 38; goto _test_eof;
	_test_eof39: cs = 39; goto _test_eof;
	_test_eof40: cs = 40; goto _test_eof;
	_test_eof41: cs = 41; goto _test_eof;
	_test_eof42: cs = 42; goto _test_eof;
	_test_eof43: cs = 43; goto _test_eof;
	_test_eof44: cs = 44; goto _test_eof;
	_test_eof45: cs = 45; goto _test_eof;
	_test_eof46: cs = 46; goto _test_eof;
	_test_eof47: cs = 47; goto _test_eof;
	_test_eof48: cs = 48; goto _test_eof;
	_test_eof49: cs = 49; goto _test_eof;
	_test_eof50: cs = 50; goto _test_eof;
	_test_eof51: cs = 51; goto _test_eof;
	_test_eof52: cs = 52; goto _test_eof;
	_test_eof53: cs = 53; goto _test_eof;
	_test_eof54: cs = 54; goto _test_eof;
	_test_eof55: cs = 55; goto _test_eof;
	_test_eof56: cs = 56; goto _test_eof;
	_test_eof57: cs = 57; goto _test_eof;
	_test_eof58: cs = 58; goto _test_eof;
	_test_eof59: cs = 59; goto _test_eof;
	_test_eof60: cs = 60; goto _test_eof;
	_test_eof61: cs = 61; goto _test_eof;
	_test_eof62: cs = 62; goto _test_eof;
	_test_eof63: cs = 63; goto _test_eof;
	_test_eof64: cs = 64; goto _test_eof;
	_test_eof65: cs = 65; goto _test_eof;
	_test_eof66: cs = 66; goto _test_eof;
	_test_eof67: cs = 67; goto _test_eof;
	_test_eof68: cs = 68; goto _test_eof;
	_test_eof69: cs = 69; goto _test_eof;
	_test_eof70: cs = 70; goto _test_eof;
	_test_eof71: cs = 71; goto _test_eof;
	_test_eof72: cs = 72; goto _test_eof;
	_test_eof73: cs = 73; goto _test_eof;
	_test_eof74: cs = 74; goto _test_eof;
	_test_eof75: cs = 75; goto _test_eof;
	_test_eof76: cs = 76; goto _test_eof;
	_test_eof77: cs = 77; goto _test_eof;
	_test_eof78: cs = 78; goto _test_eof;
	_test_eof79: cs = 79; goto _test_eof;
	_test_eof80: cs = 80; goto _test_eof;
	_test_eof81: cs = 81; goto _test_eof;
	_test_eof82: cs = 82; goto _test_eof;
	_test_eof83: cs = 83; goto _test_eof;
	_test_eof84: cs = 84; goto _test_eof;
	_test_eof85: cs = 85; goto _test_eof;
	_test_eof86: cs = 86; goto _test_eof;
	_test_eof87: cs = 87; goto _test_eof;
	_test_eof88: cs = 88; goto _test_eof;
	_test_eof89: cs = 89; goto _test_eof;
	_test_eof90: cs = 90; goto _test_eof;
	_test_eof91: cs = 91; goto _test_eof;
	_test_eof92: cs = 92; goto _test_eof;
	_test_eof93: cs = 93; goto _test_eof;
	_test_eof94: cs = 94; goto _test_eof;
	_test_eof95: cs = 95; goto _test_eof;
	_test_eof96: cs = 96; goto _test_eof;
	_test_eof97: cs = 97; goto _test_eof;
	_test_eof98: cs = 98; goto _test_eof;
	_test_eof99: cs = 99; goto _test_eof;
	_test_eof100: cs = 100; goto _test_eof;
	_test_eof101: cs = 101; goto _test_eof;
	_test_eof102: cs = 102; goto _test_eof;
	_test_eof103: cs = 103; goto _test_eof;
	_test_eof104: cs = 104; goto _test_eof;
	_test_eof105: cs = 105; goto _test_eof;
	_test_eof106: cs = 106; goto _test_eof;
	_test_eof107: cs = 107; goto _test_eof;
	_test_eof108: cs = 108; goto _test_eof;
	_test_eof109: cs = 109; goto _test_eof;
	_test_eof110: cs = 110; goto _test_eof;
	_test_eof111: cs = 111; goto _test_eof;
	_test_eof112: cs = 112; goto _test_eof;
	_test_eof113: cs = 113; goto _test_eof;
	_test_eof114: cs = 114; goto _test_eof;
	_test_eof115: cs = 115; goto _test_eof;
	_test_eof116: cs = 116; goto _test_eof;
	_test_eof117: cs = 117; goto _test_eof;
	_test_eof118: cs = 118; goto _test_eof;
	_test_eof119: cs = 119; goto _test_eof;
	_test_eof120: cs = 120; goto _test_eof;
	_test_eof121: cs = 121; goto _test_eof;
	_test_eof122: cs = 122; goto _test_eof;
	_test_eof123: cs = 123; goto _test_eof;
	_test_eof124: cs = 124; goto _test_eof;
	_test_eof125: cs = 125; goto _test_eof;
	_test_eof126: cs = 126; goto _test_eof;
	_test_eof127: cs = 127; goto _test_eof;
	_test_eof128: cs = 128; goto _test_eof;
	_test_eof129: cs = 129; goto _test_eof;
	_test_eof130: cs = 130; goto _test_eof;
	_test_eof131: cs = 131; goto _test_eof;
	_test_eof132: cs = 132; goto _test_eof;
	_test_eof133: cs = 133; goto _test_eof;
	_test_eof134: cs = 134; goto _test_eof;
	_test_eof135: cs = 135; goto _test_eof;
	_test_eof136: cs = 136; goto _test_eof;
	_test_eof137: cs = 137; goto _test_eof;
	_test_eof138: cs = 138; goto _test_eof;
	_test_eof139: cs = 139; goto _test_eof;
	_test_eof140: cs = 140; goto _test_eof;
	_test_eof141: cs = 141; goto _test_eof;
	_test_eof142: cs = 142; goto _test_eof;
	_test_eof143: cs = 143; goto _test_eof;
	_test_eof144: cs = 144; goto _test_eof;
	_test_eof145: cs = 145; goto _test_eof;
	_test_eof146: cs = 146; goto _test_eof;
	_test_eof147: cs = 147; goto _test_eof;
	_test_eof148: cs = 148; goto _test_eof;
	_test_eof149: cs = 149; goto _test_eof;
	_test_eof150: cs = 150; goto _test_eof;
	_test_eof151: cs = 151; goto _test_eof;
	_test_eof152: cs = 152; goto _test_eof;
	_test_eof153: cs = 153; goto _test_eof;
	_test_eof154: cs = 154; goto _test_eof;
	_test_eof155: cs = 155; goto _test_eof;
	_test_eof156: cs = 156; goto _test_eof;
	_test_eof157: cs = 157; goto _test_eof;
	_test_eof158: cs = 158; goto _test_eof;
	_test_eof159: cs = 159; goto _test_eof;
	_test_eof160: cs = 160; goto _test_eof;
	_test_eof161: cs = 161; goto _test_eof;
	_test_eof162: cs = 162; goto _test_eof;
	_test_eof163: cs = 163; goto _test_eof;
	_test_eof164: cs = 164; goto _test_eof;
	_test_eof165: cs = 165; goto _test_eof;
	_test_eof166: cs = 166; goto _test_eof;
	_test_eof167: cs = 167; goto _test_eof;
	_test_eof168: cs = 168; goto _test_eof;
	_test_eof169: cs = 169; goto _test_eof;
	_test_eof170: cs = 170; goto _test_eof;
	_test_eof171: cs = 171; goto _test_eof;
	_test_eof172: cs = 172; goto _test_eof;
	_test_eof173: cs = 173; goto _test_eof;
	_test_eof174: cs = 174; goto _test_eof;
	_test_eof175: cs = 175; goto _test_eof;
	_test_eof176: cs = 176; goto _test_eof;
	_test_eof177: cs = 177; goto _test_eof;
	_test_eof178: cs = 178; goto _test_eof;
	_test_eof179: cs = 179; goto _test_eof;
	_test_eof180: cs = 180; goto _test_eof;
	_test_eof181: cs = 181; goto _test_eof;
	_test_eof182: cs = 182; goto _test_eof;
	_test_eof1643: cs = 1643; goto _test_eof;
	_test_eof183: cs = 183; goto _test_eof;
	_test_eof184: cs = 184; goto _test_eof;
	_test_eof185: cs = 185; goto _test_eof;
	_test_eof186: cs = 186; goto _test_eof;
	_test_eof187: cs = 187; goto _test_eof;
	_test_eof188: cs = 188; goto _test_eof;
	_test_eof189: cs = 189; goto _test_eof;
	_test_eof190: cs = 190; goto _test_eof;
	_test_eof191: cs = 191; goto _test_eof;
	_test_eof192: cs = 192; goto _test_eof;
	_test_eof1644: cs = 1644; goto _test_eof;
	_test_eof193: cs = 193; goto _test_eof;
	_test_eof194: cs = 194; goto _test_eof;
	_test_eof195: cs = 195; goto _test_eof;
	_test_eof196: cs = 196; goto _test_eof;
	_test_eof197: cs = 197; goto _test_eof;
	_test_eof198: cs = 198; goto _test_eof;
	_test_eof199: cs = 199; goto _test_eof;
	_test_eof200: cs = 200; goto _test_eof;
	_test_eof1645: cs = 1645; goto _test_eof;
	_test_eof201: cs = 201; goto _test_eof;
	_test_eof202: cs = 202; goto _test_eof;
	_test_eof203: cs = 203; goto _test_eof;
	_test_eof1646: cs = 1646; goto _test_eof;
	_test_eof204: cs = 204; goto _test_eof;
	_test_eof205: cs = 205; goto _test_eof;
	_test_eof206: cs = 206; goto _test_eof;
	_test_eof207: cs = 207; goto _test_eof;
	_test_eof208: cs = 208; goto _test_eof;
	_test_eof209: cs = 209; goto _test_eof;
	_test_eof210: cs = 210; goto _test_eof;
	_test_eof211: cs = 211; goto _test_eof;
	_test_eof212: cs = 212; goto _test_eof;
	_test_eof213: cs = 213; goto _test_eof;
	_test_eof214: cs = 214; goto _test_eof;
	_test_eof1647: cs = 1647; goto _test_eof;
	_test_eof215: cs = 215; goto _test_eof;
	_test_eof216: cs = 216; goto _test_eof;
	_test_eof217: cs = 217; goto _test_eof;
	_test_eof218: cs = 218; goto _test_eof;
	_test_eof1648: cs = 1648; goto _test_eof;
	_test_eof219: cs = 219; goto _test_eof;
	_test_eof220: cs = 220; goto _test_eof;
	_test_eof221: cs = 221; goto _test_eof;
	_test_eof222: cs = 222; goto _test_eof;
	_test_eof223: cs = 223; goto _test_eof;
	_test_eof224: cs = 224; goto _test_eof;
	_test_eof225: cs = 225; goto _test_eof;
	_test_eof226: cs = 226; goto _test_eof;
	_test_eof227: cs = 227; goto _test_eof;
	_test_eof228: cs = 228; goto _test_eof;
	_test_eof229: cs = 229; goto _test_eof;
	_test_eof230: cs = 230; goto _test_eof;
	_test_eof231: cs = 231; goto _test_eof;
	_test_eof232: cs = 232; goto _test_eof;
	_test_eof233: cs = 233; goto _test_eof;
	_test_eof234: cs = 234; goto _test_eof;
	_test_eof235: cs = 235; goto _test_eof;
	_test_eof236: cs = 236; goto _test_eof;
	_test_eof237: cs = 237; goto _test_eof;
	_test_eof1649: cs = 1649; goto _test_eof;
	_test_eof238: cs = 238; goto _test_eof;
	_test_eof239: cs = 239; goto _test_eof;
	_test_eof240: cs = 240; goto _test_eof;
	_test_eof241: cs = 241; goto _test_eof;
	_test_eof242: cs = 242; goto _test_eof;
	_test_eof243: cs = 243; goto _test_eof;
	_test_eof244: cs = 244; goto _test_eof;
	_test_eof245: cs = 245; goto _test_eof;
	_test_eof246: cs = 246; goto _test_eof;
	_test_eof247: cs = 247; goto _test_eof;
	_test_eof248: cs = 248; goto _test_eof;
	_test_eof249: cs = 249; goto _test_eof;
	_test_eof250: cs = 250; goto _test_eof;
	_test_eof251: cs = 251; goto _test_eof;
	_test_eof252: cs = 252; goto _test_eof;
	_test_eof253: cs = 253; goto _test_eof;
	_test_eof1650: cs = 1650; goto _test_eof;
	_test_eof254: cs = 254; goto _test_eof;
	_test_eof255: cs = 255; goto _test_eof;
	_test_eof256: cs = 256; goto _test_eof;
	_test_eof257: cs = 257; goto _test_eof;
	_test_eof258: cs = 258; goto _test_eof;
	_test_eof259: cs = 259; goto _test_eof;
	_test_eof260: cs = 260; goto _test_eof;
	_test_eof261: cs = 261; goto _test_eof;
	_test_eof262: cs = 262; goto _test_eof;
	_test_eof263: cs = 263; goto _test_eof;
	_test_eof264: cs = 264; goto _test_eof;
	_test_eof265: cs = 265; goto _test_eof;
	_test_eof266: cs = 266; goto _test_eof;
	_test_eof267: cs = 267; goto _test_eof;
	_test_eof268: cs = 268; goto _test_eof;
	_test_eof269: cs = 269; goto _test_eof;
	_test_eof270: cs = 270; goto _test_eof;
	_test_eof271: cs = 271; goto _test_eof;
	_test_eof272: cs = 272; goto _test_eof;
	_test_eof273: cs = 273; goto _test_eof;
	_test_eof274: cs = 274; goto _test_eof;
	_test_eof275: cs = 275; goto _test_eof;
	_test_eof276: cs = 276; goto _test_eof;
	_test_eof277: cs = 277; goto _test_eof;
	_test_eof278: cs = 278; goto _test_eof;
	_test_eof279: cs = 279; goto _test_eof;
	_test_eof280: cs = 280; goto _test_eof;
	_test_eof281: cs = 281; goto _test_eof;
	_test_eof282: cs = 282; goto _test_eof;
	_test_eof283: cs = 283; goto _test_eof;
	_test_eof284: cs = 284; goto _test_eof;
	_test_eof285: cs = 285; goto _test_eof;
	_test_eof286: cs = 286; goto _test_eof;
	_test_eof287: cs = 287; goto _test_eof;
	_test_eof288: cs = 288; goto _test_eof;
	_test_eof289: cs = 289; goto _test_eof;
	_test_eof290: cs = 290; goto _test_eof;
	_test_eof291: cs = 291; goto _test_eof;
	_test_eof292: cs = 292; goto _test_eof;
	_test_eof293: cs = 293; goto _test_eof;
	_test_eof294: cs = 294; goto _test_eof;
	_test_eof295: cs = 295; goto _test_eof;
	_test_eof296: cs = 296; goto _test_eof;
	_test_eof297: cs = 297; goto _test_eof;
	_test_eof298: cs = 298; goto _test_eof;
	_test_eof299: cs = 299; goto _test_eof;
	_test_eof300: cs = 300; goto _test_eof;
	_test_eof301: cs = 301; goto _test_eof;
	_test_eof302: cs = 302; goto _test_eof;
	_test_eof303: cs = 303; goto _test_eof;
	_test_eof304: cs = 304; goto _test_eof;
	_test_eof305: cs = 305; goto _test_eof;
	_test_eof306: cs = 306; goto _test_eof;
	_test_eof307: cs = 307; goto _test_eof;
	_test_eof308: cs = 308; goto _test_eof;
	_test_eof309: cs = 309; goto _test_eof;
	_test_eof310: cs = 310; goto _test_eof;
	_test_eof311: cs = 311; goto _test_eof;
	_test_eof312: cs = 312; goto _test_eof;
	_test_eof313: cs = 313; goto _test_eof;
	_test_eof314: cs = 314; goto _test_eof;
	_test_eof315: cs = 315; goto _test_eof;
	_test_eof316: cs = 316; goto _test_eof;
	_test_eof317: cs = 317; goto _test_eof;
	_test_eof318: cs = 318; goto _test_eof;
	_test_eof1651: cs = 1651; goto _test_eof;
	_test_eof319: cs = 319; goto _test_eof;
	_test_eof320: cs = 320; goto _test_eof;
	_test_eof1652: cs = 1652; goto _test_eof;
	_test_eof321: cs = 321; goto _test_eof;
	_test_eof322: cs = 322; goto _test_eof;
	_test_eof1653: cs = 1653; goto _test_eof;
	_test_eof323: cs = 323; goto _test_eof;
	_test_eof324: cs = 324; goto _test_eof;
	_test_eof325: cs = 325; goto _test_eof;
	_test_eof326: cs = 326; goto _test_eof;
	_test_eof327: cs = 327; goto _test_eof;
	_test_eof328: cs = 328; goto _test_eof;
	_test_eof329: cs = 329; goto _test_eof;
	_test_eof330: cs = 330; goto _test_eof;
	_test_eof331: cs = 331; goto _test_eof;
	_test_eof1654: cs = 1654; goto _test_eof;
	_test_eof1655: cs = 1655; goto _test_eof;
	_test_eof332: cs = 332; goto _test_eof;
	_test_eof333: cs = 333; goto _test_eof;
	_test_eof334: cs = 334; goto _test_eof;
	_test_eof335: cs = 335; goto _test_eof;
	_test_eof336: cs = 336; goto _test_eof;
	_test_eof337: cs = 337; goto _test_eof;
	_test_eof338: cs = 338; goto _test_eof;
	_test_eof339: cs = 339; goto _test_eof;
	_test_eof340: cs = 340; goto _test_eof;
	_test_eof341: cs = 341; goto _test_eof;
	_test_eof342: cs = 342; goto _test_eof;
	_test_eof343: cs = 343; goto _test_eof;
	_test_eof344: cs = 344; goto _test_eof;
	_test_eof345: cs = 345; goto _test_eof;
	_test_eof346: cs = 346; goto _test_eof;
	_test_eof1656: cs = 1656; goto _test_eof;
	_test_eof347: cs = 347; goto _test_eof;
	_test_eof348: cs = 348; goto _test_eof;
	_test_eof349: cs = 349; goto _test_eof;
	_test_eof350: cs = 350; goto _test_eof;
	_test_eof351: cs = 351; goto _test_eof;
	_test_eof352: cs = 352; goto _test_eof;
	_test_eof353: cs = 353; goto _test_eof;
	_test_eof354: cs = 354; goto _test_eof;
	_test_eof355: cs = 355; goto _test_eof;
	_test_eof356: cs = 356; goto _test_eof;
	_test_eof1657: cs = 1657; goto _test_eof;
	_test_eof357: cs = 357; goto _test_eof;
	_test_eof358: cs = 358; goto _test_eof;
	_test_eof359: cs = 359; goto _test_eof;
	_test_eof360: cs = 360; goto _test_eof;
	_test_eof361: cs = 361; goto _test_eof;
	_test_eof362: cs = 362; goto _test_eof;
	_test_eof363: cs = 363; goto _test_eof;
	_test_eof364: cs = 364; goto _test_eof;
	_test_eof365: cs = 365; goto _test_eof;
	_test_eof366: cs = 366; goto _test_eof;
	_test_eof367: cs = 367; goto _test_eof;
	_test_eof368: cs = 368; goto _test_eof;
	_test_eof369: cs = 369; goto _test_eof;
	_test_eof370: cs = 370; goto _test_eof;
	_test_eof1658: cs = 1658; goto _test_eof;
	_test_eof371: cs = 371; goto _test_eof;
	_test_eof372: cs = 372; goto _test_eof;
	_test_eof373: cs = 373; goto _test_eof;
	_test_eof374: cs = 374; goto _test_eof;
	_test_eof375: cs = 375; goto _test_eof;
	_test_eof376: cs = 376; goto _test_eof;
	_test_eof377: cs = 377; goto _test_eof;
	_test_eof1659: cs = 1659; goto _test_eof;
	_test_eof378: cs = 378; goto _test_eof;
	_test_eof379: cs = 379; goto _test_eof;
	_test_eof380: cs = 380; goto _test_eof;
	_test_eof381: cs = 381; goto _test_eof;
	_test_eof382: cs = 382; goto _test_eof;
	_test_eof383: cs = 383; goto _test_eof;
	_test_eof384: cs = 384; goto _test_eof;
	_test_eof385: cs = 385; goto _test_eof;
	_test_eof386: cs = 386; goto _test_eof;
	_test_eof1660: cs = 1660; goto _test_eof;
	_test_eof1661: cs = 1661; goto _test_eof;
	_test_eof1662: cs = 1662; goto _test_eof;
	_test_eof387: cs = 387; goto _test_eof;
	_test_eof388: cs = 388; goto _test_eof;
	_test_eof389: cs = 389; goto _test_eof;
	_test_eof390: cs = 390; goto _test_eof;
	_test_eof391: cs = 391; goto _test_eof;
	_test_eof392: cs = 392; goto _test_eof;
	_test_eof393: cs = 393; goto _test_eof;
	_test_eof394: cs = 394; goto _test_eof;
	_test_eof1663: cs = 1663; goto _test_eof;
	_test_eof1664: cs = 1664; goto _test_eof;
	_test_eof395: cs = 395; goto _test_eof;
	_test_eof396: cs = 396; goto _test_eof;
	_test_eof397: cs = 397; goto _test_eof;
	_test_eof1665: cs = 1665; goto _test_eof;
	_test_eof398: cs = 398; goto _test_eof;
	_test_eof399: cs = 399; goto _test_eof;
	_test_eof400: cs = 400; goto _test_eof;
	_test_eof401: cs = 401; goto _test_eof;
	_test_eof402: cs = 402; goto _test_eof;
	_test_eof403: cs = 403; goto _test_eof;
	_test_eof404: cs = 404; goto _test_eof;
	_test_eof405: cs = 405; goto _test_eof;
	_test_eof406: cs = 406; goto _test_eof;
	_test_eof407: cs = 407; goto _test_eof;
	_test_eof408: cs = 408; goto _test_eof;
	_test_eof409: cs = 409; goto _test_eof;
	_test_eof410: cs = 410; goto _test_eof;
	_test_eof411: cs = 411; goto _test_eof;
	_test_eof412: cs = 412; goto _test_eof;
	_test_eof413: cs = 413; goto _test_eof;
	_test_eof414: cs = 414; goto _test_eof;
	_test_eof415: cs = 415; goto _test_eof;
	_test_eof416: cs = 416; goto _test_eof;
	_test_eof417: cs = 417; goto _test_eof;
	_test_eof418: cs = 418; goto _test_eof;
	_test_eof419: cs = 419; goto _test_eof;
	_test_eof420: cs = 420; goto _test_eof;
	_test_eof421: cs = 421; goto _test_eof;
	_test_eof422: cs = 422; goto _test_eof;
	_test_eof423: cs = 423; goto _test_eof;
	_test_eof424: cs = 424; goto _test_eof;
	_test_eof425: cs = 425; goto _test_eof;
	_test_eof426: cs = 426; goto _test_eof;
	_test_eof427: cs = 427; goto _test_eof;
	_test_eof428: cs = 428; goto _test_eof;
	_test_eof429: cs = 429; goto _test_eof;
	_test_eof430: cs = 430; goto _test_eof;
	_test_eof431: cs = 431; goto _test_eof;
	_test_eof432: cs = 432; goto _test_eof;
	_test_eof433: cs = 433; goto _test_eof;
	_test_eof434: cs = 434; goto _test_eof;
	_test_eof435: cs = 435; goto _test_eof;
	_test_eof436: cs = 436; goto _test_eof;
	_test_eof437: cs = 437; goto _test_eof;
	_test_eof438: cs = 438; goto _test_eof;
	_test_eof439: cs = 439; goto _test_eof;
	_test_eof440: cs = 440; goto _test_eof;
	_test_eof441: cs = 441; goto _test_eof;
	_test_eof442: cs = 442; goto _test_eof;
	_test_eof443: cs = 443; goto _test_eof;
	_test_eof444: cs = 444; goto _test_eof;
	_test_eof445: cs = 445; goto _test_eof;
	_test_eof446: cs = 446; goto _test_eof;
	_test_eof447: cs = 447; goto _test_eof;
	_test_eof448: cs = 448; goto _test_eof;
	_test_eof449: cs = 449; goto _test_eof;
	_test_eof450: cs = 450; goto _test_eof;
	_test_eof451: cs = 451; goto _test_eof;
	_test_eof452: cs = 452; goto _test_eof;
	_test_eof453: cs = 453; goto _test_eof;
	_test_eof454: cs = 454; goto _test_eof;
	_test_eof455: cs = 455; goto _test_eof;
	_test_eof456: cs = 456; goto _test_eof;
	_test_eof457: cs = 457; goto _test_eof;
	_test_eof458: cs = 458; goto _test_eof;
	_test_eof459: cs = 459; goto _test_eof;
	_test_eof460: cs = 460; goto _test_eof;
	_test_eof461: cs = 461; goto _test_eof;
	_test_eof462: cs = 462; goto _test_eof;
	_test_eof463: cs = 463; goto _test_eof;
	_test_eof464: cs = 464; goto _test_eof;
	_test_eof465: cs = 465; goto _test_eof;
	_test_eof466: cs = 466; goto _test_eof;
	_test_eof467: cs = 467; goto _test_eof;
	_test_eof468: cs = 468; goto _test_eof;
	_test_eof469: cs = 469; goto _test_eof;
	_test_eof470: cs = 470; goto _test_eof;
	_test_eof471: cs = 471; goto _test_eof;
	_test_eof472: cs = 472; goto _test_eof;
	_test_eof473: cs = 473; goto _test_eof;
	_test_eof474: cs = 474; goto _test_eof;
	_test_eof475: cs = 475; goto _test_eof;
	_test_eof476: cs = 476; goto _test_eof;
	_test_eof477: cs = 477; goto _test_eof;
	_test_eof478: cs = 478; goto _test_eof;
	_test_eof479: cs = 479; goto _test_eof;
	_test_eof480: cs = 480; goto _test_eof;
	_test_eof481: cs = 481; goto _test_eof;
	_test_eof482: cs = 482; goto _test_eof;
	_test_eof483: cs = 483; goto _test_eof;
	_test_eof484: cs = 484; goto _test_eof;
	_test_eof485: cs = 485; goto _test_eof;
	_test_eof486: cs = 486; goto _test_eof;
	_test_eof487: cs = 487; goto _test_eof;
	_test_eof488: cs = 488; goto _test_eof;
	_test_eof489: cs = 489; goto _test_eof;
	_test_eof490: cs = 490; goto _test_eof;
	_test_eof491: cs = 491; goto _test_eof;
	_test_eof492: cs = 492; goto _test_eof;
	_test_eof493: cs = 493; goto _test_eof;
	_test_eof494: cs = 494; goto _test_eof;
	_test_eof495: cs = 495; goto _test_eof;
	_test_eof496: cs = 496; goto _test_eof;
	_test_eof497: cs = 497; goto _test_eof;
	_test_eof498: cs = 498; goto _test_eof;
	_test_eof499: cs = 499; goto _test_eof;
	_test_eof500: cs = 500; goto _test_eof;
	_test_eof501: cs = 501; goto _test_eof;
	_test_eof502: cs = 502; goto _test_eof;
	_test_eof503: cs = 503; goto _test_eof;
	_test_eof504: cs = 504; goto _test_eof;
	_test_eof505: cs = 505; goto _test_eof;
	_test_eof506: cs = 506; goto _test_eof;
	_test_eof507: cs = 507; goto _test_eof;
	_test_eof508: cs = 508; goto _test_eof;
	_test_eof509: cs = 509; goto _test_eof;
	_test_eof510: cs = 510; goto _test_eof;
	_test_eof511: cs = 511; goto _test_eof;
	_test_eof512: cs = 512; goto _test_eof;
	_test_eof513: cs = 513; goto _test_eof;
	_test_eof514: cs = 514; goto _test_eof;
	_test_eof515: cs = 515; goto _test_eof;
	_test_eof516: cs = 516; goto _test_eof;
	_test_eof517: cs = 517; goto _test_eof;
	_test_eof518: cs = 518; goto _test_eof;
	_test_eof519: cs = 519; goto _test_eof;
	_test_eof520: cs = 520; goto _test_eof;
	_test_eof521: cs = 521; goto _test_eof;
	_test_eof522: cs = 522; goto _test_eof;
	_test_eof523: cs = 523; goto _test_eof;
	_test_eof524: cs = 524; goto _test_eof;
	_test_eof525: cs = 525; goto _test_eof;
	_test_eof526: cs = 526; goto _test_eof;
	_test_eof527: cs = 527; goto _test_eof;
	_test_eof528: cs = 528; goto _test_eof;
	_test_eof529: cs = 529; goto _test_eof;
	_test_eof530: cs = 530; goto _test_eof;
	_test_eof531: cs = 531; goto _test_eof;
	_test_eof532: cs = 532; goto _test_eof;
	_test_eof533: cs = 533; goto _test_eof;
	_test_eof534: cs = 534; goto _test_eof;
	_test_eof535: cs = 535; goto _test_eof;
	_test_eof536: cs = 536; goto _test_eof;
	_test_eof537: cs = 537; goto _test_eof;
	_test_eof538: cs = 538; goto _test_eof;
	_test_eof539: cs = 539; goto _test_eof;
	_test_eof540: cs = 540; goto _test_eof;
	_test_eof541: cs = 541; goto _test_eof;
	_test_eof542: cs = 542; goto _test_eof;
	_test_eof543: cs = 543; goto _test_eof;
	_test_eof544: cs = 544; goto _test_eof;
	_test_eof545: cs = 545; goto _test_eof;
	_test_eof546: cs = 546; goto _test_eof;
	_test_eof547: cs = 547; goto _test_eof;
	_test_eof548: cs = 548; goto _test_eof;
	_test_eof549: cs = 549; goto _test_eof;
	_test_eof550: cs = 550; goto _test_eof;
	_test_eof551: cs = 551; goto _test_eof;
	_test_eof552: cs = 552; goto _test_eof;
	_test_eof553: cs = 553; goto _test_eof;
	_test_eof554: cs = 554; goto _test_eof;
	_test_eof555: cs = 555; goto _test_eof;
	_test_eof556: cs = 556; goto _test_eof;
	_test_eof557: cs = 557; goto _test_eof;
	_test_eof558: cs = 558; goto _test_eof;
	_test_eof559: cs = 559; goto _test_eof;
	_test_eof560: cs = 560; goto _test_eof;
	_test_eof561: cs = 561; goto _test_eof;
	_test_eof562: cs = 562; goto _test_eof;
	_test_eof563: cs = 563; goto _test_eof;
	_test_eof564: cs = 564; goto _test_eof;
	_test_eof565: cs = 565; goto _test_eof;
	_test_eof566: cs = 566; goto _test_eof;
	_test_eof567: cs = 567; goto _test_eof;
	_test_eof1666: cs = 1666; goto _test_eof;
	_test_eof1667: cs = 1667; goto _test_eof;
	_test_eof1668: cs = 1668; goto _test_eof;
	_test_eof568: cs = 568; goto _test_eof;
	_test_eof569: cs = 569; goto _test_eof;
	_test_eof570: cs = 570; goto _test_eof;
	_test_eof571: cs = 571; goto _test_eof;
	_test_eof572: cs = 572; goto _test_eof;
	_test_eof1669: cs = 1669; goto _test_eof;
	_test_eof573: cs = 573; goto _test_eof;
	_test_eof574: cs = 574; goto _test_eof;
	_test_eof575: cs = 575; goto _test_eof;
	_test_eof576: cs = 576; goto _test_eof;
	_test_eof1670: cs = 1670; goto _test_eof;
	_test_eof1671: cs = 1671; goto _test_eof;
	_test_eof1672: cs = 1672; goto _test_eof;
	_test_eof577: cs = 577; goto _test_eof;
	_test_eof578: cs = 578; goto _test_eof;
	_test_eof1673: cs = 1673; goto _test_eof;
	_test_eof579: cs = 579; goto _test_eof;
	_test_eof580: cs = 580; goto _test_eof;
	_test_eof581: cs = 581; goto _test_eof;
	_test_eof582: cs = 582; goto _test_eof;
	_test_eof583: cs = 583; goto _test_eof;
	_test_eof584: cs = 584; goto _test_eof;
	_test_eof1674: cs = 1674; goto _test_eof;
	_test_eof585: cs = 585; goto _test_eof;
	_test_eof586: cs = 586; goto _test_eof;
	_test_eof587: cs = 587; goto _test_eof;
	_test_eof588: cs = 588; goto _test_eof;
	_test_eof589: cs = 589; goto _test_eof;
	_test_eof590: cs = 590; goto _test_eof;
	_test_eof591: cs = 591; goto _test_eof;
	_test_eof592: cs = 592; goto _test_eof;
	_test_eof593: cs = 593; goto _test_eof;
	_test_eof594: cs = 594; goto _test_eof;
	_test_eof595: cs = 595; goto _test_eof;
	_test_eof596: cs = 596; goto _test_eof;
	_test_eof597: cs = 597; goto _test_eof;
	_test_eof598: cs = 598; goto _test_eof;
	_test_eof599: cs = 599; goto _test_eof;
	_test_eof600: cs = 600; goto _test_eof;
	_test_eof601: cs = 601; goto _test_eof;
	_test_eof602: cs = 602; goto _test_eof;
	_test_eof603: cs = 603; goto _test_eof;
	_test_eof604: cs = 604; goto _test_eof;
	_test_eof605: cs = 605; goto _test_eof;
	_test_eof606: cs = 606; goto _test_eof;
	_test_eof607: cs = 607; goto _test_eof;
	_test_eof608: cs = 608; goto _test_eof;
	_test_eof609: cs = 609; goto _test_eof;
	_test_eof610: cs = 610; goto _test_eof;
	_test_eof611: cs = 611; goto _test_eof;
	_test_eof612: cs = 612; goto _test_eof;
	_test_eof613: cs = 613; goto _test_eof;
	_test_eof614: cs = 614; goto _test_eof;
	_test_eof615: cs = 615; goto _test_eof;
	_test_eof616: cs = 616; goto _test_eof;
	_test_eof617: cs = 617; goto _test_eof;
	_test_eof618: cs = 618; goto _test_eof;
	_test_eof619: cs = 619; goto _test_eof;
	_test_eof620: cs = 620; goto _test_eof;
	_test_eof621: cs = 621; goto _test_eof;
	_test_eof622: cs = 622; goto _test_eof;
	_test_eof623: cs = 623; goto _test_eof;
	_test_eof624: cs = 624; goto _test_eof;
	_test_eof625: cs = 625; goto _test_eof;
	_test_eof626: cs = 626; goto _test_eof;
	_test_eof627: cs = 627; goto _test_eof;
	_test_eof628: cs = 628; goto _test_eof;
	_test_eof629: cs = 629; goto _test_eof;
	_test_eof630: cs = 630; goto _test_eof;
	_test_eof631: cs = 631; goto _test_eof;
	_test_eof632: cs = 632; goto _test_eof;
	_test_eof633: cs = 633; goto _test_eof;
	_test_eof634: cs = 634; goto _test_eof;
	_test_eof635: cs = 635; goto _test_eof;
	_test_eof636: cs = 636; goto _test_eof;
	_test_eof637: cs = 637; goto _test_eof;
	_test_eof638: cs = 638; goto _test_eof;
	_test_eof639: cs = 639; goto _test_eof;
	_test_eof640: cs = 640; goto _test_eof;
	_test_eof641: cs = 641; goto _test_eof;
	_test_eof642: cs = 642; goto _test_eof;
	_test_eof643: cs = 643; goto _test_eof;
	_test_eof644: cs = 644; goto _test_eof;
	_test_eof1675: cs = 1675; goto _test_eof;
	_test_eof1676: cs = 1676; goto _test_eof;
	_test_eof645: cs = 645; goto _test_eof;
	_test_eof646: cs = 646; goto _test_eof;
	_test_eof647: cs = 647; goto _test_eof;
	_test_eof648: cs = 648; goto _test_eof;
	_test_eof649: cs = 649; goto _test_eof;
	_test_eof650: cs = 650; goto _test_eof;
	_test_eof651: cs = 651; goto _test_eof;
	_test_eof652: cs = 652; goto _test_eof;
	_test_eof653: cs = 653; goto _test_eof;
	_test_eof1677: cs = 1677; goto _test_eof;
	_test_eof654: cs = 654; goto _test_eof;
	_test_eof655: cs = 655; goto _test_eof;
	_test_eof656: cs = 656; goto _test_eof;
	_test_eof657: cs = 657; goto _test_eof;
	_test_eof658: cs = 658; goto _test_eof;
	_test_eof659: cs = 659; goto _test_eof;
	_test_eof660: cs = 660; goto _test_eof;
	_test_eof661: cs = 661; goto _test_eof;
	_test_eof662: cs = 662; goto _test_eof;
	_test_eof663: cs = 663; goto _test_eof;
	_test_eof664: cs = 664; goto _test_eof;
	_test_eof665: cs = 665; goto _test_eof;
	_test_eof666: cs = 666; goto _test_eof;
	_test_eof667: cs = 667; goto _test_eof;
	_test_eof668: cs = 668; goto _test_eof;
	_test_eof669: cs = 669; goto _test_eof;
	_test_eof670: cs = 670; goto _test_eof;
	_test_eof671: cs = 671; goto _test_eof;
	_test_eof672: cs = 672; goto _test_eof;
	_test_eof673: cs = 673; goto _test_eof;
	_test_eof674: cs = 674; goto _test_eof;
	_test_eof675: cs = 675; goto _test_eof;
	_test_eof676: cs = 676; goto _test_eof;
	_test_eof677: cs = 677; goto _test_eof;
	_test_eof678: cs = 678; goto _test_eof;
	_test_eof679: cs = 679; goto _test_eof;
	_test_eof680: cs = 680; goto _test_eof;
	_test_eof681: cs = 681; goto _test_eof;
	_test_eof682: cs = 682; goto _test_eof;
	_test_eof683: cs = 683; goto _test_eof;
	_test_eof684: cs = 684; goto _test_eof;
	_test_eof685: cs = 685; goto _test_eof;
	_test_eof686: cs = 686; goto _test_eof;
	_test_eof687: cs = 687; goto _test_eof;
	_test_eof688: cs = 688; goto _test_eof;
	_test_eof689: cs = 689; goto _test_eof;
	_test_eof690: cs = 690; goto _test_eof;
	_test_eof691: cs = 691; goto _test_eof;
	_test_eof692: cs = 692; goto _test_eof;
	_test_eof693: cs = 693; goto _test_eof;
	_test_eof694: cs = 694; goto _test_eof;
	_test_eof695: cs = 695; goto _test_eof;
	_test_eof696: cs = 696; goto _test_eof;
	_test_eof697: cs = 697; goto _test_eof;
	_test_eof698: cs = 698; goto _test_eof;
	_test_eof699: cs = 699; goto _test_eof;
	_test_eof700: cs = 700; goto _test_eof;
	_test_eof701: cs = 701; goto _test_eof;
	_test_eof702: cs = 702; goto _test_eof;
	_test_eof703: cs = 703; goto _test_eof;
	_test_eof704: cs = 704; goto _test_eof;
	_test_eof705: cs = 705; goto _test_eof;
	_test_eof706: cs = 706; goto _test_eof;
	_test_eof707: cs = 707; goto _test_eof;
	_test_eof708: cs = 708; goto _test_eof;
	_test_eof709: cs = 709; goto _test_eof;
	_test_eof710: cs = 710; goto _test_eof;
	_test_eof711: cs = 711; goto _test_eof;
	_test_eof712: cs = 712; goto _test_eof;
	_test_eof713: cs = 713; goto _test_eof;
	_test_eof714: cs = 714; goto _test_eof;
	_test_eof715: cs = 715; goto _test_eof;
	_test_eof716: cs = 716; goto _test_eof;
	_test_eof717: cs = 717; goto _test_eof;
	_test_eof718: cs = 718; goto _test_eof;
	_test_eof719: cs = 719; goto _test_eof;
	_test_eof720: cs = 720; goto _test_eof;
	_test_eof721: cs = 721; goto _test_eof;
	_test_eof722: cs = 722; goto _test_eof;
	_test_eof723: cs = 723; goto _test_eof;
	_test_eof724: cs = 724; goto _test_eof;
	_test_eof725: cs = 725; goto _test_eof;
	_test_eof726: cs = 726; goto _test_eof;
	_test_eof727: cs = 727; goto _test_eof;
	_test_eof728: cs = 728; goto _test_eof;
	_test_eof729: cs = 729; goto _test_eof;
	_test_eof730: cs = 730; goto _test_eof;
	_test_eof731: cs = 731; goto _test_eof;
	_test_eof732: cs = 732; goto _test_eof;
	_test_eof733: cs = 733; goto _test_eof;
	_test_eof734: cs = 734; goto _test_eof;
	_test_eof735: cs = 735; goto _test_eof;
	_test_eof736: cs = 736; goto _test_eof;
	_test_eof737: cs = 737; goto _test_eof;
	_test_eof738: cs = 738; goto _test_eof;
	_test_eof739: cs = 739; goto _test_eof;
	_test_eof740: cs = 740; goto _test_eof;
	_test_eof741: cs = 741; goto _test_eof;
	_test_eof742: cs = 742; goto _test_eof;
	_test_eof743: cs = 743; goto _test_eof;
	_test_eof744: cs = 744; goto _test_eof;
	_test_eof745: cs = 745; goto _test_eof;
	_test_eof746: cs = 746; goto _test_eof;
	_test_eof747: cs = 747; goto _test_eof;
	_test_eof748: cs = 748; goto _test_eof;
	_test_eof1678: cs = 1678; goto _test_eof;
	_test_eof749: cs = 749; goto _test_eof;
	_test_eof750: cs = 750; goto _test_eof;
	_test_eof751: cs = 751; goto _test_eof;
	_test_eof752: cs = 752; goto _test_eof;
	_test_eof753: cs = 753; goto _test_eof;
	_test_eof754: cs = 754; goto _test_eof;
	_test_eof755: cs = 755; goto _test_eof;
	_test_eof756: cs = 756; goto _test_eof;
	_test_eof757: cs = 757; goto _test_eof;
	_test_eof758: cs = 758; goto _test_eof;
	_test_eof759: cs = 759; goto _test_eof;
	_test_eof760: cs = 760; goto _test_eof;
	_test_eof761: cs = 761; goto _test_eof;
	_test_eof762: cs = 762; goto _test_eof;
	_test_eof763: cs = 763; goto _test_eof;
	_test_eof764: cs = 764; goto _test_eof;
	_test_eof765: cs = 765; goto _test_eof;
	_test_eof766: cs = 766; goto _test_eof;
	_test_eof767: cs = 767; goto _test_eof;
	_test_eof768: cs = 768; goto _test_eof;
	_test_eof769: cs = 769; goto _test_eof;
	_test_eof770: cs = 770; goto _test_eof;
	_test_eof771: cs = 771; goto _test_eof;
	_test_eof772: cs = 772; goto _test_eof;
	_test_eof773: cs = 773; goto _test_eof;
	_test_eof774: cs = 774; goto _test_eof;
	_test_eof775: cs = 775; goto _test_eof;
	_test_eof776: cs = 776; goto _test_eof;
	_test_eof777: cs = 777; goto _test_eof;
	_test_eof778: cs = 778; goto _test_eof;
	_test_eof779: cs = 779; goto _test_eof;
	_test_eof780: cs = 780; goto _test_eof;
	_test_eof781: cs = 781; goto _test_eof;
	_test_eof782: cs = 782; goto _test_eof;
	_test_eof783: cs = 783; goto _test_eof;
	_test_eof784: cs = 784; goto _test_eof;
	_test_eof785: cs = 785; goto _test_eof;
	_test_eof786: cs = 786; goto _test_eof;
	_test_eof787: cs = 787; goto _test_eof;
	_test_eof788: cs = 788; goto _test_eof;
	_test_eof789: cs = 789; goto _test_eof;
	_test_eof790: cs = 790; goto _test_eof;
	_test_eof791: cs = 791; goto _test_eof;
	_test_eof792: cs = 792; goto _test_eof;
	_test_eof793: cs = 793; goto _test_eof;
	_test_eof794: cs = 794; goto _test_eof;
	_test_eof795: cs = 795; goto _test_eof;
	_test_eof796: cs = 796; goto _test_eof;
	_test_eof797: cs = 797; goto _test_eof;
	_test_eof798: cs = 798; goto _test_eof;
	_test_eof799: cs = 799; goto _test_eof;
	_test_eof800: cs = 800; goto _test_eof;
	_test_eof801: cs = 801; goto _test_eof;
	_test_eof802: cs = 802; goto _test_eof;
	_test_eof803: cs = 803; goto _test_eof;
	_test_eof804: cs = 804; goto _test_eof;
	_test_eof805: cs = 805; goto _test_eof;
	_test_eof806: cs = 806; goto _test_eof;
	_test_eof807: cs = 807; goto _test_eof;
	_test_eof808: cs = 808; goto _test_eof;
	_test_eof809: cs = 809; goto _test_eof;
	_test_eof810: cs = 810; goto _test_eof;
	_test_eof811: cs = 811; goto _test_eof;
	_test_eof812: cs = 812; goto _test_eof;
	_test_eof813: cs = 813; goto _test_eof;
	_test_eof814: cs = 814; goto _test_eof;
	_test_eof815: cs = 815; goto _test_eof;
	_test_eof816: cs = 816; goto _test_eof;
	_test_eof817: cs = 817; goto _test_eof;
	_test_eof818: cs = 818; goto _test_eof;
	_test_eof819: cs = 819; goto _test_eof;
	_test_eof820: cs = 820; goto _test_eof;
	_test_eof821: cs = 821; goto _test_eof;
	_test_eof822: cs = 822; goto _test_eof;
	_test_eof823: cs = 823; goto _test_eof;
	_test_eof824: cs = 824; goto _test_eof;
	_test_eof825: cs = 825; goto _test_eof;
	_test_eof826: cs = 826; goto _test_eof;
	_test_eof827: cs = 827; goto _test_eof;
	_test_eof828: cs = 828; goto _test_eof;
	_test_eof829: cs = 829; goto _test_eof;
	_test_eof830: cs = 830; goto _test_eof;
	_test_eof831: cs = 831; goto _test_eof;
	_test_eof832: cs = 832; goto _test_eof;
	_test_eof833: cs = 833; goto _test_eof;
	_test_eof834: cs = 834; goto _test_eof;
	_test_eof835: cs = 835; goto _test_eof;
	_test_eof836: cs = 836; goto _test_eof;
	_test_eof837: cs = 837; goto _test_eof;
	_test_eof838: cs = 838; goto _test_eof;
	_test_eof839: cs = 839; goto _test_eof;
	_test_eof840: cs = 840; goto _test_eof;
	_test_eof841: cs = 841; goto _test_eof;
	_test_eof842: cs = 842; goto _test_eof;
	_test_eof843: cs = 843; goto _test_eof;
	_test_eof844: cs = 844; goto _test_eof;
	_test_eof845: cs = 845; goto _test_eof;
	_test_eof846: cs = 846; goto _test_eof;
	_test_eof847: cs = 847; goto _test_eof;
	_test_eof848: cs = 848; goto _test_eof;
	_test_eof849: cs = 849; goto _test_eof;
	_test_eof850: cs = 850; goto _test_eof;
	_test_eof851: cs = 851; goto _test_eof;
	_test_eof852: cs = 852; goto _test_eof;
	_test_eof1679: cs = 1679; goto _test_eof;
	_test_eof853: cs = 853; goto _test_eof;
	_test_eof854: cs = 854; goto _test_eof;
	_test_eof855: cs = 855; goto _test_eof;
	_test_eof856: cs = 856; goto _test_eof;
	_test_eof857: cs = 857; goto _test_eof;
	_test_eof858: cs = 858; goto _test_eof;
	_test_eof859: cs = 859; goto _test_eof;
	_test_eof860: cs = 860; goto _test_eof;
	_test_eof861: cs = 861; goto _test_eof;
	_test_eof862: cs = 862; goto _test_eof;
	_test_eof863: cs = 863; goto _test_eof;
	_test_eof864: cs = 864; goto _test_eof;
	_test_eof865: cs = 865; goto _test_eof;
	_test_eof866: cs = 866; goto _test_eof;
	_test_eof867: cs = 867; goto _test_eof;
	_test_eof868: cs = 868; goto _test_eof;
	_test_eof869: cs = 869; goto _test_eof;
	_test_eof870: cs = 870; goto _test_eof;
	_test_eof871: cs = 871; goto _test_eof;
	_test_eof872: cs = 872; goto _test_eof;
	_test_eof873: cs = 873; goto _test_eof;
	_test_eof874: cs = 874; goto _test_eof;
	_test_eof875: cs = 875; goto _test_eof;
	_test_eof876: cs = 876; goto _test_eof;
	_test_eof877: cs = 877; goto _test_eof;
	_test_eof878: cs = 878; goto _test_eof;
	_test_eof879: cs = 879; goto _test_eof;
	_test_eof880: cs = 880; goto _test_eof;
	_test_eof881: cs = 881; goto _test_eof;
	_test_eof882: cs = 882; goto _test_eof;
	_test_eof883: cs = 883; goto _test_eof;
	_test_eof884: cs = 884; goto _test_eof;
	_test_eof885: cs = 885; goto _test_eof;
	_test_eof886: cs = 886; goto _test_eof;
	_test_eof887: cs = 887; goto _test_eof;
	_test_eof888: cs = 888; goto _test_eof;
	_test_eof889: cs = 889; goto _test_eof;
	_test_eof890: cs = 890; goto _test_eof;
	_test_eof891: cs = 891; goto _test_eof;
	_test_eof892: cs = 892; goto _test_eof;
	_test_eof893: cs = 893; goto _test_eof;
	_test_eof1680: cs = 1680; goto _test_eof;
	_test_eof894: cs = 894; goto _test_eof;
	_test_eof895: cs = 895; goto _test_eof;
	_test_eof896: cs = 896; goto _test_eof;
	_test_eof897: cs = 897; goto _test_eof;
	_test_eof898: cs = 898; goto _test_eof;
	_test_eof899: cs = 899; goto _test_eof;
	_test_eof900: cs = 900; goto _test_eof;
	_test_eof901: cs = 901; goto _test_eof;
	_test_eof1681: cs = 1681; goto _test_eof;
	_test_eof902: cs = 902; goto _test_eof;
	_test_eof903: cs = 903; goto _test_eof;
	_test_eof1682: cs = 1682; goto _test_eof;
	_test_eof904: cs = 904; goto _test_eof;
	_test_eof905: cs = 905; goto _test_eof;
	_test_eof906: cs = 906; goto _test_eof;
	_test_eof907: cs = 907; goto _test_eof;
	_test_eof908: cs = 908; goto _test_eof;
	_test_eof909: cs = 909; goto _test_eof;
	_test_eof910: cs = 910; goto _test_eof;
	_test_eof911: cs = 911; goto _test_eof;
	_test_eof912: cs = 912; goto _test_eof;
	_test_eof913: cs = 913; goto _test_eof;
	_test_eof914: cs = 914; goto _test_eof;
	_test_eof915: cs = 915; goto _test_eof;
	_test_eof916: cs = 916; goto _test_eof;
	_test_eof917: cs = 917; goto _test_eof;
	_test_eof1683: cs = 1683; goto _test_eof;
	_test_eof918: cs = 918; goto _test_eof;
	_test_eof919: cs = 919; goto _test_eof;
	_test_eof920: cs = 920; goto _test_eof;
	_test_eof921: cs = 921; goto _test_eof;
	_test_eof922: cs = 922; goto _test_eof;
	_test_eof923: cs = 923; goto _test_eof;
	_test_eof924: cs = 924; goto _test_eof;
	_test_eof925: cs = 925; goto _test_eof;
	_test_eof926: cs = 926; goto _test_eof;
	_test_eof927: cs = 927; goto _test_eof;
	_test_eof928: cs = 928; goto _test_eof;
	_test_eof929: cs = 929; goto _test_eof;
	_test_eof930: cs = 930; goto _test_eof;
	_test_eof931: cs = 931; goto _test_eof;
	_test_eof932: cs = 932; goto _test_eof;
	_test_eof933: cs = 933; goto _test_eof;
	_test_eof934: cs = 934; goto _test_eof;
	_test_eof935: cs = 935; goto _test_eof;
	_test_eof936: cs = 936; goto _test_eof;
	_test_eof937: cs = 937; goto _test_eof;
	_test_eof938: cs = 938; goto _test_eof;
	_test_eof939: cs = 939; goto _test_eof;
	_test_eof1684: cs = 1684; goto _test_eof;
	_test_eof940: cs = 940; goto _test_eof;
	_test_eof941: cs = 941; goto _test_eof;
	_test_eof942: cs = 942; goto _test_eof;
	_test_eof943: cs = 943; goto _test_eof;
	_test_eof944: cs = 944; goto _test_eof;
	_test_eof1685: cs = 1685; goto _test_eof;
	_test_eof945: cs = 945; goto _test_eof;
	_test_eof946: cs = 946; goto _test_eof;
	_test_eof947: cs = 947; goto _test_eof;
	_test_eof948: cs = 948; goto _test_eof;
	_test_eof949: cs = 949; goto _test_eof;
	_test_eof1686: cs = 1686; goto _test_eof;
	_test_eof950: cs = 950; goto _test_eof;
	_test_eof951: cs = 951; goto _test_eof;
	_test_eof952: cs = 952; goto _test_eof;
	_test_eof953: cs = 953; goto _test_eof;
	_test_eof954: cs = 954; goto _test_eof;
	_test_eof1687: cs = 1687; goto _test_eof;
	_test_eof1688: cs = 1688; goto _test_eof;
	_test_eof1689: cs = 1689; goto _test_eof;
	_test_eof955: cs = 955; goto _test_eof;
	_test_eof956: cs = 956; goto _test_eof;
	_test_eof1690: cs = 1690; goto _test_eof;
	_test_eof957: cs = 957; goto _test_eof;
	_test_eof958: cs = 958; goto _test_eof;
	_test_eof959: cs = 959; goto _test_eof;
	_test_eof960: cs = 960; goto _test_eof;
	_test_eof961: cs = 961; goto _test_eof;
	_test_eof962: cs = 962; goto _test_eof;
	_test_eof963: cs = 963; goto _test_eof;
	_test_eof964: cs = 964; goto _test_eof;
	_test_eof965: cs = 965; goto _test_eof;
	_test_eof966: cs = 966; goto _test_eof;
	_test_eof967: cs = 967; goto _test_eof;
	_test_eof968: cs = 968; goto _test_eof;
	_test_eof969: cs = 969; goto _test_eof;
	_test_eof970: cs = 970; goto _test_eof;
	_test_eof971: cs = 971; goto _test_eof;
	_test_eof972: cs = 972; goto _test_eof;
	_test_eof973: cs = 973; goto _test_eof;
	_test_eof974: cs = 974; goto _test_eof;
	_test_eof975: cs = 975; goto _test_eof;
	_test_eof976: cs = 976; goto _test_eof;
	_test_eof977: cs = 977; goto _test_eof;
	_test_eof978: cs = 978; goto _test_eof;
	_test_eof979: cs = 979; goto _test_eof;
	_test_eof980: cs = 980; goto _test_eof;
	_test_eof981: cs = 981; goto _test_eof;
	_test_eof982: cs = 982; goto _test_eof;
	_test_eof983: cs = 983; goto _test_eof;
	_test_eof1691: cs = 1691; goto _test_eof;
	_test_eof1692: cs = 1692; goto _test_eof;
	_test_eof1693: cs = 1693; goto _test_eof;
	_test_eof984: cs = 984; goto _test_eof;
	_test_eof985: cs = 985; goto _test_eof;
	_test_eof986: cs = 986; goto _test_eof;
	_test_eof1694: cs = 1694; goto _test_eof;
	_test_eof1695: cs = 1695; goto _test_eof;
	_test_eof987: cs = 987; goto _test_eof;
	_test_eof988: cs = 988; goto _test_eof;
	_test_eof989: cs = 989; goto _test_eof;
	_test_eof990: cs = 990; goto _test_eof;
	_test_eof1696: cs = 1696; goto _test_eof;
	_test_eof1697: cs = 1697; goto _test_eof;
	_test_eof991: cs = 991; goto _test_eof;
	_test_eof992: cs = 992; goto _test_eof;
	_test_eof993: cs = 993; goto _test_eof;
	_test_eof994: cs = 994; goto _test_eof;
	_test_eof1698: cs = 1698; goto _test_eof;
	_test_eof1699: cs = 1699; goto _test_eof;
	_test_eof995: cs = 995; goto _test_eof;
	_test_eof996: cs = 996; goto _test_eof;
	_test_eof997: cs = 997; goto _test_eof;
	_test_eof998: cs = 998; goto _test_eof;
	_test_eof999: cs = 999; goto _test_eof;
	_test_eof1000: cs = 1000; goto _test_eof;
	_test_eof1001: cs = 1001; goto _test_eof;
	_test_eof1002: cs = 1002; goto _test_eof;
	_test_eof1003: cs = 1003; goto _test_eof;
	_test_eof1004: cs = 1004; goto _test_eof;
	_test_eof1005: cs = 1005; goto _test_eof;
	_test_eof1006: cs = 1006; goto _test_eof;
	_test_eof1007: cs = 1007; goto _test_eof;
	_test_eof1008: cs = 1008; goto _test_eof;
	_test_eof1009: cs = 1009; goto _test_eof;
	_test_eof1010: cs = 1010; goto _test_eof;
	_test_eof1011: cs = 1011; goto _test_eof;
	_test_eof1012: cs = 1012; goto _test_eof;
	_test_eof1013: cs = 1013; goto _test_eof;
	_test_eof1014: cs = 1014; goto _test_eof;
	_test_eof1015: cs = 1015; goto _test_eof;
	_test_eof1016: cs = 1016; goto _test_eof;
	_test_eof1017: cs = 1017; goto _test_eof;
	_test_eof1018: cs = 1018; goto _test_eof;
	_test_eof1019: cs = 1019; goto _test_eof;
	_test_eof1700: cs = 1700; goto _test_eof;
	_test_eof1020: cs = 1020; goto _test_eof;
	_test_eof1021: cs = 1021; goto _test_eof;
	_test_eof1022: cs = 1022; goto _test_eof;
	_test_eof1023: cs = 1023; goto _test_eof;
	_test_eof1024: cs = 1024; goto _test_eof;
	_test_eof1025: cs = 1025; goto _test_eof;
	_test_eof1026: cs = 1026; goto _test_eof;
	_test_eof1027: cs = 1027; goto _test_eof;
	_test_eof1028: cs = 1028; goto _test_eof;
	_test_eof1029: cs = 1029; goto _test_eof;
	_test_eof1030: cs = 1030; goto _test_eof;
	_test_eof1031: cs = 1031; goto _test_eof;
	_test_eof1032: cs = 1032; goto _test_eof;
	_test_eof1033: cs = 1033; goto _test_eof;
	_test_eof1034: cs = 1034; goto _test_eof;
	_test_eof1701: cs = 1701; goto _test_eof;
	_test_eof1035: cs = 1035; goto _test_eof;
	_test_eof1036: cs = 1036; goto _test_eof;
	_test_eof1037: cs = 1037; goto _test_eof;
	_test_eof1038: cs = 1038; goto _test_eof;
	_test_eof1039: cs = 1039; goto _test_eof;
	_test_eof1040: cs = 1040; goto _test_eof;
	_test_eof1041: cs = 1041; goto _test_eof;
	_test_eof1042: cs = 1042; goto _test_eof;
	_test_eof1043: cs = 1043; goto _test_eof;
	_test_eof1044: cs = 1044; goto _test_eof;
	_test_eof1045: cs = 1045; goto _test_eof;
	_test_eof1046: cs = 1046; goto _test_eof;
	_test_eof1047: cs = 1047; goto _test_eof;
	_test_eof1702: cs = 1702; goto _test_eof;
	_test_eof1048: cs = 1048; goto _test_eof;
	_test_eof1049: cs = 1049; goto _test_eof;
	_test_eof1050: cs = 1050; goto _test_eof;
	_test_eof1051: cs = 1051; goto _test_eof;
	_test_eof1052: cs = 1052; goto _test_eof;
	_test_eof1053: cs = 1053; goto _test_eof;
	_test_eof1054: cs = 1054; goto _test_eof;
	_test_eof1055: cs = 1055; goto _test_eof;
	_test_eof1056: cs = 1056; goto _test_eof;
	_test_eof1057: cs = 1057; goto _test_eof;
	_test_eof1058: cs = 1058; goto _test_eof;
	_test_eof1703: cs = 1703; goto _test_eof;
	_test_eof1704: cs = 1704; goto _test_eof;
	_test_eof1059: cs = 1059; goto _test_eof;
	_test_eof1060: cs = 1060; goto _test_eof;
	_test_eof1061: cs = 1061; goto _test_eof;
	_test_eof1705: cs = 1705; goto _test_eof;
	_test_eof1062: cs = 1062; goto _test_eof;
	_test_eof1063: cs = 1063; goto _test_eof;
	_test_eof1064: cs = 1064; goto _test_eof;
	_test_eof1065: cs = 1065; goto _test_eof;
	_test_eof1066: cs = 1066; goto _test_eof;
	_test_eof1067: cs = 1067; goto _test_eof;
	_test_eof1068: cs = 1068; goto _test_eof;
	_test_eof1069: cs = 1069; goto _test_eof;
	_test_eof1070: cs = 1070; goto _test_eof;
	_test_eof1071: cs = 1071; goto _test_eof;
	_test_eof1706: cs = 1706; goto _test_eof;
	_test_eof1707: cs = 1707; goto _test_eof;
	_test_eof1708: cs = 1708; goto _test_eof;
	_test_eof1072: cs = 1072; goto _test_eof;
	_test_eof1073: cs = 1073; goto _test_eof;
	_test_eof1074: cs = 1074; goto _test_eof;
	_test_eof1075: cs = 1075; goto _test_eof;
	_test_eof1076: cs = 1076; goto _test_eof;
	_test_eof1077: cs = 1077; goto _test_eof;
	_test_eof1078: cs = 1078; goto _test_eof;
	_test_eof1079: cs = 1079; goto _test_eof;
	_test_eof1080: cs = 1080; goto _test_eof;
	_test_eof1081: cs = 1081; goto _test_eof;
	_test_eof1082: cs = 1082; goto _test_eof;
	_test_eof1709: cs = 1709; goto _test_eof;
	_test_eof1710: cs = 1710; goto _test_eof;
	_test_eof1711: cs = 1711; goto _test_eof;
	_test_eof1083: cs = 1083; goto _test_eof;
	_test_eof1084: cs = 1084; goto _test_eof;
	_test_eof1085: cs = 1085; goto _test_eof;
	_test_eof1086: cs = 1086; goto _test_eof;
	_test_eof1087: cs = 1087; goto _test_eof;
	_test_eof1088: cs = 1088; goto _test_eof;
	_test_eof1089: cs = 1089; goto _test_eof;
	_test_eof1090: cs = 1090; goto _test_eof;
	_test_eof1091: cs = 1091; goto _test_eof;
	_test_eof1092: cs = 1092; goto _test_eof;
	_test_eof1093: cs = 1093; goto _test_eof;
	_test_eof1094: cs = 1094; goto _test_eof;
	_test_eof1712: cs = 1712; goto _test_eof;
	_test_eof1095: cs = 1095; goto _test_eof;
	_test_eof1096: cs = 1096; goto _test_eof;
	_test_eof1097: cs = 1097; goto _test_eof;
	_test_eof1713: cs = 1713; goto _test_eof;
	_test_eof1714: cs = 1714; goto _test_eof;
	_test_eof1098: cs = 1098; goto _test_eof;
	_test_eof1715: cs = 1715; goto _test_eof;
	_test_eof1716: cs = 1716; goto _test_eof;
	_test_eof1099: cs = 1099; goto _test_eof;
	_test_eof1717: cs = 1717; goto _test_eof;
	_test_eof1718: cs = 1718; goto _test_eof;
	_test_eof1100: cs = 1100; goto _test_eof;
	_test_eof1101: cs = 1101; goto _test_eof;
	_test_eof1102: cs = 1102; goto _test_eof;
	_test_eof1103: cs = 1103; goto _test_eof;
	_test_eof1104: cs = 1104; goto _test_eof;
	_test_eof1105: cs = 1105; goto _test_eof;
	_test_eof1106: cs = 1106; goto _test_eof;
	_test_eof1107: cs = 1107; goto _test_eof;
	_test_eof1108: cs = 1108; goto _test_eof;
	_test_eof1109: cs = 1109; goto _test_eof;
	_test_eof1110: cs = 1110; goto _test_eof;
	_test_eof1111: cs = 1111; goto _test_eof;
	_test_eof1112: cs = 1112; goto _test_eof;
	_test_eof1113: cs = 1113; goto _test_eof;
	_test_eof1114: cs = 1114; goto _test_eof;
	_test_eof1115: cs = 1115; goto _test_eof;
	_test_eof1116: cs = 1116; goto _test_eof;
	_test_eof1117: cs = 1117; goto _test_eof;
	_test_eof1118: cs = 1118; goto _test_eof;
	_test_eof1119: cs = 1119; goto _test_eof;
	_test_eof1120: cs = 1120; goto _test_eof;
	_test_eof1121: cs = 1121; goto _test_eof;
	_test_eof1122: cs = 1122; goto _test_eof;
	_test_eof1123: cs = 1123; goto _test_eof;
	_test_eof1124: cs = 1124; goto _test_eof;
	_test_eof1125: cs = 1125; goto _test_eof;
	_test_eof1126: cs = 1126; goto _test_eof;
	_test_eof1127: cs = 1127; goto _test_eof;
	_test_eof1128: cs = 1128; goto _test_eof;
	_test_eof1129: cs = 1129; goto _test_eof;
	_test_eof1130: cs = 1130; goto _test_eof;
	_test_eof1131: cs = 1131; goto _test_eof;
	_test_eof1132: cs = 1132; goto _test_eof;
	_test_eof1133: cs = 1133; goto _test_eof;
	_test_eof1134: cs = 1134; goto _test_eof;
	_test_eof1135: cs = 1135; goto _test_eof;
	_test_eof1136: cs = 1136; goto _test_eof;
	_test_eof1137: cs = 1137; goto _test_eof;
	_test_eof1138: cs = 1138; goto _test_eof;
	_test_eof1139: cs = 1139; goto _test_eof;
	_test_eof1140: cs = 1140; goto _test_eof;
	_test_eof1141: cs = 1141; goto _test_eof;
	_test_eof1719: cs = 1719; goto _test_eof;
	_test_eof1142: cs = 1142; goto _test_eof;
	_test_eof1143: cs = 1143; goto _test_eof;
	_test_eof1144: cs = 1144; goto _test_eof;
	_test_eof1145: cs = 1145; goto _test_eof;
	_test_eof1146: cs = 1146; goto _test_eof;
	_test_eof1147: cs = 1147; goto _test_eof;
	_test_eof1148: cs = 1148; goto _test_eof;
	_test_eof1149: cs = 1149; goto _test_eof;
	_test_eof1150: cs = 1150; goto _test_eof;
	_test_eof1151: cs = 1151; goto _test_eof;
	_test_eof1152: cs = 1152; goto _test_eof;
	_test_eof1153: cs = 1153; goto _test_eof;
	_test_eof1154: cs = 1154; goto _test_eof;
	_test_eof1155: cs = 1155; goto _test_eof;
	_test_eof1156: cs = 1156; goto _test_eof;
	_test_eof1157: cs = 1157; goto _test_eof;
	_test_eof1158: cs = 1158; goto _test_eof;
	_test_eof1159: cs = 1159; goto _test_eof;
	_test_eof1160: cs = 1160; goto _test_eof;
	_test_eof1161: cs = 1161; goto _test_eof;
	_test_eof1162: cs = 1162; goto _test_eof;
	_test_eof1163: cs = 1163; goto _test_eof;
	_test_eof1164: cs = 1164; goto _test_eof;
	_test_eof1165: cs = 1165; goto _test_eof;
	_test_eof1166: cs = 1166; goto _test_eof;
	_test_eof1167: cs = 1167; goto _test_eof;
	_test_eof1168: cs = 1168; goto _test_eof;
	_test_eof1169: cs = 1169; goto _test_eof;
	_test_eof1170: cs = 1170; goto _test_eof;
	_test_eof1171: cs = 1171; goto _test_eof;
	_test_eof1172: cs = 1172; goto _test_eof;
	_test_eof1173: cs = 1173; goto _test_eof;
	_test_eof1174: cs = 1174; goto _test_eof;
	_test_eof1175: cs = 1175; goto _test_eof;
	_test_eof1176: cs = 1176; goto _test_eof;
	_test_eof1177: cs = 1177; goto _test_eof;
	_test_eof1178: cs = 1178; goto _test_eof;
	_test_eof1179: cs = 1179; goto _test_eof;
	_test_eof1180: cs = 1180; goto _test_eof;
	_test_eof1181: cs = 1181; goto _test_eof;
	_test_eof1182: cs = 1182; goto _test_eof;
	_test_eof1183: cs = 1183; goto _test_eof;
	_test_eof1184: cs = 1184; goto _test_eof;
	_test_eof1185: cs = 1185; goto _test_eof;
	_test_eof1186: cs = 1186; goto _test_eof;
	_test_eof1187: cs = 1187; goto _test_eof;
	_test_eof1188: cs = 1188; goto _test_eof;
	_test_eof1189: cs = 1189; goto _test_eof;
	_test_eof1190: cs = 1190; goto _test_eof;
	_test_eof1191: cs = 1191; goto _test_eof;
	_test_eof1192: cs = 1192; goto _test_eof;
	_test_eof1193: cs = 1193; goto _test_eof;
	_test_eof1194: cs = 1194; goto _test_eof;
	_test_eof1195: cs = 1195; goto _test_eof;
	_test_eof1196: cs = 1196; goto _test_eof;
	_test_eof1197: cs = 1197; goto _test_eof;
	_test_eof1198: cs = 1198; goto _test_eof;
	_test_eof1199: cs = 1199; goto _test_eof;
	_test_eof1200: cs = 1200; goto _test_eof;
	_test_eof1201: cs = 1201; goto _test_eof;
	_test_eof1202: cs = 1202; goto _test_eof;
	_test_eof1203: cs = 1203; goto _test_eof;
	_test_eof1204: cs = 1204; goto _test_eof;
	_test_eof1205: cs = 1205; goto _test_eof;
	_test_eof1206: cs = 1206; goto _test_eof;
	_test_eof1207: cs = 1207; goto _test_eof;
	_test_eof1208: cs = 1208; goto _test_eof;
	_test_eof1209: cs = 1209; goto _test_eof;
	_test_eof1210: cs = 1210; goto _test_eof;
	_test_eof1211: cs = 1211; goto _test_eof;
	_test_eof1212: cs = 1212; goto _test_eof;
	_test_eof1213: cs = 1213; goto _test_eof;
	_test_eof1214: cs = 1214; goto _test_eof;
	_test_eof1215: cs = 1215; goto _test_eof;
	_test_eof1216: cs = 1216; goto _test_eof;
	_test_eof1217: cs = 1217; goto _test_eof;
	_test_eof1218: cs = 1218; goto _test_eof;
	_test_eof1219: cs = 1219; goto _test_eof;
	_test_eof1220: cs = 1220; goto _test_eof;
	_test_eof1221: cs = 1221; goto _test_eof;
	_test_eof1222: cs = 1222; goto _test_eof;
	_test_eof1223: cs = 1223; goto _test_eof;
	_test_eof1224: cs = 1224; goto _test_eof;
	_test_eof1225: cs = 1225; goto _test_eof;
	_test_eof1226: cs = 1226; goto _test_eof;
	_test_eof1227: cs = 1227; goto _test_eof;
	_test_eof1228: cs = 1228; goto _test_eof;
	_test_eof1229: cs = 1229; goto _test_eof;
	_test_eof1230: cs = 1230; goto _test_eof;
	_test_eof1231: cs = 1231; goto _test_eof;
	_test_eof1232: cs = 1232; goto _test_eof;
	_test_eof1233: cs = 1233; goto _test_eof;
	_test_eof1234: cs = 1234; goto _test_eof;
	_test_eof1235: cs = 1235; goto _test_eof;
	_test_eof1236: cs = 1236; goto _test_eof;
	_test_eof1237: cs = 1237; goto _test_eof;
	_test_eof1238: cs = 1238; goto _test_eof;
	_test_eof1239: cs = 1239; goto _test_eof;
	_test_eof1240: cs = 1240; goto _test_eof;
	_test_eof1241: cs = 1241; goto _test_eof;
	_test_eof1242: cs = 1242; goto _test_eof;
	_test_eof1243: cs = 1243; goto _test_eof;
	_test_eof1244: cs = 1244; goto _test_eof;
	_test_eof1245: cs = 1245; goto _test_eof;
	_test_eof1246: cs = 1246; goto _test_eof;
	_test_eof1247: cs = 1247; goto _test_eof;
	_test_eof1248: cs = 1248; goto _test_eof;
	_test_eof1249: cs = 1249; goto _test_eof;
	_test_eof1250: cs = 1250; goto _test_eof;
	_test_eof1251: cs = 1251; goto _test_eof;
	_test_eof1252: cs = 1252; goto _test_eof;
	_test_eof1253: cs = 1253; goto _test_eof;
	_test_eof1254: cs = 1254; goto _test_eof;
	_test_eof1255: cs = 1255; goto _test_eof;
	_test_eof1256: cs = 1256; goto _test_eof;
	_test_eof1257: cs = 1257; goto _test_eof;
	_test_eof1258: cs = 1258; goto _test_eof;
	_test_eof1259: cs = 1259; goto _test_eof;
	_test_eof1260: cs = 1260; goto _test_eof;
	_test_eof1261: cs = 1261; goto _test_eof;
	_test_eof1262: cs = 1262; goto _test_eof;
	_test_eof1263: cs = 1263; goto _test_eof;
	_test_eof1264: cs = 1264; goto _test_eof;
	_test_eof1265: cs = 1265; goto _test_eof;
	_test_eof1266: cs = 1266; goto _test_eof;
	_test_eof1267: cs = 1267; goto _test_eof;
	_test_eof1268: cs = 1268; goto _test_eof;
	_test_eof1269: cs = 1269; goto _test_eof;
	_test_eof1270: cs = 1270; goto _test_eof;
	_test_eof1271: cs = 1271; goto _test_eof;
	_test_eof1272: cs = 1272; goto _test_eof;
	_test_eof1273: cs = 1273; goto _test_eof;
	_test_eof1274: cs = 1274; goto _test_eof;
	_test_eof1275: cs = 1275; goto _test_eof;
	_test_eof1276: cs = 1276; goto _test_eof;
	_test_eof1277: cs = 1277; goto _test_eof;
	_test_eof1278: cs = 1278; goto _test_eof;
	_test_eof1279: cs = 1279; goto _test_eof;
	_test_eof1280: cs = 1280; goto _test_eof;
	_test_eof1281: cs = 1281; goto _test_eof;
	_test_eof1282: cs = 1282; goto _test_eof;
	_test_eof1283: cs = 1283; goto _test_eof;
	_test_eof1284: cs = 1284; goto _test_eof;
	_test_eof1285: cs = 1285; goto _test_eof;
	_test_eof1286: cs = 1286; goto _test_eof;
	_test_eof1287: cs = 1287; goto _test_eof;
	_test_eof1288: cs = 1288; goto _test_eof;
	_test_eof1289: cs = 1289; goto _test_eof;
	_test_eof1290: cs = 1290; goto _test_eof;
	_test_eof1291: cs = 1291; goto _test_eof;
	_test_eof1292: cs = 1292; goto _test_eof;
	_test_eof1293: cs = 1293; goto _test_eof;
	_test_eof1294: cs = 1294; goto _test_eof;
	_test_eof1295: cs = 1295; goto _test_eof;
	_test_eof1296: cs = 1296; goto _test_eof;
	_test_eof1297: cs = 1297; goto _test_eof;
	_test_eof1298: cs = 1298; goto _test_eof;
	_test_eof1299: cs = 1299; goto _test_eof;
	_test_eof1300: cs = 1300; goto _test_eof;
	_test_eof1301: cs = 1301; goto _test_eof;
	_test_eof1302: cs = 1302; goto _test_eof;
	_test_eof1303: cs = 1303; goto _test_eof;
	_test_eof1304: cs = 1304; goto _test_eof;
	_test_eof1305: cs = 1305; goto _test_eof;
	_test_eof1306: cs = 1306; goto _test_eof;
	_test_eof1307: cs = 1307; goto _test_eof;
	_test_eof1308: cs = 1308; goto _test_eof;
	_test_eof1309: cs = 1309; goto _test_eof;
	_test_eof1310: cs = 1310; goto _test_eof;
	_test_eof1311: cs = 1311; goto _test_eof;
	_test_eof1312: cs = 1312; goto _test_eof;
	_test_eof1313: cs = 1313; goto _test_eof;
	_test_eof1314: cs = 1314; goto _test_eof;
	_test_eof1315: cs = 1315; goto _test_eof;
	_test_eof1316: cs = 1316; goto _test_eof;
	_test_eof1317: cs = 1317; goto _test_eof;
	_test_eof1318: cs = 1318; goto _test_eof;
	_test_eof1319: cs = 1319; goto _test_eof;
	_test_eof1320: cs = 1320; goto _test_eof;
	_test_eof1321: cs = 1321; goto _test_eof;
	_test_eof1720: cs = 1720; goto _test_eof;
	_test_eof1322: cs = 1322; goto _test_eof;
	_test_eof1323: cs = 1323; goto _test_eof;
	_test_eof1324: cs = 1324; goto _test_eof;
	_test_eof1325: cs = 1325; goto _test_eof;
	_test_eof1326: cs = 1326; goto _test_eof;
	_test_eof1327: cs = 1327; goto _test_eof;
	_test_eof1328: cs = 1328; goto _test_eof;
	_test_eof1329: cs = 1329; goto _test_eof;
	_test_eof1721: cs = 1721; goto _test_eof;
	_test_eof1330: cs = 1330; goto _test_eof;
	_test_eof1331: cs = 1331; goto _test_eof;
	_test_eof1332: cs = 1332; goto _test_eof;
	_test_eof1333: cs = 1333; goto _test_eof;
	_test_eof1334: cs = 1334; goto _test_eof;
	_test_eof1722: cs = 1722; goto _test_eof;
	_test_eof1335: cs = 1335; goto _test_eof;
	_test_eof1336: cs = 1336; goto _test_eof;
	_test_eof1337: cs = 1337; goto _test_eof;
	_test_eof1338: cs = 1338; goto _test_eof;
	_test_eof1339: cs = 1339; goto _test_eof;
	_test_eof1340: cs = 1340; goto _test_eof;
	_test_eof1341: cs = 1341; goto _test_eof;
	_test_eof1342: cs = 1342; goto _test_eof;
	_test_eof1343: cs = 1343; goto _test_eof;
	_test_eof1344: cs = 1344; goto _test_eof;
	_test_eof1345: cs = 1345; goto _test_eof;
	_test_eof1346: cs = 1346; goto _test_eof;
	_test_eof1347: cs = 1347; goto _test_eof;
	_test_eof1348: cs = 1348; goto _test_eof;
	_test_eof1349: cs = 1349; goto _test_eof;
	_test_eof1350: cs = 1350; goto _test_eof;
	_test_eof1351: cs = 1351; goto _test_eof;
	_test_eof1352: cs = 1352; goto _test_eof;
	_test_eof1723: cs = 1723; goto _test_eof;
	_test_eof1353: cs = 1353; goto _test_eof;
	_test_eof1354: cs = 1354; goto _test_eof;
	_test_eof1355: cs = 1355; goto _test_eof;
	_test_eof1356: cs = 1356; goto _test_eof;
	_test_eof1357: cs = 1357; goto _test_eof;
	_test_eof1358: cs = 1358; goto _test_eof;
	_test_eof1359: cs = 1359; goto _test_eof;
	_test_eof1360: cs = 1360; goto _test_eof;
	_test_eof1361: cs = 1361; goto _test_eof;
	_test_eof1362: cs = 1362; goto _test_eof;
	_test_eof1363: cs = 1363; goto _test_eof;
	_test_eof1364: cs = 1364; goto _test_eof;
	_test_eof1365: cs = 1365; goto _test_eof;
	_test_eof1366: cs = 1366; goto _test_eof;
	_test_eof1367: cs = 1367; goto _test_eof;
	_test_eof1368: cs = 1368; goto _test_eof;
	_test_eof1369: cs = 1369; goto _test_eof;
	_test_eof1370: cs = 1370; goto _test_eof;
	_test_eof1371: cs = 1371; goto _test_eof;
	_test_eof1724: cs = 1724; goto _test_eof;
	_test_eof1372: cs = 1372; goto _test_eof;
	_test_eof1373: cs = 1373; goto _test_eof;
	_test_eof1374: cs = 1374; goto _test_eof;
	_test_eof1375: cs = 1375; goto _test_eof;
	_test_eof1376: cs = 1376; goto _test_eof;
	_test_eof1377: cs = 1377; goto _test_eof;
	_test_eof1378: cs = 1378; goto _test_eof;
	_test_eof1379: cs = 1379; goto _test_eof;
	_test_eof1380: cs = 1380; goto _test_eof;
	_test_eof1381: cs = 1381; goto _test_eof;
	_test_eof1382: cs = 1382; goto _test_eof;
	_test_eof1383: cs = 1383; goto _test_eof;
	_test_eof1384: cs = 1384; goto _test_eof;
	_test_eof1385: cs = 1385; goto _test_eof;
	_test_eof1386: cs = 1386; goto _test_eof;
	_test_eof1725: cs = 1725; goto _test_eof;
	_test_eof1726: cs = 1726; goto _test_eof;
	_test_eof1727: cs = 1727; goto _test_eof;
	_test_eof1387: cs = 1387; goto _test_eof;
	_test_eof1388: cs = 1388; goto _test_eof;
	_test_eof1389: cs = 1389; goto _test_eof;
	_test_eof1390: cs = 1390; goto _test_eof;
	_test_eof1391: cs = 1391; goto _test_eof;
	_test_eof1392: cs = 1392; goto _test_eof;
	_test_eof1393: cs = 1393; goto _test_eof;
	_test_eof1394: cs = 1394; goto _test_eof;
	_test_eof1728: cs = 1728; goto _test_eof;
	_test_eof1395: cs = 1395; goto _test_eof;
	_test_eof1396: cs = 1396; goto _test_eof;
	_test_eof1397: cs = 1397; goto _test_eof;
	_test_eof1398: cs = 1398; goto _test_eof;
	_test_eof1399: cs = 1399; goto _test_eof;
	_test_eof1400: cs = 1400; goto _test_eof;
	_test_eof1401: cs = 1401; goto _test_eof;
	_test_eof1402: cs = 1402; goto _test_eof;
	_test_eof1403: cs = 1403; goto _test_eof;
	_test_eof1404: cs = 1404; goto _test_eof;
	_test_eof1405: cs = 1405; goto _test_eof;
	_test_eof1729: cs = 1729; goto _test_eof;
	_test_eof1730: cs = 1730; goto _test_eof;
	_test_eof1731: cs = 1731; goto _test_eof;
	_test_eof1406: cs = 1406; goto _test_eof;
	_test_eof1407: cs = 1407; goto _test_eof;
	_test_eof1408: cs = 1408; goto _test_eof;
	_test_eof1409: cs = 1409; goto _test_eof;
	_test_eof1410: cs = 1410; goto _test_eof;
	_test_eof1411: cs = 1411; goto _test_eof;
	_test_eof1412: cs = 1412; goto _test_eof;
	_test_eof1732: cs = 1732; goto _test_eof;
	_test_eof1413: cs = 1413; goto _test_eof;
	_test_eof1414: cs = 1414; goto _test_eof;
	_test_eof1415: cs = 1415; goto _test_eof;
	_test_eof1416: cs = 1416; goto _test_eof;
	_test_eof1417: cs = 1417; goto _test_eof;
	_test_eof1418: cs = 1418; goto _test_eof;
	_test_eof1419: cs = 1419; goto _test_eof;
	_test_eof1420: cs = 1420; goto _test_eof;
	_test_eof1421: cs = 1421; goto _test_eof;
	_test_eof1422: cs = 1422; goto _test_eof;
	_test_eof1423: cs = 1423; goto _test_eof;
	_test_eof1424: cs = 1424; goto _test_eof;
	_test_eof1425: cs = 1425; goto _test_eof;
	_test_eof1733: cs = 1733; goto _test_eof;
	_test_eof1426: cs = 1426; goto _test_eof;
	_test_eof1427: cs = 1427; goto _test_eof;
	_test_eof1428: cs = 1428; goto _test_eof;
	_test_eof1429: cs = 1429; goto _test_eof;
	_test_eof1430: cs = 1430; goto _test_eof;
	_test_eof1431: cs = 1431; goto _test_eof;
	_test_eof1432: cs = 1432; goto _test_eof;
	_test_eof1734: cs = 1734; goto _test_eof;
	_test_eof1433: cs = 1433; goto _test_eof;
	_test_eof1434: cs = 1434; goto _test_eof;
	_test_eof1435: cs = 1435; goto _test_eof;
	_test_eof1436: cs = 1436; goto _test_eof;
	_test_eof1437: cs = 1437; goto _test_eof;
	_test_eof1438: cs = 1438; goto _test_eof;
	_test_eof1735: cs = 1735; goto _test_eof;
	_test_eof1439: cs = 1439; goto _test_eof;
	_test_eof1440: cs = 1440; goto _test_eof;
	_test_eof1441: cs = 1441; goto _test_eof;
	_test_eof1442: cs = 1442; goto _test_eof;
	_test_eof1443: cs = 1443; goto _test_eof;
	_test_eof1444: cs = 1444; goto _test_eof;
	_test_eof1736: cs = 1736; goto _test_eof;
	_test_eof1445: cs = 1445; goto _test_eof;
	_test_eof1446: cs = 1446; goto _test_eof;
	_test_eof1447: cs = 1447; goto _test_eof;
	_test_eof1448: cs = 1448; goto _test_eof;
	_test_eof1449: cs = 1449; goto _test_eof;
	_test_eof1450: cs = 1450; goto _test_eof;
	_test_eof1451: cs = 1451; goto _test_eof;
	_test_eof1452: cs = 1452; goto _test_eof;
	_test_eof1737: cs = 1737; goto _test_eof;
	_test_eof1453: cs = 1453; goto _test_eof;
	_test_eof1454: cs = 1454; goto _test_eof;
	_test_eof1455: cs = 1455; goto _test_eof;
	_test_eof1456: cs = 1456; goto _test_eof;
	_test_eof1457: cs = 1457; goto _test_eof;
	_test_eof1458: cs = 1458; goto _test_eof;
	_test_eof1459: cs = 1459; goto _test_eof;
	_test_eof1738: cs = 1738; goto _test_eof;
	_test_eof1460: cs = 1460; goto _test_eof;
	_test_eof1461: cs = 1461; goto _test_eof;
	_test_eof1462: cs = 1462; goto _test_eof;
	_test_eof1463: cs = 1463; goto _test_eof;
	_test_eof1464: cs = 1464; goto _test_eof;
	_test_eof1465: cs = 1465; goto _test_eof;
	_test_eof1466: cs = 1466; goto _test_eof;
	_test_eof1467: cs = 1467; goto _test_eof;
	_test_eof1468: cs = 1468; goto _test_eof;
	_test_eof1739: cs = 1739; goto _test_eof;
	_test_eof1469: cs = 1469; goto _test_eof;
	_test_eof1470: cs = 1470; goto _test_eof;
	_test_eof1471: cs = 1471; goto _test_eof;
	_test_eof1472: cs = 1472; goto _test_eof;
	_test_eof1473: cs = 1473; goto _test_eof;
	_test_eof1474: cs = 1474; goto _test_eof;
	_test_eof1475: cs = 1475; goto _test_eof;
	_test_eof1476: cs = 1476; goto _test_eof;
	_test_eof1477: cs = 1477; goto _test_eof;
	_test_eof1478: cs = 1478; goto _test_eof;
	_test_eof1479: cs = 1479; goto _test_eof;
	_test_eof1480: cs = 1480; goto _test_eof;
	_test_eof1481: cs = 1481; goto _test_eof;
	_test_eof1482: cs = 1482; goto _test_eof;
	_test_eof1483: cs = 1483; goto _test_eof;
	_test_eof1484: cs = 1484; goto _test_eof;
	_test_eof1485: cs = 1485; goto _test_eof;
	_test_eof1486: cs = 1486; goto _test_eof;
	_test_eof1487: cs = 1487; goto _test_eof;
	_test_eof1488: cs = 1488; goto _test_eof;
	_test_eof1489: cs = 1489; goto _test_eof;
	_test_eof1490: cs = 1490; goto _test_eof;
	_test_eof1491: cs = 1491; goto _test_eof;
	_test_eof1492: cs = 1492; goto _test_eof;
	_test_eof1493: cs = 1493; goto _test_eof;
	_test_eof1494: cs = 1494; goto _test_eof;
	_test_eof1495: cs = 1495; goto _test_eof;
	_test_eof1496: cs = 1496; goto _test_eof;
	_test_eof1497: cs = 1497; goto _test_eof;
	_test_eof1498: cs = 1498; goto _test_eof;
	_test_eof1499: cs = 1499; goto _test_eof;
	_test_eof1500: cs = 1500; goto _test_eof;
	_test_eof1501: cs = 1501; goto _test_eof;
	_test_eof1502: cs = 1502; goto _test_eof;
	_test_eof1503: cs = 1503; goto _test_eof;
	_test_eof1504: cs = 1504; goto _test_eof;
	_test_eof1505: cs = 1505; goto _test_eof;
	_test_eof1506: cs = 1506; goto _test_eof;
	_test_eof1507: cs = 1507; goto _test_eof;
	_test_eof1508: cs = 1508; goto _test_eof;
	_test_eof1509: cs = 1509; goto _test_eof;
	_test_eof1510: cs = 1510; goto _test_eof;
	_test_eof1511: cs = 1511; goto _test_eof;
	_test_eof1512: cs = 1512; goto _test_eof;
	_test_eof1513: cs = 1513; goto _test_eof;
	_test_eof1514: cs = 1514; goto _test_eof;
	_test_eof1515: cs = 1515; goto _test_eof;
	_test_eof1516: cs = 1516; goto _test_eof;
	_test_eof1517: cs = 1517; goto _test_eof;
	_test_eof1518: cs = 1518; goto _test_eof;
	_test_eof1519: cs = 1519; goto _test_eof;
	_test_eof1520: cs = 1520; goto _test_eof;
	_test_eof1521: cs = 1521; goto _test_eof;
	_test_eof1522: cs = 1522; goto _test_eof;
	_test_eof1523: cs = 1523; goto _test_eof;
	_test_eof1524: cs = 1524; goto _test_eof;
	_test_eof1525: cs = 1525; goto _test_eof;
	_test_eof1526: cs = 1526; goto _test_eof;
	_test_eof1527: cs = 1527; goto _test_eof;
	_test_eof1528: cs = 1528; goto _test_eof;
	_test_eof1529: cs = 1529; goto _test_eof;
	_test_eof1530: cs = 1530; goto _test_eof;
	_test_eof1531: cs = 1531; goto _test_eof;
	_test_eof1532: cs = 1532; goto _test_eof;
	_test_eof1533: cs = 1533; goto _test_eof;
	_test_eof1534: cs = 1534; goto _test_eof;
	_test_eof1535: cs = 1535; goto _test_eof;
	_test_eof1536: cs = 1536; goto _test_eof;
	_test_eof1537: cs = 1537; goto _test_eof;
	_test_eof1538: cs = 1538; goto _test_eof;
	_test_eof1539: cs = 1539; goto _test_eof;
	_test_eof1540: cs = 1540; goto _test_eof;
	_test_eof1541: cs = 1541; goto _test_eof;
	_test_eof1542: cs = 1542; goto _test_eof;
	_test_eof1543: cs = 1543; goto _test_eof;
	_test_eof1544: cs = 1544; goto _test_eof;
	_test_eof1545: cs = 1545; goto _test_eof;
	_test_eof1546: cs = 1546; goto _test_eof;
	_test_eof1547: cs = 1547; goto _test_eof;
	_test_eof1548: cs = 1548; goto _test_eof;
	_test_eof1549: cs = 1549; goto _test_eof;
	_test_eof1550: cs = 1550; goto _test_eof;
	_test_eof1551: cs = 1551; goto _test_eof;
	_test_eof1552: cs = 1552; goto _test_eof;
	_test_eof1553: cs = 1553; goto _test_eof;
	_test_eof1554: cs = 1554; goto _test_eof;
	_test_eof1555: cs = 1555; goto _test_eof;
	_test_eof1556: cs = 1556; goto _test_eof;
	_test_eof1557: cs = 1557; goto _test_eof;
	_test_eof1558: cs = 1558; goto _test_eof;
	_test_eof1559: cs = 1559; goto _test_eof;
	_test_eof1560: cs = 1560; goto _test_eof;
	_test_eof1561: cs = 1561; goto _test_eof;
	_test_eof1562: cs = 1562; goto _test_eof;
	_test_eof1563: cs = 1563; goto _test_eof;
	_test_eof1564: cs = 1564; goto _test_eof;
	_test_eof1565: cs = 1565; goto _test_eof;
	_test_eof1566: cs = 1566; goto _test_eof;
	_test_eof1567: cs = 1567; goto _test_eof;
	_test_eof1568: cs = 1568; goto _test_eof;
	_test_eof1569: cs = 1569; goto _test_eof;
	_test_eof1570: cs = 1570; goto _test_eof;
	_test_eof1571: cs = 1571; goto _test_eof;
	_test_eof1572: cs = 1572; goto _test_eof;
	_test_eof1573: cs = 1573; goto _test_eof;
	_test_eof1574: cs = 1574; goto _test_eof;
	_test_eof1575: cs = 1575; goto _test_eof;
	_test_eof1576: cs = 1576; goto _test_eof;
	_test_eof1577: cs = 1577; goto _test_eof;
	_test_eof1578: cs = 1578; goto _test_eof;
	_test_eof1579: cs = 1579; goto _test_eof;
	_test_eof1580: cs = 1580; goto _test_eof;
	_test_eof1581: cs = 1581; goto _test_eof;
	_test_eof1582: cs = 1582; goto _test_eof;
	_test_eof1583: cs = 1583; goto _test_eof;
	_test_eof1584: cs = 1584; goto _test_eof;
	_test_eof1585: cs = 1585; goto _test_eof;
	_test_eof1586: cs = 1586; goto _test_eof;
	_test_eof1587: cs = 1587; goto _test_eof;
	_test_eof1588: cs = 1588; goto _test_eof;
	_test_eof1589: cs = 1589; goto _test_eof;
	_test_eof1590: cs = 1590; goto _test_eof;
	_test_eof1591: cs = 1591; goto _test_eof;
	_test_eof1592: cs = 1592; goto _test_eof;
	_test_eof1593: cs = 1593; goto _test_eof;
	_test_eof1594: cs = 1594; goto _test_eof;
	_test_eof1595: cs = 1595; goto _test_eof;
	_test_eof1596: cs = 1596; goto _test_eof;
	_test_eof1597: cs = 1597; goto _test_eof;
	_test_eof1598: cs = 1598; goto _test_eof;
	_test_eof1599: cs = 1599; goto _test_eof;
	_test_eof1600: cs = 1600; goto _test_eof;
	_test_eof1601: cs = 1601; goto _test_eof;
	_test_eof1602: cs = 1602; goto _test_eof;
	_test_eof1603: cs = 1603; goto _test_eof;
	_test_eof1604: cs = 1604; goto _test_eof;
	_test_eof1605: cs = 1605; goto _test_eof;
	_test_eof1606: cs = 1606; goto _test_eof;
	_test_eof1607: cs = 1607; goto _test_eof;
	_test_eof1608: cs = 1608; goto _test_eof;
	_test_eof1609: cs = 1609; goto _test_eof;
	_test_eof1610: cs = 1610; goto _test_eof;
	_test_eof1611: cs = 1611; goto _test_eof;
	_test_eof1612: cs = 1612; goto _test_eof;
	_test_eof1613: cs = 1613; goto _test_eof;
	_test_eof1614: cs = 1614; goto _test_eof;
	_test_eof1615: cs = 1615; goto _test_eof;
	_test_eof1616: cs = 1616; goto _test_eof;
	_test_eof1617: cs = 1617; goto _test_eof;
	_test_eof1618: cs = 1618; goto _test_eof;
	_test_eof1619: cs = 1619; goto _test_eof;
	_test_eof1620: cs = 1620; goto _test_eof;
	_test_eof1621: cs = 1621; goto _test_eof;
	_test_eof1622: cs = 1622; goto _test_eof;
	_test_eof1623: cs = 1623; goto _test_eof;
	_test_eof1624: cs = 1624; goto _test_eof;
	_test_eof1625: cs = 1625; goto _test_eof;
	_test_eof1626: cs = 1626; goto _test_eof;
	_test_eof1627: cs = 1627; goto _test_eof;
	_test_eof1628: cs = 1628; goto _test_eof;
	_test_eof1629: cs = 1629; goto _test_eof;
	_test_eof1630: cs = 1630; goto _test_eof;
	_test_eof1631: cs = 1631; goto _test_eof;
	_test_eof1632: cs = 1632; goto _test_eof;
	_test_eof1633: cs = 1633; goto _test_eof;
	_test_eof1634: cs = 1634; goto _test_eof;
	_test_eof1635: cs = 1635; goto _test_eof;
	_test_eof1636: cs = 1636; goto _test_eof;
	_test_eof1637: cs = 1637; goto _test_eof;
	_test_eof1638: cs = 1638; goto _test_eof;
	_test_eof1639: cs = 1639; goto _test_eof;
	_test_eof1640: cs = 1640; goto _test_eof;

	_test_eof: {}
	if ( p == eof )
	{
	switch ( cs ) {
	case 7:
	case 8:
	case 192:
	case 216:
	case 218:
	case 274:
	case 288:
	case 314:
	case 370:
	case 371:
	case 377:
	{
		WARN(ZS_BAD_REST);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 321:
	case 322:
	case 323:
	case 328:
	case 329:
	{
		WARN(ZS_BAD_DNAME_CHAR);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 201:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 338:
	{
		WARN(ZS_BAD_TEXT);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 343:
	case 351:
	{
		ERR(ZS_BAD_TTL);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 352:
	case 353:
	case 354:
	case 363:
	{
		ERR(ZS_BAD_ORIGIN);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 365:
	{
		ERR(ZS_BAD_INCLUDE_FILENAME);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 368:
	case 378:
	{
		ERR(ZS_BAD_INCLUDE_ORIGIN);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 1645:
	{
		NOERR;
	}
	break;
	case 193:
	case 194:
	case 195:
	case 196:
	case 197:
	case 198:
	case 199:
	case 200:
	case 239:
	case 240:
	case 241:
	case 242:
	case 243:
	case 244:
	case 245:
	case 246:
	case 247:
	{
		ERR(ZS_BAD_DIRECTIVE);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 381:
	case 382:
	case 383:
	case 384:
	case 385:
	case 386:
	case 387:
	{
		WARN(ZS_BAD_BASE64_CHAR);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 388:
	case 389:
	case 390:
	case 391:
	case 392:
	case 393:
	case 394:
	case 395:
	case 396:
	case 397:
	case 398:
	case 399:
	case 400:
	case 401:
	case 402:
	case 403:
	case 404:
	case 405:
	case 406:
	case 407:
	case 408:
	case 409:
	case 410:
	case 411:
	case 412:
	case 413:
	case 414:
	case 415:
	case 416:
	case 417:
	case 418:
	case 419:
	case 420:
	case 421:
	case 422:
	case 423:
	case 424:
	case 425:
	case 426:
	case 427:
	case 428:
	case 429:
	case 430:
	case 431:
	case 432:
	case 433:
	case 434:
	case 435:
	case 436:
	case 437:
	case 438:
	case 439:
	case 440:
	case 441:
	case 442:
	case 443:
	case 444:
	case 445:
	case 446:
	case 447:
	case 448:
	case 449:
	case 450:
	case 451:
	case 452:
	case 453:
	case 454:
	case 455:
	case 456:
	case 457:
	case 458:
	case 459:
	case 460:
	case 461:
	case 462:
	case 463:
	case 464:
	case 465:
	case 466:
	case 467:
	case 468:
	case 469:
	case 470:
	case 471:
	case 472:
	case 473:
	case 474:
	case 475:
	case 476:
	case 477:
	case 478:
	case 479:
	case 480:
	case 481:
	case 482:
	case 483:
	case 484:
	case 485:
	case 486:
	case 487:
	case 488:
	case 489:
	case 490:
	case 491:
	case 492:
	case 493:
	case 494:
	case 495:
	case 496:
	case 497:
	case 498:
	case 499:
	case 500:
	case 501:
	case 502:
	case 503:
	case 504:
	case 505:
	case 506:
	case 507:
	case 508:
	case 509:
	case 510:
	case 511:
	case 512:
	case 513:
	case 514:
	case 515:
	case 516:
	case 517:
	case 518:
	case 519:
	case 520:
	case 521:
	case 522:
	case 523:
	case 524:
	case 525:
	case 526:
	case 527:
	case 528:
	case 529:
	case 530:
	case 531:
	case 532:
	case 533:
	case 534:
	case 535:
	case 536:
	case 537:
	case 538:
	case 539:
	case 540:
	case 541:
	case 542:
	case 543:
	case 544:
	case 545:
	case 546:
	case 547:
	case 548:
	case 549:
	case 550:
	case 551:
	case 552:
	case 553:
	case 554:
	case 555:
	case 556:
	case 557:
	case 558:
	case 559:
	case 560:
	{
		WARN(ZS_BAD_BITMAP);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 561:
	case 568:
	case 569:
	case 570:
	case 577:
	case 579:
	{
		WARN(ZS_BAD_HEX_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 636:
	case 637:
	case 638:
	case 639:
	case 640:
	case 641:
	case 642:
	case 643:
	case 644:
	case 645:
	case 646:
	case 647:
	case 648:
	case 649:
	case 650:
	case 651:
	case 652:
	case 653:
	case 654:
	case 655:
	case 656:
	case 657:
	case 658:
	case 659:
	case 660:
	case 661:
	case 662:
	case 663:
	case 664:
	case 665:
	case 666:
	case 667:
	case 668:
	case 669:
	case 670:
	case 671:
	case 672:
	case 673:
	case 674:
	case 675:
	case 676:
	case 677:
	case 678:
	case 679:
	case 686:
	case 687:
	case 688:
	case 689:
	case 690:
	case 697:
	case 698:
	case 701:
	case 702:
	case 703:
	case 704:
	case 705:
	case 706:
	case 707:
	case 708:
	case 709:
	case 710:
	case 711:
	case 712:
	case 713:
	case 714:
	case 715:
	case 716:
	case 717:
	case 718:
	case 719:
	case 720:
	case 721:
	case 722:
	case 723:
	case 724:
	case 725:
	case 726:
	case 727:
	case 728:
	case 729:
	case 730:
	case 731:
	case 732:
	case 733:
	case 734:
	case 735:
	case 736:
	case 737:
	case 738:
	case 739:
	case 740:
	case 745:
	case 746:
	{
		WARN(ZS_BAD_SVCB_PARAM);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 580:
	case 581:
	case 582:
	case 583:
	case 584:
	case 585:
	case 586:
	case 587:
	case 588:
	case 589:
	case 590:
	case 591:
	case 592:
	case 593:
	case 594:
	case 595:
	case 596:
	case 597:
	case 598:
	case 599:
	case 600:
	case 601:
	case 602:
	case 603:
	case 604:
	case 605:
	case 606:
	case 607:
	case 608:
	case 609:
	case 612:
	case 613:
	case 614:
	case 615:
	case 616:
	case 617:
	case 618:
	case 619:
	case 620:
	case 621:
	case 622:
	case 623:
	case 624:
	case 625:
	case 626:
	case 627:
	case 628:
	case 629:
	case 630:
	case 631:
	case 632:
	case 633:
	case 634:
	case 635:
	{
		WARN(ZS_BAD_SVCB_MANDATORY);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 747:
	case 748:
	case 749:
	case 750:
	case 751:
	case 752:
	case 753:
	case 754:
	case 755:
	case 756:
	case 757:
	case 758:
	case 759:
	case 760:
	case 761:
	case 762:
	case 763:
	case 764:
	case 765:
	case 766:
	case 767:
	case 768:
	case 769:
	case 770:
	case 771:
	case 772:
	case 773:
	case 774:
	case 775:
	case 776:
	case 777:
	case 778:
	case 779:
	case 780:
	case 781:
	case 782:
	case 783:
	case 784:
	case 785:
	case 786:
	case 787:
	case 788:
	case 789:
	case 790:
	case 791:
	case 792:
	case 793:
	case 794:
	case 795:
	case 796:
	case 797:
	case 798:
	case 799:
	case 800:
	case 801:
	case 802:
	case 803:
	case 804:
	case 805:
	case 806:
	case 807:
	case 808:
	case 809:
	case 810:
	case 811:
	case 812:
	case 813:
	case 814:
	case 815:
	case 816:
	case 817:
	case 818:
	case 819:
	case 820:
	case 821:
	case 822:
	case 823:
	case 824:
	case 825:
	case 826:
	case 827:
	case 828:
	case 829:
	case 830:
	case 831:
	case 832:
	case 833:
	case 834:
	case 835:
	case 836:
	case 837:
	case 838:
	case 839:
	case 840:
	case 841:
	case 842:
	case 843:
	case 844:
	case 845:
	case 846:
	case 847:
	case 848:
	case 849:
	case 850:
	{
		WARN(ZS_BAD_ALGORITHM);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 851:
	case 852:
	case 853:
	case 854:
	case 855:
	case 856:
	case 857:
	case 858:
	case 859:
	case 860:
	case 861:
	case 862:
	case 863:
	case 864:
	case 865:
	case 866:
	case 867:
	case 868:
	case 869:
	case 870:
	case 871:
	case 872:
	case 873:
	case 874:
	case 875:
	case 876:
	case 877:
	case 878:
	case 879:
	case 880:
	case 881:
	case 882:
	case 883:
	case 884:
	case 885:
	case 886:
	case 887:
	case 888:
	case 889:
	case 890:
	case 891:
	{
		WARN(ZS_BAD_CERT_TYPE);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 892:
	case 893:
	case 894:
	case 895:
	case 896:
	case 897:
	case 898:
	case 899:
	{
                WARN(ZS_BAD_DSYNC_SCHEME);
                p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
        }
	break;
	case 5:
	case 9:
	case 10:
	case 293:
	case 902:
	case 903:
	case 904:
	case 905:
	case 906:
	case 907:
	case 921:
	case 925:
	case 929:
	case 933:
	case 934:
	case 935:
	case 936:
	case 937:
	case 938:
	case 939:
	case 940:
	case 941:
	case 942:
	case 943:
	case 944:
	case 945:
	case 948:
	case 949:
	case 950:
	case 1018:
	case 1019:
	case 1020:
	case 1021:
	case 1022:
	case 1027:
	case 1028:
	case 1029:
	case 1030:
	case 1031:
	case 1032:
	case 1033:
	case 1034:
	case 1035:
	case 1036:
	case 1037:
	case 1038:
	case 1039:
	case 1040:
	case 1041:
	case 1044:
	case 1045:
	case 1046:
	case 1047:
	case 1048:
	case 1049:
	case 1050:
	case 1058:
	case 1064:
	case 1065:
	case 1072:
	case 1073:
	case 1074:
	case 1083:
	case 1084:
	case 1123:
	case 1126:
	case 1127:
	case 1138:
	case 1139:
	case 1140:
	case 1141:
	case 1142:
	case 1143:
	case 1144:
	case 1145:
	case 1146:
	case 1147:
	case 1148:
	case 1149:
	case 1319:
	case 1320:
	case 1321:
	case 1326:
	case 1327:
	case 1328:
	case 1329:
	case 1330:
	case 1331:
	case 1332:
	case 1333:
	case 1334:
	case 1352:
	case 1358:
	case 1361:
	case 1362:
	case 1363:
	case 1374:
	case 1375:
	case 1376:
	case 1387:
	case 1388:
	case 1389:
	case 1394:
	case 1395:
	case 1406:
	case 1407:
	case 1408:
	case 1413:
	case 1426:
	case 1443:
	case 1444:
	case 1445:
	case 1446:
	case 1449:
	case 1450:
	case 1451:
	case 1452:
	case 1453:
	case 1454:
	case 1457:
	case 1458:
	case 1459:
	case 1460:
	case 1463:
	case 1464:
	case 1467:
	case 1468:
	case 1469:
	case 1470:
	case 1471:
	{
		WARN(ZS_BAD_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 3:
	case 17:
	case 18:
	case 22:
	case 23:
	case 24:
	case 25:
	case 26:
	case 29:
	case 30:
	case 32:
	case 33:
	case 34:
	case 36:
	case 37:
	case 38:
	case 40:
	case 41:
	case 42:
	case 43:
	case 45:
	case 46:
	case 47:
	case 49:
	case 50:
	case 51:
	case 54:
	case 55:
	case 57:
	case 58:
	case 59:
	case 60:
	case 62:
	case 64:
	case 65:
	case 66:
	case 67:
	case 69:
	case 70:
	case 71:
	case 73:
	case 74:
	case 75:
	case 76:
	case 77:
	case 78:
	case 79:
	case 80:
	case 81:
	case 82:
	case 84:
	case 85:
	case 88:
	case 89:
	case 91:
	case 93:
	case 96:
	case 97:
	case 98:
	case 99:
	case 102:
	case 103:
	case 104:
	case 105:
	case 107:
	case 110:
	case 113:
	case 114:
	case 115:
	case 116:
	case 118:
	case 119:
	case 120:
	case 121:
	case 122:
	case 123:
	case 124:
	case 125:
	case 126:
	case 128:
	case 129:
	case 131:
	case 133:
	case 134:
	case 135:
	case 138:
	case 139:
	case 140:
	case 141:
	case 142:
	case 144:
	case 146:
	case 148:
	case 150:
	case 151:
	case 152:
	case 154:
	case 155:
	case 157:
	case 158:
	case 159:
	case 161:
	case 163:
	case 164:
	case 167:
	case 168:
	case 170:
	case 171:
	case 172:
	case 173:
	case 174:
	case 176:
	case 177:
	case 178:
	case 179:
	case 180:
	case 182:
	case 184:
	case 185:
	case 191:
	case 206:
	case 210:
	case 277:
	case 278:
	case 280:
	case 281:
	case 282:
	case 284:
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 346:
	case 347:
	{
		WARN(ZS_BAD_REST);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		ERR(ZS_BAD_TTL);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 355:
	case 356:
	case 357:
	case 362:
	{
		WARN(ZS_BAD_REST);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		ERR(ZS_BAD_ORIGIN);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 324:
	case 325:
	case 326:
	case 327:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_DNAME_CHAR);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 358:
	case 359:
	case 360:
	case 361:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		ERR(ZS_BAD_ORIGIN);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 372:
	case 373:
	case 374:
	case 375:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		ERR(ZS_BAD_INCLUDE_ORIGIN);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 271:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 297:
	case 298:
	case 299:
	case 300:
	case 301:
	case 302:
	case 303:
	case 304:
	case 305:
	case 306:
	case 307:
	case 308:
	case 309:
	case 310:
	case 311:
	case 312:
	case 313:
	case 316:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 344:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		ERR(ZS_BAD_TTL);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 562:
	case 563:
	case 571:
	case 572:
	case 578:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_HEX_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 699:
	case 700:
	case 741:
	case 742:
	case 743:
	case 744:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_SVCB_PARAM);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 610:
	case 611:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_SVCB_MANDATORY);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 908:
	case 909:
	case 910:
	case 912:
	case 914:
	case 916:
	case 946:
	case 947:
	case 1012:
	case 1013:
	case 1014:
	case 1015:
	case 1016:
	case 1017:
	case 1023:
	case 1024:
	case 1025:
	case 1026:
	case 1042:
	case 1043:
	case 1062:
	case 1063:
	case 1066:
	case 1067:
	case 1075:
	case 1076:
	case 1077:
	case 1078:
	case 1085:
	case 1086:
	case 1128:
	case 1129:
	case 1130:
	case 1131:
	case 1136:
	case 1137:
	case 1322:
	case 1323:
	case 1324:
	case 1325:
	case 1335:
	case 1336:
	case 1337:
	case 1338:
	case 1339:
	case 1340:
	case 1364:
	case 1365:
	case 1366:
	case 1367:
	case 1368:
	case 1369:
	case 1377:
	case 1378:
	case 1379:
	case 1380:
	case 1381:
	case 1382:
	case 1390:
	case 1391:
	case 1392:
	case 1393:
	case 1396:
	case 1397:
	case 1398:
	case 1399:
	case 1400:
	case 1401:
	case 1409:
	case 1410:
	case 1414:
	case 1415:
	case 1439:
	case 1440:
	case 1441:
	case 1442:
	case 1447:
	case 1448:
	case 1455:
	case 1456:
	case 1465:
	case 1466:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 165:
	case 186:
	case 202:
	case 205:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 1132:
	case 1133:
	case 1134:
	case 1135:
	{
		WARN(ZS_BAD_TIMESTAMP_CHAR);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 330:
	case 331:
	case 336:
	case 337:
	{
		WARN(ZS_BAD_TEXT_CHAR);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_TEXT);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 951:
	case 952:
	case 953:
	case 954:
	{
		s->long_string = false;
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 366:
	{
		ERR(ZS_BAD_INCLUDE_FILENAME);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 367:
	case 369:
	case 376:
	{
		ERR(ZS_BAD_INCLUDE_ORIGIN);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 680:
	case 681:
	case 682:
	case 683:
	case 684:
	case 685:
	case 691:
	case 692:
	case 693:
	case 694:
	case 695:
	case 696:
	{
		WARN(ZS_BAD_ADDRESS_CHAR);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_SVCB_PARAM);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 900:
	case 901:
	case 955:
	case 956:
	case 1411:
	case 1412:
	{
		WARN(ZS_BAD_ADDRESS_CHAR);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 1051:
	case 1052:
	case 1053:
	case 1056:
	case 1057:
	case 1059:
	{
		WARN(ZS_BAD_APL);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 1068:
	case 1069:
	case 1070:
	case 1071:
	case 1079:
	case 1080:
	case 1081:
	case 1082:
	case 1341:
	case 1342:
	case 1359:
	case 1360:
	case 1370:
	case 1371:
	case 1372:
	case 1373:
	case 1383:
	case 1384:
	case 1385:
	case 1386:
	case 1402:
	case 1403:
	case 1404:
	case 1405:
	case 1416:
	case 1417:
	case 1418:
	case 1419:
	case 1421:
	case 1422:
	case 1423:
	case 1424:
	case 1427:
	case 1428:
	case 1430:
	case 1431:
	case 1433:
	case 1434:
	case 1436:
	case 1437:
	{
		WARN(ZS_BAD_HEX_CHAR);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 1343:
	case 1344:
	case 1345:
	case 1346:
	case 1347:
	case 1348:
	case 1349:
	case 1350:
	case 1351:
	case 1353:
	case 1354:
	case 1355:
	case 1356:
	case 1357:
	{
		WARN(ZS_BAD_BASE32HEX_CHAR);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 1087:
	case 1088:
	case 1091:
	case 1100:
	case 1101:
	case 1102:
	case 1107:
	case 1108:
	case 1109:
	case 1114:
	case 1115:
	case 1116:
	case 1119:
	case 1121:
	case 1122:
	{
		WARN(ZS_BAD_GATEWAY);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 1093:
	case 1094:
	case 1095:
	case 1096:
	case 1097:
	case 1098:
	case 1099:
	{
		WARN(ZS_BAD_GATEWAY_KEY);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 1124:
	case 1125:
	case 1150:
	case 1151:
	case 1152:
	case 1153:
	case 1154:
	case 1155:
	case 1156:
	case 1157:
	case 1158:
	case 1159:
	case 1160:
	case 1161:
	case 1162:
	case 1163:
	case 1164:
	case 1165:
	case 1166:
	case 1167:
	case 1168:
	case 1169:
	case 1170:
	case 1171:
	case 1172:
	case 1173:
	case 1174:
	case 1175:
	case 1176:
	case 1177:
	case 1178:
	case 1179:
	case 1180:
	case 1181:
	case 1182:
	case 1183:
	case 1184:
	case 1185:
	case 1186:
	case 1187:
	case 1188:
	case 1189:
	case 1190:
	case 1191:
	case 1192:
	case 1193:
	case 1194:
	case 1195:
	case 1196:
	case 1197:
	case 1198:
	case 1199:
	case 1200:
	case 1201:
	case 1202:
	case 1203:
	case 1204:
	case 1205:
	case 1206:
	case 1207:
	case 1208:
	case 1209:
	case 1210:
	case 1211:
	case 1212:
	case 1213:
	case 1214:
	case 1215:
	case 1216:
	case 1217:
	case 1218:
	case 1219:
	case 1220:
	case 1221:
	case 1222:
	case 1223:
	case 1224:
	case 1225:
	case 1226:
	case 1227:
	case 1228:
	case 1229:
	case 1230:
	case 1231:
	case 1232:
	case 1233:
	case 1234:
	case 1235:
	case 1236:
	case 1237:
	case 1238:
	case 1239:
	case 1240:
	case 1241:
	case 1242:
	case 1243:
	case 1244:
	case 1245:
	case 1246:
	case 1247:
	case 1248:
	case 1249:
	case 1250:
	case 1251:
	case 1252:
	case 1253:
	case 1254:
	case 1255:
	case 1256:
	case 1257:
	case 1258:
	case 1259:
	case 1260:
	case 1261:
	case 1262:
	case 1263:
	case 1264:
	case 1265:
	case 1266:
	case 1267:
	case 1268:
	case 1269:
	case 1270:
	case 1271:
	case 1272:
	case 1273:
	case 1274:
	case 1275:
	case 1276:
	case 1277:
	case 1278:
	case 1279:
	case 1280:
	case 1281:
	case 1282:
	case 1283:
	case 1284:
	case 1285:
	case 1286:
	case 1287:
	case 1288:
	case 1289:
	case 1290:
	case 1291:
	case 1292:
	case 1293:
	case 1294:
	case 1295:
	case 1296:
	case 1297:
	case 1298:
	case 1299:
	case 1300:
	case 1301:
	case 1304:
	case 1305:
	case 1306:
	case 1307:
	case 1308:
	case 1309:
	case 1310:
	case 1311:
	case 1312:
	case 1313:
	case 1314:
	case 1315:
	case 1316:
	case 1317:
	case 1318:
	case 1461:
	case 1462:
	case 1472:
	case 1473:
	case 1474:
	case 1475:
	case 1476:
	case 1477:
	case 1478:
	case 1479:
	case 1480:
	case 1481:
	case 1482:
	case 1483:
	case 1484:
	case 1485:
	case 1486:
	case 1487:
	case 1488:
	case 1489:
	case 1490:
	case 1491:
	case 1492:
	case 1493:
	case 1494:
	case 1495:
	case 1496:
	case 1497:
	case 1498:
	case 1499:
	case 1500:
	case 1501:
	case 1502:
	case 1503:
	case 1504:
	case 1505:
	case 1506:
	case 1507:
	case 1508:
	case 1509:
	case 1510:
	case 1511:
	case 1512:
	case 1513:
	case 1514:
	case 1515:
	case 1516:
	case 1517:
	case 1518:
	case 1519:
	case 1520:
	case 1521:
	case 1522:
	case 1523:
	case 1524:
	case 1525:
	case 1526:
	case 1527:
	case 1528:
	case 1529:
	case 1530:
	case 1531:
	case 1532:
	case 1533:
	case 1534:
	case 1535:
	case 1536:
	case 1537:
	case 1538:
	case 1539:
	case 1540:
	case 1541:
	case 1542:
	case 1543:
	case 1544:
	case 1545:
	case 1546:
	case 1547:
	case 1548:
	case 1549:
	case 1550:
	case 1551:
	case 1552:
	case 1553:
	case 1554:
	case 1555:
	case 1556:
	case 1557:
	case 1558:
	case 1559:
	case 1560:
	case 1561:
	case 1562:
	case 1563:
	case 1564:
	case 1565:
	case 1566:
	case 1567:
	case 1568:
	case 1569:
	case 1570:
	case 1571:
	case 1572:
	case 1573:
	case 1574:
	case 1575:
	case 1576:
	case 1577:
	case 1578:
	case 1579:
	case 1580:
	case 1581:
	case 1582:
	case 1583:
	case 1584:
	case 1585:
	case 1586:
	case 1587:
	case 1588:
	case 1589:
	case 1590:
	case 1591:
	case 1592:
	case 1593:
	case 1594:
	case 1595:
	case 1596:
	case 1597:
	case 1598:
	case 1599:
	case 1600:
	case 1601:
	case 1602:
	case 1603:
	case 1604:
	case 1605:
	case 1606:
	case 1607:
	case 1608:
	case 1609:
	case 1610:
	case 1611:
	case 1612:
	case 1613:
	case 1614:
	case 1615:
	case 1616:
	case 1617:
	case 1618:
	case 1619:
	case 1620:
	case 1621:
	case 1622:
	case 1623:
	case 1626:
	case 1627:
	case 1628:
	case 1629:
	case 1630:
	case 1631:
	case 1632:
	case 1633:
	case 1634:
	case 1635:
	case 1636:
	case 1637:
	case 1638:
	case 1639:
	case 1640:
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 957:
	case 958:
	case 959:
	case 960:
	case 961:
	case 962:
	case 963:
	case 964:
	case 965:
	case 966:
	case 967:
	case 968:
	case 969:
	case 970:
	case 971:
	case 972:
	case 973:
	case 974:
	case 975:
	case 976:
	case 977:
	case 978:
	case 979:
	case 980:
	case 981:
	case 982:
	case 983:
	case 984:
	case 985:
	case 986:
	case 987:
	case 988:
	case 989:
	case 990:
	case 991:
	case 992:
	case 993:
	case 994:
	case 995:
	case 996:
	case 997:
	case 998:
	case 999:
	case 1000:
	case 1001:
	case 1002:
	case 1003:
	case 1004:
	case 1005:
	case 1006:
	case 1007:
	case 1008:
	case 1009:
	case 1010:
	case 1011:
	{
		WARN(ZS_BAD_LOC_DATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 6:
	case 11:
	case 12:
	case 13:
	case 20:
	case 21:
	case 214:
	case 217:
	case 237:
	case 273:
	case 275:
	case 276:
	case 286:
	case 287:
	case 289:
	case 290:
	case 291:
	case 292:
	case 295:
	case 296:
	{
		WARN(ZS_BAD_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 16:
	case 251:
	case 315:
	case 317:
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 4:
	case 19:
	case 27:
	case 28:
	case 31:
	case 35:
	case 39:
	case 44:
	case 48:
	case 52:
	case 53:
	case 56:
	case 61:
	case 63:
	case 68:
	case 72:
	case 83:
	case 86:
	case 87:
	case 90:
	case 92:
	case 94:
	case 95:
	case 100:
	case 101:
	case 106:
	case 108:
	case 109:
	case 111:
	case 112:
	case 117:
	case 127:
	case 130:
	case 132:
	case 136:
	case 137:
	case 143:
	case 145:
	case 147:
	case 149:
	case 153:
	case 156:
	case 160:
	case 162:
	case 169:
	case 175:
	case 181:
	case 279:
	case 283:
	case 285:
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 248:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 211:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 1089:
	case 1090:
	case 1103:
	case 1104:
	case 1110:
	case 1111:
	case 1117:
	case 1118:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_GATEWAY);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 1302:
	case 1303:
	case 1624:
	case 1625:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 1:
	case 183:
	case 215:
	case 250:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 166:
	case 212:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 349:
	{
		WARN(ZS_BAD_TIME_UNIT);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_NUMBER);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		ERR(ZS_BAD_TTL);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 911:
	case 913:
	case 915:
	case 917:
	case 918:
	case 919:
	case 920:
	case 922:
	case 923:
	case 924:
	case 926:
	case 927:
	case 928:
	case 930:
	case 931:
	case 932:
	{
		WARN(ZS_BAD_TIME_UNIT);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_NUMBER);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 2:
	case 187:
	case 188:
	case 189:
	case 190:
	case 207:
	case 208:
	case 209:
	{
		WARN(ZS_BAD_TIME_UNIT);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_NUMBER);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 332:
	case 333:
	case 334:
	case 335:
	case 339:
	case 340:
	case 341:
	case 342:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_TEXT_CHAR);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_TEXT);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 1054:
	case 1055:
	case 1060:
	case 1061:
	{
		WARN(ZS_BAD_ADDRESS_CHAR);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_APL);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 1105:
	case 1112:
	{
		WARN(ZS_BAD_ADDRESS_CHAR);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_GATEWAY);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 564:
	case 565:
	case 566:
	case 567:
	case 573:
	case 574:
	case 575:
	case 576:
	{
		WARN(ZS_BAD_HEX_CHAR);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_HEX_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_HEX_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 1420:
	{
		WARN(ZS_BAD_HEX_CHAR);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_CHAR_COLON);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 1092:
	case 1120:
	{
		WARN(ZS_BAD_GATEWAY);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_GATEWAY_KEY);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 1429:
	case 1432:
	case 1435:
	case 1438:
	{
		WARN(ZS_BAD_CHAR_DASH);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_HEX_CHAR);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 1425:
	{
		WARN(ZS_BAD_CHAR_COLON);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_HEX_CHAR);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 238:
	{
		WARN(ZS_BAD_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		ERR(ZS_BAD_DIRECTIVE);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 213:
	case 220:
	case 221:
	case 222:
	case 223:
	case 224:
	case 225:
	case 226:
	case 227:
	case 228:
	case 229:
	case 230:
	case 231:
	case 232:
	case 233:
	case 234:
	case 235:
	case 236:
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 204:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_TIME_UNIT);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_NUMBER);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 252:
	case 254:
	case 255:
	case 256:
	case 257:
	case 258:
	case 259:
	case 260:
	case 261:
	case 262:
	case 263:
	case 264:
	case 265:
	case 266:
	case 267:
	case 268:
	case 269:
	case 270:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 14:
	case 219:
	case 253:
	case 272:
	case 294:
	{
		WARN(ZS_BAD_NUMBER);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 345:
	case 348:
	case 350:
	{
		WARN(ZS_BAD_TIME_UNIT);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_NUMBER);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		ERR(ZS_BAD_TTL);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 1106:
	case 1113:
	{
		WARN(ZS_BAD_ADDRESS_CHAR);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_GATEWAY);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_GATEWAY_KEY);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 15:
	{
		WARN(ZS_BAD_TIME_UNIT);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_NUMBER);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	case 249:
	{
		s->r_owner_length = 0;
		WARN(ZS_BAD_OWNER);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_TIME_UNIT);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_NUMBER);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_UNSUPPORTED_TYPE);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_RDATA);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	{
		WARN(ZS_BAD_REST);
		p--; {       if ( p == pe )
               goto _test_eof319;
goto st319;}
	}
	break;
	}
	}

	_out: {}
	}


	// Check if the scanner state machine is in an uncovered state.
	bool extra_error = false;
	if (cs == 0) {
		ERR(ZS_UNCOVERED_STATE);
		extra_error = true;
	// Check for an unclosed multiline record.
	} else if (s->input.eof && s->multiline) {
		ERR(ZS_UNCLOSED_MULTILINE);
		extra_error = true;
		s->line_counter--;
	}

	// Treat the extra error.
	if (extra_error) {
		s->error.counter++;
		s->state = ZS_STATE_ERROR;

		// Copy the error context just for the part of the current line.
		s->buffer_length = 0;
		while (p < pe && *p != '\n' && s->buffer_length < 50) {
			s->buffer[s->buffer_length++] = *p++;
		}
		s->buffer[s->buffer_length++] = 0;

		// Execute the error callback.
		if (s->process.automatic && s->process.error != NULL) {
			s->process.error(s);
		}

		return;
	}

	// Storing scanner states.
	s->cs  = cs;
	s->top = top;
	memcpy(s->stack, stack, sizeof(stack));

	// Store the current parser position.
	s->input.current = p;

	// Storing r_data pointer.
	s->r_data_tail = rdata_tail - s->r_data;

	if (*wrap == WRAP_DETECTED) {
		if (set_input_string(s, "\\", 1, true) != 0) {
			return;
		}

		*wrap = WRAP_PROCESS;
		parse(s, wrap);
	} else {
		*wrap = WRAP_NONE;
	}
}

_public_
int zs_parse_record(
	zs_scanner_t *s)
{
	if (s == NULL) {
		return -1;
	}

	// Check if parsing is possible.
	switch (s->state) {
	case ZS_STATE_NONE:
	case ZS_STATE_DATA:
	case ZS_STATE_INCLUDE:
		break;
	case ZS_STATE_ERROR:
		if (s->error.fatal) {
			return -1;
		}
		break;
	default:
		// Return if stop or end of file.
		return 0;
	}

	// Check for the end of the input.
	if (s->input.current != s->input.end) {
		// Try to parse another item.
		s->state = ZS_STATE_NONE;
		wrap_t wrap = WRAP_NONE;
		parse(s, &wrap);

		// Finish if nothing was parsed.
		if (s->state == ZS_STATE_NONE) {
			// Parse the final block.
			if (set_input_string(s, "\n", 1, true) != 0) {
				return -1;
			}
			parse(s, &wrap);
			if (s->state == ZS_STATE_NONE) {
				s->state = ZS_STATE_EOF;
			}
		}
	} else {
		s->state = ZS_STATE_EOF;
	}

	return 0;
}

_public_
int zs_parse_all(
	zs_scanner_t *s)
{
	if (s == NULL) {
		return -1;
	}

	s->process.automatic = true;

	// Parse input block.
	wrap_t wrap = WRAP_NONE;
	parse(s, &wrap);

	// Parse trailing newline-char block if it makes sense.
	if (s->state != ZS_STATE_STOP && !s->error.fatal) {
		if (set_input_string(s, "\n", 1, true) != 0) {
			return -1;
		}
		parse(s, &wrap);
	}

	// Check if any errors have occurred.
	if (s->error.counter > 0) {
		return -1;
	}

	return 0;
}
